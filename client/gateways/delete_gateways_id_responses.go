// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// DeleteGatewaysIDReader is a Reader for the DeleteGatewaysID structure.
type DeleteGatewaysIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGatewaysIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteGatewaysIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteGatewaysIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGatewaysIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGatewaysIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteGatewaysIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteGatewaysIDOK creates a DeleteGatewaysIDOK with default headers values
func NewDeleteGatewaysIDOK() *DeleteGatewaysIDOK {
	return &DeleteGatewaysIDOK{}
}

/*DeleteGatewaysIDOK handles this case with default header values.

Successful
*/
type DeleteGatewaysIDOK struct {
	Payload *models.Status
}

func (o *DeleteGatewaysIDOK) Error() string {
	return fmt.Sprintf("[DELETE /gateways/{id}][%d] deleteGatewaysIdOK  %+v", 200, o.Payload)
}

func (o *DeleteGatewaysIDOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *DeleteGatewaysIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGatewaysIDUnauthorized creates a DeleteGatewaysIDUnauthorized with default headers values
func NewDeleteGatewaysIDUnauthorized() *DeleteGatewaysIDUnauthorized {
	return &DeleteGatewaysIDUnauthorized{}
}

/*DeleteGatewaysIDUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteGatewaysIDUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteGatewaysIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /gateways/{id}][%d] deleteGatewaysIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteGatewaysIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGatewaysIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGatewaysIDForbidden creates a DeleteGatewaysIDForbidden with default headers values
func NewDeleteGatewaysIDForbidden() *DeleteGatewaysIDForbidden {
	return &DeleteGatewaysIDForbidden{}
}

/*DeleteGatewaysIDForbidden handles this case with default header values.

Forbidden
*/
type DeleteGatewaysIDForbidden struct {
	Payload *models.Error
}

func (o *DeleteGatewaysIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /gateways/{id}][%d] deleteGatewaysIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteGatewaysIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGatewaysIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGatewaysIDNotFound creates a DeleteGatewaysIDNotFound with default headers values
func NewDeleteGatewaysIDNotFound() *DeleteGatewaysIDNotFound {
	return &DeleteGatewaysIDNotFound{}
}

/*DeleteGatewaysIDNotFound handles this case with default header values.

Not Found
*/
type DeleteGatewaysIDNotFound struct {
	Payload *models.Error
}

func (o *DeleteGatewaysIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /gateways/{id}][%d] deleteGatewaysIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteGatewaysIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGatewaysIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGatewaysIDInternalServerError creates a DeleteGatewaysIDInternalServerError with default headers values
func NewDeleteGatewaysIDInternalServerError() *DeleteGatewaysIDInternalServerError {
	return &DeleteGatewaysIDInternalServerError{}
}

/*DeleteGatewaysIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteGatewaysIDInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteGatewaysIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /gateways/{id}][%d] deleteGatewaysIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteGatewaysIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGatewaysIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
