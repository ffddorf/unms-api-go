// Code generated by go-swagger; DO NOT EDIT.

package outages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// GetOutagesReader is a Reader for the GetOutages structure.
type GetOutagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOutagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOutagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOutagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOutagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOutagesOK creates a GetOutagesOK with default headers values
func NewGetOutagesOK() *GetOutagesOK {
	return &GetOutagesOK{}
}

/*GetOutagesOK handles this case with default header values.

Successful
*/
type GetOutagesOK struct {
	Payload *models.Outages
}

func (o *GetOutagesOK) Error() string {
	return fmt.Sprintf("[GET /outages][%d] getOutagesOK  %+v", 200, o.Payload)
}

func (o *GetOutagesOK) GetPayload() *models.Outages {
	return o.Payload
}

func (o *GetOutagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Outages)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutagesBadRequest creates a GetOutagesBadRequest with default headers values
func NewGetOutagesBadRequest() *GetOutagesBadRequest {
	return &GetOutagesBadRequest{}
}

/*GetOutagesBadRequest handles this case with default header values.

Bad Request
*/
type GetOutagesBadRequest struct {
	Payload *models.Error
}

func (o *GetOutagesBadRequest) Error() string {
	return fmt.Sprintf("[GET /outages][%d] getOutagesBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutagesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOutagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutagesUnauthorized creates a GetOutagesUnauthorized with default headers values
func NewGetOutagesUnauthorized() *GetOutagesUnauthorized {
	return &GetOutagesUnauthorized{}
}

/*GetOutagesUnauthorized handles this case with default header values.

Unauthorized
*/
type GetOutagesUnauthorized struct {
	Payload *models.Error
}

func (o *GetOutagesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /outages][%d] getOutagesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOutagesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOutagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutagesForbidden creates a GetOutagesForbidden with default headers values
func NewGetOutagesForbidden() *GetOutagesForbidden {
	return &GetOutagesForbidden{}
}

/*GetOutagesForbidden handles this case with default header values.

Forbidden
*/
type GetOutagesForbidden struct {
	Payload *models.Error
}

func (o *GetOutagesForbidden) Error() string {
	return fmt.Sprintf("[GET /outages][%d] getOutagesForbidden  %+v", 403, o.Payload)
}

func (o *GetOutagesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOutagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutagesNotFound creates a GetOutagesNotFound with default headers values
func NewGetOutagesNotFound() *GetOutagesNotFound {
	return &GetOutagesNotFound{}
}

/*GetOutagesNotFound handles this case with default header values.

Not Found
*/
type GetOutagesNotFound struct {
	Payload *models.Error
}

func (o *GetOutagesNotFound) Error() string {
	return fmt.Sprintf("[GET /outages][%d] getOutagesNotFound  %+v", 404, o.Payload)
}

func (o *GetOutagesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOutagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutagesInternalServerError creates a GetOutagesInternalServerError with default headers values
func NewGetOutagesInternalServerError() *GetOutagesInternalServerError {
	return &GetOutagesInternalServerError{}
}

/*GetOutagesInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetOutagesInternalServerError struct {
	Payload *models.Error
}

func (o *GetOutagesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /outages][%d] getOutagesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutagesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOutagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
