// Code generated by go-swagger; DO NOT EDIT.

package outages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOutagesParams creates a new GetOutagesParams object
// with the default values initialized.
func NewGetOutagesParams() *GetOutagesParams {
	var ()
	return &GetOutagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOutagesParamsWithTimeout creates a new GetOutagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOutagesParamsWithTimeout(timeout time.Duration) *GetOutagesParams {
	var ()
	return &GetOutagesParams{

		timeout: timeout,
	}
}

// NewGetOutagesParamsWithContext creates a new GetOutagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOutagesParamsWithContext(ctx context.Context) *GetOutagesParams {
	var ()
	return &GetOutagesParams{

		Context: ctx,
	}
}

// NewGetOutagesParamsWithHTTPClient creates a new GetOutagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOutagesParamsWithHTTPClient(client *http.Client) *GetOutagesParams {
	var ()
	return &GetOutagesParams{
		HTTPClient: client,
	}
}

/*GetOutagesParams contains all the parameters to send to the API endpoint
for the get outages operation typically these are written to a http.Request
*/
type GetOutagesParams struct {

	/*Count*/
	Count float64
	/*DeviceID*/
	DeviceID *string
	/*InProgress*/
	InProgress *bool
	/*Page*/
	Page float64
	/*Period*/
	Period *float64
	/*Query*/
	Query *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get outages params
func (o *GetOutagesParams) WithTimeout(timeout time.Duration) *GetOutagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get outages params
func (o *GetOutagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get outages params
func (o *GetOutagesParams) WithContext(ctx context.Context) *GetOutagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get outages params
func (o *GetOutagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get outages params
func (o *GetOutagesParams) WithHTTPClient(client *http.Client) *GetOutagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get outages params
func (o *GetOutagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get outages params
func (o *GetOutagesParams) WithCount(count float64) *GetOutagesParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get outages params
func (o *GetOutagesParams) SetCount(count float64) {
	o.Count = count
}

// WithDeviceID adds the deviceID to the get outages params
func (o *GetOutagesParams) WithDeviceID(deviceID *string) *GetOutagesParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get outages params
func (o *GetOutagesParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithInProgress adds the inProgress to the get outages params
func (o *GetOutagesParams) WithInProgress(inProgress *bool) *GetOutagesParams {
	o.SetInProgress(inProgress)
	return o
}

// SetInProgress adds the inProgress to the get outages params
func (o *GetOutagesParams) SetInProgress(inProgress *bool) {
	o.InProgress = inProgress
}

// WithPage adds the page to the get outages params
func (o *GetOutagesParams) WithPage(page float64) *GetOutagesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get outages params
func (o *GetOutagesParams) SetPage(page float64) {
	o.Page = page
}

// WithPeriod adds the period to the get outages params
func (o *GetOutagesParams) WithPeriod(period *float64) *GetOutagesParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the get outages params
func (o *GetOutagesParams) SetPeriod(period *float64) {
	o.Period = period
}

// WithQuery adds the query to the get outages params
func (o *GetOutagesParams) WithQuery(query *string) *GetOutagesParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get outages params
func (o *GetOutagesParams) SetQuery(query *string) {
	o.Query = query
}

// WithType adds the typeVar to the get outages params
func (o *GetOutagesParams) WithType(typeVar *string) *GetOutagesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get outages params
func (o *GetOutagesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetOutagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param count
	qrCount := o.Count
	qCount := swag.FormatFloat64(qrCount)
	if qCount != "" {
		if err := r.SetQueryParam("count", qCount); err != nil {
			return err
		}
	}

	if o.DeviceID != nil {

		// query param deviceId
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("deviceId", qDeviceID); err != nil {
				return err
			}
		}

	}

	if o.InProgress != nil {

		// query param inProgress
		var qrInProgress bool
		if o.InProgress != nil {
			qrInProgress = *o.InProgress
		}
		qInProgress := swag.FormatBool(qrInProgress)
		if qInProgress != "" {
			if err := r.SetQueryParam("inProgress", qInProgress); err != nil {
				return err
			}
		}

	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatFloat64(qrPage)
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	if o.Period != nil {

		// query param period
		var qrPeriod float64
		if o.Period != nil {
			qrPeriod = *o.Period
		}
		qPeriod := swag.FormatFloat64(qrPeriod)
		if qPeriod != "" {
			if err := r.SetQueryParam("period", qPeriod); err != nil {
				return err
			}
		}

	}

	if o.Query != nil {

		// query param query
		var qrQuery string
		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {
			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
