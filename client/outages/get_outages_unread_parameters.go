// Code generated by go-swagger; DO NOT EDIT.

package outages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOutagesUnreadParams creates a new GetOutagesUnreadParams object
// with the default values initialized.
func NewGetOutagesUnreadParams() *GetOutagesUnreadParams {
	var ()
	return &GetOutagesUnreadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOutagesUnreadParamsWithTimeout creates a new GetOutagesUnreadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOutagesUnreadParamsWithTimeout(timeout time.Duration) *GetOutagesUnreadParams {
	var ()
	return &GetOutagesUnreadParams{

		timeout: timeout,
	}
}

// NewGetOutagesUnreadParamsWithContext creates a new GetOutagesUnreadParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOutagesUnreadParamsWithContext(ctx context.Context) *GetOutagesUnreadParams {
	var ()
	return &GetOutagesUnreadParams{

		Context: ctx,
	}
}

// NewGetOutagesUnreadParamsWithHTTPClient creates a new GetOutagesUnreadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOutagesUnreadParamsWithHTTPClient(client *http.Client) *GetOutagesUnreadParams {
	var ()
	return &GetOutagesUnreadParams{
		HTTPClient: client,
	}
}

/*GetOutagesUnreadParams contains all the parameters to send to the API endpoint
for the get outages unread operation typically these are written to a http.Request
*/
type GetOutagesUnreadParams struct {

	/*Timestamp*/
	Timestamp float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get outages unread params
func (o *GetOutagesUnreadParams) WithTimeout(timeout time.Duration) *GetOutagesUnreadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get outages unread params
func (o *GetOutagesUnreadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get outages unread params
func (o *GetOutagesUnreadParams) WithContext(ctx context.Context) *GetOutagesUnreadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get outages unread params
func (o *GetOutagesUnreadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get outages unread params
func (o *GetOutagesUnreadParams) WithHTTPClient(client *http.Client) *GetOutagesUnreadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get outages unread params
func (o *GetOutagesUnreadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTimestamp adds the timestamp to the get outages unread params
func (o *GetOutagesUnreadParams) WithTimestamp(timestamp float64) *GetOutagesUnreadParams {
	o.SetTimestamp(timestamp)
	return o
}

// SetTimestamp adds the timestamp to the get outages unread params
func (o *GetOutagesUnreadParams) SetTimestamp(timestamp float64) {
	o.Timestamp = timestamp
}

// WriteToRequest writes these params to a swagger request
func (o *GetOutagesUnreadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param timestamp
	qrTimestamp := o.Timestamp
	qTimestamp := swag.FormatFloat64(qrTimestamp)
	if qTimestamp != "" {
		if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
