// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetTasks(params *GetTasksParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasksOK, error)

	GetTasksBatchid(params *GetTasksBatchidParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasksBatchidOK, error)

	GetTasksInprogress(params *GetTasksInprogressParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasksInprogressOK, error)

	PostTasks(params *PostTasksParams, authInfo runtime.ClientAuthInfoWriter) (*PostTasksOK, error)

	PostTasksBatchidCancel(params *PostTasksBatchidCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PostTasksBatchidCancelOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetTasks lists all tasks
*/
func (a *Client) GetTasks(params *GetTasksParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasks",
		Method:             "GET",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTasksBatchid returns a mass upgrade task inner task items
*/
func (a *Client) GetTasksBatchid(params *GetTasksBatchidParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasksBatchidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksBatchidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasksBatchid",
		Method:             "GET",
		PathPattern:        "/tasks/{batchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksBatchidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksBatchidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasksBatchid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTasksInprogress returns number of tasks in progress state
*/
func (a *Client) GetTasksInprogress(params *GetTasksInprogressParams, authInfo runtime.ClientAuthInfoWriter) (*GetTasksInprogressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksInprogressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasksInprogress",
		Method:             "GET",
		PathPattern:        "/tasks/in-progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksInprogressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksInprogressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasksInprogress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostTasks starts f w upgrade task for a group of devices
*/
func (a *Client) PostTasks(params *PostTasksParams, authInfo runtime.ClientAuthInfoWriter) (*PostTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTasks",
		Method:             "POST",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostTasksBatchidCancel cancels a task
*/
func (a *Client) PostTasksBatchidCancel(params *PostTasksBatchidCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PostTasksBatchidCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTasksBatchidCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTasksBatchidCancel",
		Method:             "POST",
		PathPattern:        "/tasks/{batchId}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTasksBatchidCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTasksBatchidCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postTasksBatchidCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
