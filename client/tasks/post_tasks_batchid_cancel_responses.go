// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PostTasksBatchidCancelReader is a Reader for the PostTasksBatchidCancel structure.
type PostTasksBatchidCancelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTasksBatchidCancelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostTasksBatchidCancelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTasksBatchidCancelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostTasksBatchidCancelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostTasksBatchidCancelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostTasksBatchidCancelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTasksBatchidCancelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostTasksBatchidCancelOK creates a PostTasksBatchidCancelOK with default headers values
func NewPostTasksBatchidCancelOK() *PostTasksBatchidCancelOK {
	return &PostTasksBatchidCancelOK{}
}

/*PostTasksBatchidCancelOK handles this case with default header values.

Successful
*/
type PostTasksBatchidCancelOK struct {
	Payload *models.Status
}

func (o *PostTasksBatchidCancelOK) Error() string {
	return fmt.Sprintf("[POST /tasks/{batchId}/cancel][%d] postTasksBatchidCancelOK  %+v", 200, o.Payload)
}

func (o *PostTasksBatchidCancelOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *PostTasksBatchidCancelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTasksBatchidCancelBadRequest creates a PostTasksBatchidCancelBadRequest with default headers values
func NewPostTasksBatchidCancelBadRequest() *PostTasksBatchidCancelBadRequest {
	return &PostTasksBatchidCancelBadRequest{}
}

/*PostTasksBatchidCancelBadRequest handles this case with default header values.

Bad Request
*/
type PostTasksBatchidCancelBadRequest struct {
	Payload *models.Error
}

func (o *PostTasksBatchidCancelBadRequest) Error() string {
	return fmt.Sprintf("[POST /tasks/{batchId}/cancel][%d] postTasksBatchidCancelBadRequest  %+v", 400, o.Payload)
}

func (o *PostTasksBatchidCancelBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostTasksBatchidCancelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTasksBatchidCancelUnauthorized creates a PostTasksBatchidCancelUnauthorized with default headers values
func NewPostTasksBatchidCancelUnauthorized() *PostTasksBatchidCancelUnauthorized {
	return &PostTasksBatchidCancelUnauthorized{}
}

/*PostTasksBatchidCancelUnauthorized handles this case with default header values.

Unauthorized
*/
type PostTasksBatchidCancelUnauthorized struct {
	Payload *models.Error
}

func (o *PostTasksBatchidCancelUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tasks/{batchId}/cancel][%d] postTasksBatchidCancelUnauthorized  %+v", 401, o.Payload)
}

func (o *PostTasksBatchidCancelUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostTasksBatchidCancelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTasksBatchidCancelForbidden creates a PostTasksBatchidCancelForbidden with default headers values
func NewPostTasksBatchidCancelForbidden() *PostTasksBatchidCancelForbidden {
	return &PostTasksBatchidCancelForbidden{}
}

/*PostTasksBatchidCancelForbidden handles this case with default header values.

Forbidden
*/
type PostTasksBatchidCancelForbidden struct {
	Payload *models.Error
}

func (o *PostTasksBatchidCancelForbidden) Error() string {
	return fmt.Sprintf("[POST /tasks/{batchId}/cancel][%d] postTasksBatchidCancelForbidden  %+v", 403, o.Payload)
}

func (o *PostTasksBatchidCancelForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostTasksBatchidCancelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTasksBatchidCancelNotFound creates a PostTasksBatchidCancelNotFound with default headers values
func NewPostTasksBatchidCancelNotFound() *PostTasksBatchidCancelNotFound {
	return &PostTasksBatchidCancelNotFound{}
}

/*PostTasksBatchidCancelNotFound handles this case with default header values.

Not Found
*/
type PostTasksBatchidCancelNotFound struct {
	Payload *models.Error
}

func (o *PostTasksBatchidCancelNotFound) Error() string {
	return fmt.Sprintf("[POST /tasks/{batchId}/cancel][%d] postTasksBatchidCancelNotFound  %+v", 404, o.Payload)
}

func (o *PostTasksBatchidCancelNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostTasksBatchidCancelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTasksBatchidCancelInternalServerError creates a PostTasksBatchidCancelInternalServerError with default headers values
func NewPostTasksBatchidCancelInternalServerError() *PostTasksBatchidCancelInternalServerError {
	return &PostTasksBatchidCancelInternalServerError{}
}

/*PostTasksBatchidCancelInternalServerError handles this case with default header values.

Internal Server Error
*/
type PostTasksBatchidCancelInternalServerError struct {
	Payload *models.Error
}

func (o *PostTasksBatchidCancelInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tasks/{batchId}/cancel][%d] postTasksBatchidCancelInternalServerError  %+v", 500, o.Payload)
}

func (o *PostTasksBatchidCancelInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostTasksBatchidCancelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
