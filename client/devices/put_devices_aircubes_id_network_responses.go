// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PutDevicesAircubesIDNetworkReader is a Reader for the PutDevicesAircubesIDNetwork structure.
type PutDevicesAircubesIDNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDevicesAircubesIDNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDevicesAircubesIDNetworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDevicesAircubesIDNetworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDevicesAircubesIDNetworkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDevicesAircubesIDNetworkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDevicesAircubesIDNetworkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDevicesAircubesIDNetworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutDevicesAircubesIDNetworkOK creates a PutDevicesAircubesIDNetworkOK with default headers values
func NewPutDevicesAircubesIDNetworkOK() *PutDevicesAircubesIDNetworkOK {
	return &PutDevicesAircubesIDNetworkOK{}
}

/*PutDevicesAircubesIDNetworkOK handles this case with default header values.

Successful
*/
type PutDevicesAircubesIDNetworkOK struct {
	Payload *models.Status
}

func (o *PutDevicesAircubesIDNetworkOK) Error() string {
	return fmt.Sprintf("[PUT /devices/aircubes/{id}/network][%d] putDevicesAircubesIdNetworkOK  %+v", 200, o.Payload)
}

func (o *PutDevicesAircubesIDNetworkOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *PutDevicesAircubesIDNetworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesAircubesIDNetworkBadRequest creates a PutDevicesAircubesIDNetworkBadRequest with default headers values
func NewPutDevicesAircubesIDNetworkBadRequest() *PutDevicesAircubesIDNetworkBadRequest {
	return &PutDevicesAircubesIDNetworkBadRequest{}
}

/*PutDevicesAircubesIDNetworkBadRequest handles this case with default header values.

Bad Request
*/
type PutDevicesAircubesIDNetworkBadRequest struct {
	Payload *models.Error
}

func (o *PutDevicesAircubesIDNetworkBadRequest) Error() string {
	return fmt.Sprintf("[PUT /devices/aircubes/{id}/network][%d] putDevicesAircubesIdNetworkBadRequest  %+v", 400, o.Payload)
}

func (o *PutDevicesAircubesIDNetworkBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesAircubesIDNetworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesAircubesIDNetworkUnauthorized creates a PutDevicesAircubesIDNetworkUnauthorized with default headers values
func NewPutDevicesAircubesIDNetworkUnauthorized() *PutDevicesAircubesIDNetworkUnauthorized {
	return &PutDevicesAircubesIDNetworkUnauthorized{}
}

/*PutDevicesAircubesIDNetworkUnauthorized handles this case with default header values.

Unauthorized
*/
type PutDevicesAircubesIDNetworkUnauthorized struct {
	Payload *models.Error
}

func (o *PutDevicesAircubesIDNetworkUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /devices/aircubes/{id}/network][%d] putDevicesAircubesIdNetworkUnauthorized  %+v", 401, o.Payload)
}

func (o *PutDevicesAircubesIDNetworkUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesAircubesIDNetworkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesAircubesIDNetworkForbidden creates a PutDevicesAircubesIDNetworkForbidden with default headers values
func NewPutDevicesAircubesIDNetworkForbidden() *PutDevicesAircubesIDNetworkForbidden {
	return &PutDevicesAircubesIDNetworkForbidden{}
}

/*PutDevicesAircubesIDNetworkForbidden handles this case with default header values.

Forbidden
*/
type PutDevicesAircubesIDNetworkForbidden struct {
	Payload *models.Error
}

func (o *PutDevicesAircubesIDNetworkForbidden) Error() string {
	return fmt.Sprintf("[PUT /devices/aircubes/{id}/network][%d] putDevicesAircubesIdNetworkForbidden  %+v", 403, o.Payload)
}

func (o *PutDevicesAircubesIDNetworkForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesAircubesIDNetworkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesAircubesIDNetworkNotFound creates a PutDevicesAircubesIDNetworkNotFound with default headers values
func NewPutDevicesAircubesIDNetworkNotFound() *PutDevicesAircubesIDNetworkNotFound {
	return &PutDevicesAircubesIDNetworkNotFound{}
}

/*PutDevicesAircubesIDNetworkNotFound handles this case with default header values.

Not Found
*/
type PutDevicesAircubesIDNetworkNotFound struct {
	Payload *models.Error
}

func (o *PutDevicesAircubesIDNetworkNotFound) Error() string {
	return fmt.Sprintf("[PUT /devices/aircubes/{id}/network][%d] putDevicesAircubesIdNetworkNotFound  %+v", 404, o.Payload)
}

func (o *PutDevicesAircubesIDNetworkNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesAircubesIDNetworkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesAircubesIDNetworkInternalServerError creates a PutDevicesAircubesIDNetworkInternalServerError with default headers values
func NewPutDevicesAircubesIDNetworkInternalServerError() *PutDevicesAircubesIDNetworkInternalServerError {
	return &PutDevicesAircubesIDNetworkInternalServerError{}
}

/*PutDevicesAircubesIDNetworkInternalServerError handles this case with default header values.

Internal Server Error
*/
type PutDevicesAircubesIDNetworkInternalServerError struct {
	Payload *models.Error
}

func (o *PutDevicesAircubesIDNetworkInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /devices/aircubes/{id}/network][%d] putDevicesAircubesIdNetworkInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDevicesAircubesIDNetworkInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesAircubesIDNetworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
