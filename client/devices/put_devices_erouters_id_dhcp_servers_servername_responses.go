// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PutDevicesEroutersIDDhcpServersServernameReader is a Reader for the PutDevicesEroutersIDDhcpServersServername structure.
type PutDevicesEroutersIDDhcpServersServernameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDevicesEroutersIDDhcpServersServernameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDevicesEroutersIDDhcpServersServernameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDevicesEroutersIDDhcpServersServernameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDevicesEroutersIDDhcpServersServernameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDevicesEroutersIDDhcpServersServernameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDevicesEroutersIDDhcpServersServernameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDevicesEroutersIDDhcpServersServernameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutDevicesEroutersIDDhcpServersServernameOK creates a PutDevicesEroutersIDDhcpServersServernameOK with default headers values
func NewPutDevicesEroutersIDDhcpServersServernameOK() *PutDevicesEroutersIDDhcpServersServernameOK {
	return &PutDevicesEroutersIDDhcpServersServernameOK{}
}

/*PutDevicesEroutersIDDhcpServersServernameOK handles this case with default header values.

Successful
*/
type PutDevicesEroutersIDDhcpServersServernameOK struct {
	Payload models.DHCPServerList
}

func (o *PutDevicesEroutersIDDhcpServersServernameOK) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/servers/{serverName}][%d] putDevicesEroutersIdDhcpServersServernameOK  %+v", 200, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpServersServernameOK) GetPayload() models.DHCPServerList {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpServersServernameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpServersServernameBadRequest creates a PutDevicesEroutersIDDhcpServersServernameBadRequest with default headers values
func NewPutDevicesEroutersIDDhcpServersServernameBadRequest() *PutDevicesEroutersIDDhcpServersServernameBadRequest {
	return &PutDevicesEroutersIDDhcpServersServernameBadRequest{}
}

/*PutDevicesEroutersIDDhcpServersServernameBadRequest handles this case with default header values.

Bad Request
*/
type PutDevicesEroutersIDDhcpServersServernameBadRequest struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpServersServernameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/servers/{serverName}][%d] putDevicesEroutersIdDhcpServersServernameBadRequest  %+v", 400, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpServersServernameBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpServersServernameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpServersServernameUnauthorized creates a PutDevicesEroutersIDDhcpServersServernameUnauthorized with default headers values
func NewPutDevicesEroutersIDDhcpServersServernameUnauthorized() *PutDevicesEroutersIDDhcpServersServernameUnauthorized {
	return &PutDevicesEroutersIDDhcpServersServernameUnauthorized{}
}

/*PutDevicesEroutersIDDhcpServersServernameUnauthorized handles this case with default header values.

Unauthorized
*/
type PutDevicesEroutersIDDhcpServersServernameUnauthorized struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpServersServernameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/servers/{serverName}][%d] putDevicesEroutersIdDhcpServersServernameUnauthorized  %+v", 401, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpServersServernameUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpServersServernameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpServersServernameForbidden creates a PutDevicesEroutersIDDhcpServersServernameForbidden with default headers values
func NewPutDevicesEroutersIDDhcpServersServernameForbidden() *PutDevicesEroutersIDDhcpServersServernameForbidden {
	return &PutDevicesEroutersIDDhcpServersServernameForbidden{}
}

/*PutDevicesEroutersIDDhcpServersServernameForbidden handles this case with default header values.

Forbidden
*/
type PutDevicesEroutersIDDhcpServersServernameForbidden struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpServersServernameForbidden) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/servers/{serverName}][%d] putDevicesEroutersIdDhcpServersServernameForbidden  %+v", 403, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpServersServernameForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpServersServernameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpServersServernameNotFound creates a PutDevicesEroutersIDDhcpServersServernameNotFound with default headers values
func NewPutDevicesEroutersIDDhcpServersServernameNotFound() *PutDevicesEroutersIDDhcpServersServernameNotFound {
	return &PutDevicesEroutersIDDhcpServersServernameNotFound{}
}

/*PutDevicesEroutersIDDhcpServersServernameNotFound handles this case with default header values.

Not Found
*/
type PutDevicesEroutersIDDhcpServersServernameNotFound struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpServersServernameNotFound) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/servers/{serverName}][%d] putDevicesEroutersIdDhcpServersServernameNotFound  %+v", 404, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpServersServernameNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpServersServernameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpServersServernameInternalServerError creates a PutDevicesEroutersIDDhcpServersServernameInternalServerError with default headers values
func NewPutDevicesEroutersIDDhcpServersServernameInternalServerError() *PutDevicesEroutersIDDhcpServersServernameInternalServerError {
	return &PutDevicesEroutersIDDhcpServersServernameInternalServerError{}
}

/*PutDevicesEroutersIDDhcpServersServernameInternalServerError handles this case with default header values.

Internal Server Error
*/
type PutDevicesEroutersIDDhcpServersServernameInternalServerError struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpServersServernameInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/servers/{serverName}][%d] putDevicesEroutersIdDhcpServersServernameInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpServersServernameInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpServersServernameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
