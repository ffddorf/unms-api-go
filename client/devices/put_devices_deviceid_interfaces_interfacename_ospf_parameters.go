// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// NewPutDevicesDeviceidInterfacesInterfacenameOspfParams creates a new PutDevicesDeviceidInterfacesInterfacenameOspfParams object
// with the default values initialized.
func NewPutDevicesDeviceidInterfacesInterfacenameOspfParams() *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	var ()
	return &PutDevicesDeviceidInterfacesInterfacenameOspfParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDevicesDeviceidInterfacesInterfacenameOspfParamsWithTimeout creates a new PutDevicesDeviceidInterfacesInterfacenameOspfParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDevicesDeviceidInterfacesInterfacenameOspfParamsWithTimeout(timeout time.Duration) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	var ()
	return &PutDevicesDeviceidInterfacesInterfacenameOspfParams{

		timeout: timeout,
	}
}

// NewPutDevicesDeviceidInterfacesInterfacenameOspfParamsWithContext creates a new PutDevicesDeviceidInterfacesInterfacenameOspfParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutDevicesDeviceidInterfacesInterfacenameOspfParamsWithContext(ctx context.Context) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	var ()
	return &PutDevicesDeviceidInterfacesInterfacenameOspfParams{

		Context: ctx,
	}
}

// NewPutDevicesDeviceidInterfacesInterfacenameOspfParamsWithHTTPClient creates a new PutDevicesDeviceidInterfacesInterfacenameOspfParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutDevicesDeviceidInterfacesInterfacenameOspfParamsWithHTTPClient(client *http.Client) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	var ()
	return &PutDevicesDeviceidInterfacesInterfacenameOspfParams{
		HTTPClient: client,
	}
}

/*PutDevicesDeviceidInterfacesInterfacenameOspfParams contains all the parameters to send to the API endpoint
for the put devices deviceid interfaces interfacename ospf operation typically these are written to a http.Request
*/
type PutDevicesDeviceidInterfacesInterfacenameOspfParams struct {

	/*Body*/
	Body *models.Model69
	/*DeviceID*/
	DeviceID string
	/*InterfaceName*/
	InterfaceName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) WithTimeout(timeout time.Duration) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) WithContext(ctx context.Context) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) WithHTTPClient(client *http.Client) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) WithBody(body *models.Model69) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) SetBody(body *models.Model69) {
	o.Body = body
}

// WithDeviceID adds the deviceID to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) WithDeviceID(deviceID string) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithInterfaceName adds the interfaceName to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) WithInterfaceName(interfaceName string) *PutDevicesDeviceidInterfacesInterfacenameOspfParams {
	o.SetInterfaceName(interfaceName)
	return o
}

// SetInterfaceName adds the interfaceName to the put devices deviceid interfaces interfacename ospf params
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) SetInterfaceName(interfaceName string) {
	o.InterfaceName = interfaceName
}

// WriteToRequest writes these params to a swagger request
func (o *PutDevicesDeviceidInterfacesInterfacenameOspfParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param deviceId
	if err := r.SetPathParam("deviceId", o.DeviceID); err != nil {
		return err
	}

	// path param interfaceName
	if err := r.SetPathParam("interfaceName", o.InterfaceName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
