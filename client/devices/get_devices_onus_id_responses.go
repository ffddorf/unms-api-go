// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// GetDevicesOnusIDReader is a Reader for the GetDevicesOnusID structure.
type GetDevicesOnusIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDevicesOnusIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDevicesOnusIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDevicesOnusIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDevicesOnusIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDevicesOnusIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDevicesOnusIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDevicesOnusIDOK creates a GetDevicesOnusIDOK with default headers values
func NewGetDevicesOnusIDOK() *GetDevicesOnusIDOK {
	return &GetDevicesOnusIDOK{}
}

/*GetDevicesOnusIDOK handles this case with default header values.

Successful
*/
type GetDevicesOnusIDOK struct {
	Payload *models.Onu
}

func (o *GetDevicesOnusIDOK) Error() string {
	return fmt.Sprintf("[GET /devices/onus/{id}][%d] getDevicesOnusIdOK  %+v", 200, o.Payload)
}

func (o *GetDevicesOnusIDOK) GetPayload() *models.Onu {
	return o.Payload
}

func (o *GetDevicesOnusIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Onu)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesOnusIDBadRequest creates a GetDevicesOnusIDBadRequest with default headers values
func NewGetDevicesOnusIDBadRequest() *GetDevicesOnusIDBadRequest {
	return &GetDevicesOnusIDBadRequest{}
}

/*GetDevicesOnusIDBadRequest handles this case with default header values.

Bad Request
*/
type GetDevicesOnusIDBadRequest struct {
	Payload *models.Error
}

func (o *GetDevicesOnusIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /devices/onus/{id}][%d] getDevicesOnusIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetDevicesOnusIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesOnusIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesOnusIDUnauthorized creates a GetDevicesOnusIDUnauthorized with default headers values
func NewGetDevicesOnusIDUnauthorized() *GetDevicesOnusIDUnauthorized {
	return &GetDevicesOnusIDUnauthorized{}
}

/*GetDevicesOnusIDUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDevicesOnusIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetDevicesOnusIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/onus/{id}][%d] getDevicesOnusIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDevicesOnusIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesOnusIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesOnusIDForbidden creates a GetDevicesOnusIDForbidden with default headers values
func NewGetDevicesOnusIDForbidden() *GetDevicesOnusIDForbidden {
	return &GetDevicesOnusIDForbidden{}
}

/*GetDevicesOnusIDForbidden handles this case with default header values.

Forbidden
*/
type GetDevicesOnusIDForbidden struct {
	Payload *models.Error
}

func (o *GetDevicesOnusIDForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/onus/{id}][%d] getDevicesOnusIdForbidden  %+v", 403, o.Payload)
}

func (o *GetDevicesOnusIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesOnusIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesOnusIDInternalServerError creates a GetDevicesOnusIDInternalServerError with default headers values
func NewGetDevicesOnusIDInternalServerError() *GetDevicesOnusIDInternalServerError {
	return &GetDevicesOnusIDInternalServerError{}
}

/*GetDevicesOnusIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetDevicesOnusIDInternalServerError struct {
	Payload *models.Error
}

func (o *GetDevicesOnusIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /devices/onus/{id}][%d] getDevicesOnusIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDevicesOnusIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesOnusIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
