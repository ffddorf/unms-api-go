// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PutDevicesEroutersIDDhcpLeasesServernameLeaseidReader is a Reader for the PutDevicesEroutersIDDhcpLeasesServernameLeaseid structure.
type PutDevicesEroutersIDDhcpLeasesServernameLeaseidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidOK creates a PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK with default headers values
func NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidOK() *PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK {
	return &PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK{}
}

/*PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK handles this case with default header values.

Successful
*/
type PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK struct {
	Payload *models.DHCPLease
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesEroutersIdDhcpLeasesServernameLeaseidOK  %+v", 200, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK) GetPayload() *models.DHCPLease {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DHCPLease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest creates a PutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest with default headers values
func NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest() *PutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest {
	return &PutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest{}
}

/*PutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest handles this case with default header values.

Bad Request
*/
type PutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesEroutersIdDhcpLeasesServernameLeaseidBadRequest  %+v", 400, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized creates a PutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized with default headers values
func NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized() *PutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized {
	return &PutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized{}
}

/*PutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized handles this case with default header values.

Unauthorized
*/
type PutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesEroutersIdDhcpLeasesServernameLeaseidUnauthorized  %+v", 401, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden creates a PutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden with default headers values
func NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden() *PutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden {
	return &PutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden{}
}

/*PutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden handles this case with default header values.

Forbidden
*/
type PutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesEroutersIdDhcpLeasesServernameLeaseidForbidden  %+v", 403, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound creates a PutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound with default headers values
func NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound() *PutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound {
	return &PutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound{}
}

/*PutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound handles this case with default header values.

Not Found
*/
type PutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesEroutersIdDhcpLeasesServernameLeaseidNotFound  %+v", 404, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError creates a PutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError with default headers values
func NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError() *PutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError {
	return &PutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError{}
}

/*PutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError handles this case with default header values.

Internal Server Error
*/
type PutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError struct {
	Payload *models.Error
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /devices/erouters/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesEroutersIdDhcpLeasesServernameLeaseidInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesEroutersIDDhcpLeasesServernameLeaseidInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
