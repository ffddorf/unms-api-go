// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PutDevicesDeviceidInterfacesInterfacenameReader is a Reader for the PutDevicesDeviceidInterfacesInterfacename structure.
type PutDevicesDeviceidInterfacesInterfacenameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDevicesDeviceidInterfacesInterfacenameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDevicesDeviceidInterfacesInterfacenameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDevicesDeviceidInterfacesInterfacenameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDevicesDeviceidInterfacesInterfacenameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDevicesDeviceidInterfacesInterfacenameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDevicesDeviceidInterfacesInterfacenameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDevicesDeviceidInterfacesInterfacenameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutDevicesDeviceidInterfacesInterfacenameOK creates a PutDevicesDeviceidInterfacesInterfacenameOK with default headers values
func NewPutDevicesDeviceidInterfacesInterfacenameOK() *PutDevicesDeviceidInterfacesInterfacenameOK {
	return &PutDevicesDeviceidInterfacesInterfacenameOK{}
}

/*PutDevicesDeviceidInterfacesInterfacenameOK handles this case with default header values.

Successful
*/
type PutDevicesDeviceidInterfacesInterfacenameOK struct {
	Payload *models.DeviceInterfaceSchema
}

func (o *PutDevicesDeviceidInterfacesInterfacenameOK) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/interfaces/{interfaceName}][%d] putDevicesDeviceidInterfacesInterfacenameOK  %+v", 200, o.Payload)
}

func (o *PutDevicesDeviceidInterfacesInterfacenameOK) GetPayload() *models.DeviceInterfaceSchema {
	return o.Payload
}

func (o *PutDevicesDeviceidInterfacesInterfacenameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceInterfaceSchema)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidInterfacesInterfacenameBadRequest creates a PutDevicesDeviceidInterfacesInterfacenameBadRequest with default headers values
func NewPutDevicesDeviceidInterfacesInterfacenameBadRequest() *PutDevicesDeviceidInterfacesInterfacenameBadRequest {
	return &PutDevicesDeviceidInterfacesInterfacenameBadRequest{}
}

/*PutDevicesDeviceidInterfacesInterfacenameBadRequest handles this case with default header values.

Bad Request
*/
type PutDevicesDeviceidInterfacesInterfacenameBadRequest struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidInterfacesInterfacenameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/interfaces/{interfaceName}][%d] putDevicesDeviceidInterfacesInterfacenameBadRequest  %+v", 400, o.Payload)
}

func (o *PutDevicesDeviceidInterfacesInterfacenameBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidInterfacesInterfacenameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidInterfacesInterfacenameUnauthorized creates a PutDevicesDeviceidInterfacesInterfacenameUnauthorized with default headers values
func NewPutDevicesDeviceidInterfacesInterfacenameUnauthorized() *PutDevicesDeviceidInterfacesInterfacenameUnauthorized {
	return &PutDevicesDeviceidInterfacesInterfacenameUnauthorized{}
}

/*PutDevicesDeviceidInterfacesInterfacenameUnauthorized handles this case with default header values.

Unauthorized
*/
type PutDevicesDeviceidInterfacesInterfacenameUnauthorized struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidInterfacesInterfacenameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/interfaces/{interfaceName}][%d] putDevicesDeviceidInterfacesInterfacenameUnauthorized  %+v", 401, o.Payload)
}

func (o *PutDevicesDeviceidInterfacesInterfacenameUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidInterfacesInterfacenameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidInterfacesInterfacenameForbidden creates a PutDevicesDeviceidInterfacesInterfacenameForbidden with default headers values
func NewPutDevicesDeviceidInterfacesInterfacenameForbidden() *PutDevicesDeviceidInterfacesInterfacenameForbidden {
	return &PutDevicesDeviceidInterfacesInterfacenameForbidden{}
}

/*PutDevicesDeviceidInterfacesInterfacenameForbidden handles this case with default header values.

Forbidden
*/
type PutDevicesDeviceidInterfacesInterfacenameForbidden struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidInterfacesInterfacenameForbidden) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/interfaces/{interfaceName}][%d] putDevicesDeviceidInterfacesInterfacenameForbidden  %+v", 403, o.Payload)
}

func (o *PutDevicesDeviceidInterfacesInterfacenameForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidInterfacesInterfacenameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidInterfacesInterfacenameNotFound creates a PutDevicesDeviceidInterfacesInterfacenameNotFound with default headers values
func NewPutDevicesDeviceidInterfacesInterfacenameNotFound() *PutDevicesDeviceidInterfacesInterfacenameNotFound {
	return &PutDevicesDeviceidInterfacesInterfacenameNotFound{}
}

/*PutDevicesDeviceidInterfacesInterfacenameNotFound handles this case with default header values.

Not Found
*/
type PutDevicesDeviceidInterfacesInterfacenameNotFound struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidInterfacesInterfacenameNotFound) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/interfaces/{interfaceName}][%d] putDevicesDeviceidInterfacesInterfacenameNotFound  %+v", 404, o.Payload)
}

func (o *PutDevicesDeviceidInterfacesInterfacenameNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidInterfacesInterfacenameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidInterfacesInterfacenameInternalServerError creates a PutDevicesDeviceidInterfacesInterfacenameInternalServerError with default headers values
func NewPutDevicesDeviceidInterfacesInterfacenameInternalServerError() *PutDevicesDeviceidInterfacesInterfacenameInternalServerError {
	return &PutDevicesDeviceidInterfacesInterfacenameInternalServerError{}
}

/*PutDevicesDeviceidInterfacesInterfacenameInternalServerError handles this case with default header values.

Internal Server Error
*/
type PutDevicesDeviceidInterfacesInterfacenameInternalServerError struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidInterfacesInterfacenameInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/interfaces/{interfaceName}][%d] putDevicesDeviceidInterfacesInterfacenameInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDevicesDeviceidInterfacesInterfacenameInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidInterfacesInterfacenameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
