// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// GetDevicesEswitchesIDSystemReader is a Reader for the GetDevicesEswitchesIDSystem structure.
type GetDevicesEswitchesIDSystemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDevicesEswitchesIDSystemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDevicesEswitchesIDSystemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDevicesEswitchesIDSystemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDevicesEswitchesIDSystemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDevicesEswitchesIDSystemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDevicesEswitchesIDSystemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDevicesEswitchesIDSystemInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDevicesEswitchesIDSystemOK creates a GetDevicesEswitchesIDSystemOK with default headers values
func NewGetDevicesEswitchesIDSystemOK() *GetDevicesEswitchesIDSystemOK {
	return &GetDevicesEswitchesIDSystemOK{}
}

/*GetDevicesEswitchesIDSystemOK handles this case with default header values.

Successful
*/
type GetDevicesEswitchesIDSystemOK struct {
	Payload *models.Model23
}

func (o *GetDevicesEswitchesIDSystemOK) Error() string {
	return fmt.Sprintf("[GET /devices/eswitches/{id}/system][%d] getDevicesEswitchesIdSystemOK  %+v", 200, o.Payload)
}

func (o *GetDevicesEswitchesIDSystemOK) GetPayload() *models.Model23 {
	return o.Payload
}

func (o *GetDevicesEswitchesIDSystemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Model23)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEswitchesIDSystemBadRequest creates a GetDevicesEswitchesIDSystemBadRequest with default headers values
func NewGetDevicesEswitchesIDSystemBadRequest() *GetDevicesEswitchesIDSystemBadRequest {
	return &GetDevicesEswitchesIDSystemBadRequest{}
}

/*GetDevicesEswitchesIDSystemBadRequest handles this case with default header values.

Bad Request
*/
type GetDevicesEswitchesIDSystemBadRequest struct {
	Payload *models.Error
}

func (o *GetDevicesEswitchesIDSystemBadRequest) Error() string {
	return fmt.Sprintf("[GET /devices/eswitches/{id}/system][%d] getDevicesEswitchesIdSystemBadRequest  %+v", 400, o.Payload)
}

func (o *GetDevicesEswitchesIDSystemBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEswitchesIDSystemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEswitchesIDSystemUnauthorized creates a GetDevicesEswitchesIDSystemUnauthorized with default headers values
func NewGetDevicesEswitchesIDSystemUnauthorized() *GetDevicesEswitchesIDSystemUnauthorized {
	return &GetDevicesEswitchesIDSystemUnauthorized{}
}

/*GetDevicesEswitchesIDSystemUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDevicesEswitchesIDSystemUnauthorized struct {
	Payload *models.Error
}

func (o *GetDevicesEswitchesIDSystemUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/eswitches/{id}/system][%d] getDevicesEswitchesIdSystemUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDevicesEswitchesIDSystemUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEswitchesIDSystemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEswitchesIDSystemForbidden creates a GetDevicesEswitchesIDSystemForbidden with default headers values
func NewGetDevicesEswitchesIDSystemForbidden() *GetDevicesEswitchesIDSystemForbidden {
	return &GetDevicesEswitchesIDSystemForbidden{}
}

/*GetDevicesEswitchesIDSystemForbidden handles this case with default header values.

Forbidden
*/
type GetDevicesEswitchesIDSystemForbidden struct {
	Payload *models.Error
}

func (o *GetDevicesEswitchesIDSystemForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/eswitches/{id}/system][%d] getDevicesEswitchesIdSystemForbidden  %+v", 403, o.Payload)
}

func (o *GetDevicesEswitchesIDSystemForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEswitchesIDSystemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEswitchesIDSystemNotFound creates a GetDevicesEswitchesIDSystemNotFound with default headers values
func NewGetDevicesEswitchesIDSystemNotFound() *GetDevicesEswitchesIDSystemNotFound {
	return &GetDevicesEswitchesIDSystemNotFound{}
}

/*GetDevicesEswitchesIDSystemNotFound handles this case with default header values.

Not Found
*/
type GetDevicesEswitchesIDSystemNotFound struct {
	Payload *models.Error
}

func (o *GetDevicesEswitchesIDSystemNotFound) Error() string {
	return fmt.Sprintf("[GET /devices/eswitches/{id}/system][%d] getDevicesEswitchesIdSystemNotFound  %+v", 404, o.Payload)
}

func (o *GetDevicesEswitchesIDSystemNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEswitchesIDSystemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEswitchesIDSystemInternalServerError creates a GetDevicesEswitchesIDSystemInternalServerError with default headers values
func NewGetDevicesEswitchesIDSystemInternalServerError() *GetDevicesEswitchesIDSystemInternalServerError {
	return &GetDevicesEswitchesIDSystemInternalServerError{}
}

/*GetDevicesEswitchesIDSystemInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetDevicesEswitchesIDSystemInternalServerError struct {
	Payload *models.Error
}

func (o *GetDevicesEswitchesIDSystemInternalServerError) Error() string {
	return fmt.Sprintf("[GET /devices/eswitches/{id}/system][%d] getDevicesEswitchesIdSystemInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDevicesEswitchesIDSystemInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEswitchesIDSystemInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
