// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// GetDevicesEroutersIDDhcpLeasesReader is a Reader for the GetDevicesEroutersIDDhcpLeases structure.
type GetDevicesEroutersIDDhcpLeasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDevicesEroutersIDDhcpLeasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDevicesEroutersIDDhcpLeasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDevicesEroutersIDDhcpLeasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDevicesEroutersIDDhcpLeasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDevicesEroutersIDDhcpLeasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDevicesEroutersIDDhcpLeasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDevicesEroutersIDDhcpLeasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDevicesEroutersIDDhcpLeasesOK creates a GetDevicesEroutersIDDhcpLeasesOK with default headers values
func NewGetDevicesEroutersIDDhcpLeasesOK() *GetDevicesEroutersIDDhcpLeasesOK {
	return &GetDevicesEroutersIDDhcpLeasesOK{}
}

/*GetDevicesEroutersIDDhcpLeasesOK handles this case with default header values.

Successful
*/
type GetDevicesEroutersIDDhcpLeasesOK struct {
	Payload *models.DHCPLease
}

func (o *GetDevicesEroutersIDDhcpLeasesOK) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/leases][%d] getDevicesEroutersIdDhcpLeasesOK  %+v", 200, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpLeasesOK) GetPayload() *models.DHCPLease {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpLeasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DHCPLease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpLeasesBadRequest creates a GetDevicesEroutersIDDhcpLeasesBadRequest with default headers values
func NewGetDevicesEroutersIDDhcpLeasesBadRequest() *GetDevicesEroutersIDDhcpLeasesBadRequest {
	return &GetDevicesEroutersIDDhcpLeasesBadRequest{}
}

/*GetDevicesEroutersIDDhcpLeasesBadRequest handles this case with default header values.

Bad Request
*/
type GetDevicesEroutersIDDhcpLeasesBadRequest struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpLeasesBadRequest) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/leases][%d] getDevicesEroutersIdDhcpLeasesBadRequest  %+v", 400, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpLeasesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpLeasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpLeasesUnauthorized creates a GetDevicesEroutersIDDhcpLeasesUnauthorized with default headers values
func NewGetDevicesEroutersIDDhcpLeasesUnauthorized() *GetDevicesEroutersIDDhcpLeasesUnauthorized {
	return &GetDevicesEroutersIDDhcpLeasesUnauthorized{}
}

/*GetDevicesEroutersIDDhcpLeasesUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDevicesEroutersIDDhcpLeasesUnauthorized struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpLeasesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/leases][%d] getDevicesEroutersIdDhcpLeasesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpLeasesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpLeasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpLeasesForbidden creates a GetDevicesEroutersIDDhcpLeasesForbidden with default headers values
func NewGetDevicesEroutersIDDhcpLeasesForbidden() *GetDevicesEroutersIDDhcpLeasesForbidden {
	return &GetDevicesEroutersIDDhcpLeasesForbidden{}
}

/*GetDevicesEroutersIDDhcpLeasesForbidden handles this case with default header values.

Forbidden
*/
type GetDevicesEroutersIDDhcpLeasesForbidden struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpLeasesForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/leases][%d] getDevicesEroutersIdDhcpLeasesForbidden  %+v", 403, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpLeasesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpLeasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpLeasesNotFound creates a GetDevicesEroutersIDDhcpLeasesNotFound with default headers values
func NewGetDevicesEroutersIDDhcpLeasesNotFound() *GetDevicesEroutersIDDhcpLeasesNotFound {
	return &GetDevicesEroutersIDDhcpLeasesNotFound{}
}

/*GetDevicesEroutersIDDhcpLeasesNotFound handles this case with default header values.

Not Found
*/
type GetDevicesEroutersIDDhcpLeasesNotFound struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpLeasesNotFound) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/leases][%d] getDevicesEroutersIdDhcpLeasesNotFound  %+v", 404, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpLeasesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpLeasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpLeasesInternalServerError creates a GetDevicesEroutersIDDhcpLeasesInternalServerError with default headers values
func NewGetDevicesEroutersIDDhcpLeasesInternalServerError() *GetDevicesEroutersIDDhcpLeasesInternalServerError {
	return &GetDevicesEroutersIDDhcpLeasesInternalServerError{}
}

/*GetDevicesEroutersIDDhcpLeasesInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetDevicesEroutersIDDhcpLeasesInternalServerError struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpLeasesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/leases][%d] getDevicesEroutersIdDhcpLeasesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpLeasesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpLeasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
