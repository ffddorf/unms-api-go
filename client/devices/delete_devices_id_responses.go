// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// DeleteDevicesIDReader is a Reader for the DeleteDevicesID structure.
type DeleteDevicesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDevicesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDevicesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDevicesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteDevicesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteDevicesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDevicesIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteDevicesIDOK creates a DeleteDevicesIDOK with default headers values
func NewDeleteDevicesIDOK() *DeleteDevicesIDOK {
	return &DeleteDevicesIDOK{}
}

/*DeleteDevicesIDOK handles this case with default header values.

Successful
*/
type DeleteDevicesIDOK struct {
	Payload *models.Status
}

func (o *DeleteDevicesIDOK) Error() string {
	return fmt.Sprintf("[DELETE /devices/{id}][%d] deleteDevicesIdOK  %+v", 200, o.Payload)
}

func (o *DeleteDevicesIDOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *DeleteDevicesIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesIDBadRequest creates a DeleteDevicesIDBadRequest with default headers values
func NewDeleteDevicesIDBadRequest() *DeleteDevicesIDBadRequest {
	return &DeleteDevicesIDBadRequest{}
}

/*DeleteDevicesIDBadRequest handles this case with default header values.

Bad Request
*/
type DeleteDevicesIDBadRequest struct {
	Payload *models.Error
}

func (o *DeleteDevicesIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /devices/{id}][%d] deleteDevicesIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDevicesIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesIDUnauthorized creates a DeleteDevicesIDUnauthorized with default headers values
func NewDeleteDevicesIDUnauthorized() *DeleteDevicesIDUnauthorized {
	return &DeleteDevicesIDUnauthorized{}
}

/*DeleteDevicesIDUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteDevicesIDUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteDevicesIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /devices/{id}][%d] deleteDevicesIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteDevicesIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesIDForbidden creates a DeleteDevicesIDForbidden with default headers values
func NewDeleteDevicesIDForbidden() *DeleteDevicesIDForbidden {
	return &DeleteDevicesIDForbidden{}
}

/*DeleteDevicesIDForbidden handles this case with default header values.

Forbidden
*/
type DeleteDevicesIDForbidden struct {
	Payload *models.Error
}

func (o *DeleteDevicesIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /devices/{id}][%d] deleteDevicesIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteDevicesIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesIDInternalServerError creates a DeleteDevicesIDInternalServerError with default headers values
func NewDeleteDevicesIDInternalServerError() *DeleteDevicesIDInternalServerError {
	return &DeleteDevicesIDInternalServerError{}
}

/*DeleteDevicesIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteDevicesIDInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteDevicesIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /devices/{id}][%d] deleteDevicesIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDevicesIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
