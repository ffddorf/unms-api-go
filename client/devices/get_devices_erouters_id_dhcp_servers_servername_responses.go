// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// GetDevicesEroutersIDDhcpServersServernameReader is a Reader for the GetDevicesEroutersIDDhcpServersServername structure.
type GetDevicesEroutersIDDhcpServersServernameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDevicesEroutersIDDhcpServersServernameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDevicesEroutersIDDhcpServersServernameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDevicesEroutersIDDhcpServersServernameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDevicesEroutersIDDhcpServersServernameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDevicesEroutersIDDhcpServersServernameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDevicesEroutersIDDhcpServersServernameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDevicesEroutersIDDhcpServersServernameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDevicesEroutersIDDhcpServersServernameOK creates a GetDevicesEroutersIDDhcpServersServernameOK with default headers values
func NewGetDevicesEroutersIDDhcpServersServernameOK() *GetDevicesEroutersIDDhcpServersServernameOK {
	return &GetDevicesEroutersIDDhcpServersServernameOK{}
}

/*GetDevicesEroutersIDDhcpServersServernameOK handles this case with default header values.

Successful
*/
type GetDevicesEroutersIDDhcpServersServernameOK struct {
	Payload models.DHCPServerList
}

func (o *GetDevicesEroutersIDDhcpServersServernameOK) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/servers/{serverName}][%d] getDevicesEroutersIdDhcpServersServernameOK  %+v", 200, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpServersServernameOK) GetPayload() models.DHCPServerList {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpServersServernameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpServersServernameBadRequest creates a GetDevicesEroutersIDDhcpServersServernameBadRequest with default headers values
func NewGetDevicesEroutersIDDhcpServersServernameBadRequest() *GetDevicesEroutersIDDhcpServersServernameBadRequest {
	return &GetDevicesEroutersIDDhcpServersServernameBadRequest{}
}

/*GetDevicesEroutersIDDhcpServersServernameBadRequest handles this case with default header values.

Bad Request
*/
type GetDevicesEroutersIDDhcpServersServernameBadRequest struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpServersServernameBadRequest) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/servers/{serverName}][%d] getDevicesEroutersIdDhcpServersServernameBadRequest  %+v", 400, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpServersServernameBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpServersServernameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpServersServernameUnauthorized creates a GetDevicesEroutersIDDhcpServersServernameUnauthorized with default headers values
func NewGetDevicesEroutersIDDhcpServersServernameUnauthorized() *GetDevicesEroutersIDDhcpServersServernameUnauthorized {
	return &GetDevicesEroutersIDDhcpServersServernameUnauthorized{}
}

/*GetDevicesEroutersIDDhcpServersServernameUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDevicesEroutersIDDhcpServersServernameUnauthorized struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpServersServernameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/servers/{serverName}][%d] getDevicesEroutersIdDhcpServersServernameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpServersServernameUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpServersServernameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpServersServernameForbidden creates a GetDevicesEroutersIDDhcpServersServernameForbidden with default headers values
func NewGetDevicesEroutersIDDhcpServersServernameForbidden() *GetDevicesEroutersIDDhcpServersServernameForbidden {
	return &GetDevicesEroutersIDDhcpServersServernameForbidden{}
}

/*GetDevicesEroutersIDDhcpServersServernameForbidden handles this case with default header values.

Forbidden
*/
type GetDevicesEroutersIDDhcpServersServernameForbidden struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpServersServernameForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/servers/{serverName}][%d] getDevicesEroutersIdDhcpServersServernameForbidden  %+v", 403, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpServersServernameForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpServersServernameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpServersServernameNotFound creates a GetDevicesEroutersIDDhcpServersServernameNotFound with default headers values
func NewGetDevicesEroutersIDDhcpServersServernameNotFound() *GetDevicesEroutersIDDhcpServersServernameNotFound {
	return &GetDevicesEroutersIDDhcpServersServernameNotFound{}
}

/*GetDevicesEroutersIDDhcpServersServernameNotFound handles this case with default header values.

Not Found
*/
type GetDevicesEroutersIDDhcpServersServernameNotFound struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpServersServernameNotFound) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/servers/{serverName}][%d] getDevicesEroutersIdDhcpServersServernameNotFound  %+v", 404, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpServersServernameNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpServersServernameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesEroutersIDDhcpServersServernameInternalServerError creates a GetDevicesEroutersIDDhcpServersServernameInternalServerError with default headers values
func NewGetDevicesEroutersIDDhcpServersServernameInternalServerError() *GetDevicesEroutersIDDhcpServersServernameInternalServerError {
	return &GetDevicesEroutersIDDhcpServersServernameInternalServerError{}
}

/*GetDevicesEroutersIDDhcpServersServernameInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetDevicesEroutersIDDhcpServersServernameInternalServerError struct {
	Payload *models.Error
}

func (o *GetDevicesEroutersIDDhcpServersServernameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /devices/erouters/{id}/dhcp/servers/{serverName}][%d] getDevicesEroutersIdDhcpServersServernameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDevicesEroutersIDDhcpServersServernameInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesEroutersIDDhcpServersServernameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
