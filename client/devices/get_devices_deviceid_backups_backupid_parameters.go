// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDevicesDeviceidBackupsBackupidParams creates a new GetDevicesDeviceidBackupsBackupidParams object
// with the default values initialized.
func NewGetDevicesDeviceidBackupsBackupidParams() *GetDevicesDeviceidBackupsBackupidParams {
	var (
		replaceUnmsKeyDefault = bool(false)
	)
	return &GetDevicesDeviceidBackupsBackupidParams{
		ReplaceUnmsKey: &replaceUnmsKeyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDevicesDeviceidBackupsBackupidParamsWithTimeout creates a new GetDevicesDeviceidBackupsBackupidParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDevicesDeviceidBackupsBackupidParamsWithTimeout(timeout time.Duration) *GetDevicesDeviceidBackupsBackupidParams {
	var (
		replaceUnmsKeyDefault = bool(false)
	)
	return &GetDevicesDeviceidBackupsBackupidParams{
		ReplaceUnmsKey: &replaceUnmsKeyDefault,

		timeout: timeout,
	}
}

// NewGetDevicesDeviceidBackupsBackupidParamsWithContext creates a new GetDevicesDeviceidBackupsBackupidParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDevicesDeviceidBackupsBackupidParamsWithContext(ctx context.Context) *GetDevicesDeviceidBackupsBackupidParams {
	var (
		replaceUnmsKeyDefault = bool(false)
	)
	return &GetDevicesDeviceidBackupsBackupidParams{
		ReplaceUnmsKey: &replaceUnmsKeyDefault,

		Context: ctx,
	}
}

// NewGetDevicesDeviceidBackupsBackupidParamsWithHTTPClient creates a new GetDevicesDeviceidBackupsBackupidParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDevicesDeviceidBackupsBackupidParamsWithHTTPClient(client *http.Client) *GetDevicesDeviceidBackupsBackupidParams {
	var (
		replaceUnmsKeyDefault = bool(false)
	)
	return &GetDevicesDeviceidBackupsBackupidParams{
		ReplaceUnmsKey: &replaceUnmsKeyDefault,
		HTTPClient:     client,
	}
}

/*GetDevicesDeviceidBackupsBackupidParams contains all the parameters to send to the API endpoint
for the get devices deviceid backups backupid operation typically these are written to a http.Request
*/
type GetDevicesDeviceidBackupsBackupidParams struct {

	/*BackupID*/
	BackupID string
	/*DeviceID*/
	DeviceID string
	/*ReplaceUnmsKey*/
	ReplaceUnmsKey *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) WithTimeout(timeout time.Duration) *GetDevicesDeviceidBackupsBackupidParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) WithContext(ctx context.Context) *GetDevicesDeviceidBackupsBackupidParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) WithHTTPClient(client *http.Client) *GetDevicesDeviceidBackupsBackupidParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackupID adds the backupID to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) WithBackupID(backupID string) *GetDevicesDeviceidBackupsBackupidParams {
	o.SetBackupID(backupID)
	return o
}

// SetBackupID adds the backupId to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) SetBackupID(backupID string) {
	o.BackupID = backupID
}

// WithDeviceID adds the deviceID to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) WithDeviceID(deviceID string) *GetDevicesDeviceidBackupsBackupidParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithReplaceUnmsKey adds the replaceUnmsKey to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) WithReplaceUnmsKey(replaceUnmsKey *bool) *GetDevicesDeviceidBackupsBackupidParams {
	o.SetReplaceUnmsKey(replaceUnmsKey)
	return o
}

// SetReplaceUnmsKey adds the replaceUnmsKey to the get devices deviceid backups backupid params
func (o *GetDevicesDeviceidBackupsBackupidParams) SetReplaceUnmsKey(replaceUnmsKey *bool) {
	o.ReplaceUnmsKey = replaceUnmsKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetDevicesDeviceidBackupsBackupidParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param backupId
	if err := r.SetPathParam("backupId", o.BackupID); err != nil {
		return err
	}

	// path param deviceId
	if err := r.SetPathParam("deviceId", o.DeviceID); err != nil {
		return err
	}

	if o.ReplaceUnmsKey != nil {

		// query param replaceUnmsKey
		var qrReplaceUnmsKey bool
		if o.ReplaceUnmsKey != nil {
			qrReplaceUnmsKey = *o.ReplaceUnmsKey
		}
		qReplaceUnmsKey := swag.FormatBool(qrReplaceUnmsKey)
		if qReplaceUnmsKey != "" {
			if err := r.SetQueryParam("replaceUnmsKey", qReplaceUnmsKey); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
