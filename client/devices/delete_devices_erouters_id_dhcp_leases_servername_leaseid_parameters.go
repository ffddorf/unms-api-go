// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams creates a new DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams object
// with the default values initialized.
func NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams() *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	var ()
	return &DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParamsWithTimeout creates a new DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParamsWithTimeout(timeout time.Duration) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	var ()
	return &DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams{

		timeout: timeout,
	}
}

// NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParamsWithContext creates a new DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParamsWithContext(ctx context.Context) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	var ()
	return &DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams{

		Context: ctx,
	}
}

// NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParamsWithHTTPClient creates a new DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParamsWithHTTPClient(client *http.Client) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	var ()
	return &DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams{
		HTTPClient: client,
	}
}

/*DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams contains all the parameters to send to the API endpoint
for the delete devices erouters Id dhcp leases servername leaseid operation typically these are written to a http.Request
*/
type DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams struct {

	/*ID*/
	ID string
	/*LeaseID*/
	LeaseID string
	/*ServerName*/
	ServerName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) WithTimeout(timeout time.Duration) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) WithContext(ctx context.Context) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) WithHTTPClient(client *http.Client) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) WithID(id string) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) SetID(id string) {
	o.ID = id
}

// WithLeaseID adds the leaseID to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) WithLeaseID(leaseID string) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	o.SetLeaseID(leaseID)
	return o
}

// SetLeaseID adds the leaseId to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) SetLeaseID(leaseID string) {
	o.LeaseID = leaseID
}

// WithServerName adds the serverName to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) WithServerName(serverName string) *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams {
	o.SetServerName(serverName)
	return o
}

// SetServerName adds the serverName to the delete devices erouters Id dhcp leases servername leaseid params
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) SetServerName(serverName string) {
	o.ServerName = serverName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param leaseId
	if err := r.SetPathParam("leaseId", o.LeaseID); err != nil {
		return err
	}

	// path param serverName
	if err := r.SetPathParam("serverName", o.ServerName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
