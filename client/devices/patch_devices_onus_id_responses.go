// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PatchDevicesOnusIDReader is a Reader for the PatchDevicesOnusID structure.
type PatchDevicesOnusIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDevicesOnusIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDevicesOnusIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchDevicesOnusIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchDevicesOnusIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchDevicesOnusIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchDevicesOnusIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchDevicesOnusIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchDevicesOnusIDOK creates a PatchDevicesOnusIDOK with default headers values
func NewPatchDevicesOnusIDOK() *PatchDevicesOnusIDOK {
	return &PatchDevicesOnusIDOK{}
}

/*PatchDevicesOnusIDOK handles this case with default header values.

Successful
*/
type PatchDevicesOnusIDOK struct {
	Payload *models.Onu
}

func (o *PatchDevicesOnusIDOK) Error() string {
	return fmt.Sprintf("[PATCH /devices/onus/{id}][%d] patchDevicesOnusIdOK  %+v", 200, o.Payload)
}

func (o *PatchDevicesOnusIDOK) GetPayload() *models.Onu {
	return o.Payload
}

func (o *PatchDevicesOnusIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Onu)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDevicesOnusIDBadRequest creates a PatchDevicesOnusIDBadRequest with default headers values
func NewPatchDevicesOnusIDBadRequest() *PatchDevicesOnusIDBadRequest {
	return &PatchDevicesOnusIDBadRequest{}
}

/*PatchDevicesOnusIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchDevicesOnusIDBadRequest struct {
	Payload *models.Error
}

func (o *PatchDevicesOnusIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /devices/onus/{id}][%d] patchDevicesOnusIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchDevicesOnusIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchDevicesOnusIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDevicesOnusIDUnauthorized creates a PatchDevicesOnusIDUnauthorized with default headers values
func NewPatchDevicesOnusIDUnauthorized() *PatchDevicesOnusIDUnauthorized {
	return &PatchDevicesOnusIDUnauthorized{}
}

/*PatchDevicesOnusIDUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchDevicesOnusIDUnauthorized struct {
	Payload *models.Error
}

func (o *PatchDevicesOnusIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /devices/onus/{id}][%d] patchDevicesOnusIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchDevicesOnusIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchDevicesOnusIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDevicesOnusIDForbidden creates a PatchDevicesOnusIDForbidden with default headers values
func NewPatchDevicesOnusIDForbidden() *PatchDevicesOnusIDForbidden {
	return &PatchDevicesOnusIDForbidden{}
}

/*PatchDevicesOnusIDForbidden handles this case with default header values.

Forbidden
*/
type PatchDevicesOnusIDForbidden struct {
	Payload *models.Error
}

func (o *PatchDevicesOnusIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /devices/onus/{id}][%d] patchDevicesOnusIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchDevicesOnusIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchDevicesOnusIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDevicesOnusIDNotFound creates a PatchDevicesOnusIDNotFound with default headers values
func NewPatchDevicesOnusIDNotFound() *PatchDevicesOnusIDNotFound {
	return &PatchDevicesOnusIDNotFound{}
}

/*PatchDevicesOnusIDNotFound handles this case with default header values.

Not Found
*/
type PatchDevicesOnusIDNotFound struct {
	Payload *models.Error
}

func (o *PatchDevicesOnusIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /devices/onus/{id}][%d] patchDevicesOnusIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchDevicesOnusIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchDevicesOnusIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDevicesOnusIDInternalServerError creates a PatchDevicesOnusIDInternalServerError with default headers values
func NewPatchDevicesOnusIDInternalServerError() *PatchDevicesOnusIDInternalServerError {
	return &PatchDevicesOnusIDInternalServerError{}
}

/*PatchDevicesOnusIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type PatchDevicesOnusIDInternalServerError struct {
	Payload *models.Error
}

func (o *PatchDevicesOnusIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /devices/onus/{id}][%d] patchDevicesOnusIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchDevicesOnusIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchDevicesOnusIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
