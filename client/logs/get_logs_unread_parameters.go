// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLogsUnreadParams creates a new GetLogsUnreadParams object
// with the default values initialized.
func NewGetLogsUnreadParams() *GetLogsUnreadParams {
	var ()
	return &GetLogsUnreadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogsUnreadParamsWithTimeout creates a new GetLogsUnreadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLogsUnreadParamsWithTimeout(timeout time.Duration) *GetLogsUnreadParams {
	var ()
	return &GetLogsUnreadParams{

		timeout: timeout,
	}
}

// NewGetLogsUnreadParamsWithContext creates a new GetLogsUnreadParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLogsUnreadParamsWithContext(ctx context.Context) *GetLogsUnreadParams {
	var ()
	return &GetLogsUnreadParams{

		Context: ctx,
	}
}

// NewGetLogsUnreadParamsWithHTTPClient creates a new GetLogsUnreadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLogsUnreadParamsWithHTTPClient(client *http.Client) *GetLogsUnreadParams {
	var ()
	return &GetLogsUnreadParams{
		HTTPClient: client,
	}
}

/*GetLogsUnreadParams contains all the parameters to send to the API endpoint
for the get logs unread operation typically these are written to a http.Request
*/
type GetLogsUnreadParams struct {

	/*Level*/
	Level *string
	/*Timestamp
	  Unix timestamp in milliseconds.

	*/
	Timestamp float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get logs unread params
func (o *GetLogsUnreadParams) WithTimeout(timeout time.Duration) *GetLogsUnreadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get logs unread params
func (o *GetLogsUnreadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get logs unread params
func (o *GetLogsUnreadParams) WithContext(ctx context.Context) *GetLogsUnreadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get logs unread params
func (o *GetLogsUnreadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get logs unread params
func (o *GetLogsUnreadParams) WithHTTPClient(client *http.Client) *GetLogsUnreadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get logs unread params
func (o *GetLogsUnreadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLevel adds the level to the get logs unread params
func (o *GetLogsUnreadParams) WithLevel(level *string) *GetLogsUnreadParams {
	o.SetLevel(level)
	return o
}

// SetLevel adds the level to the get logs unread params
func (o *GetLogsUnreadParams) SetLevel(level *string) {
	o.Level = level
}

// WithTimestamp adds the timestamp to the get logs unread params
func (o *GetLogsUnreadParams) WithTimestamp(timestamp float64) *GetLogsUnreadParams {
	o.SetTimestamp(timestamp)
	return o
}

// SetTimestamp adds the timestamp to the get logs unread params
func (o *GetLogsUnreadParams) SetTimestamp(timestamp float64) {
	o.Timestamp = timestamp
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogsUnreadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Level != nil {

		// query param level
		var qrLevel string
		if o.Level != nil {
			qrLevel = *o.Level
		}
		qLevel := qrLevel
		if qLevel != "" {
			if err := r.SetQueryParam("level", qLevel); err != nil {
				return err
			}
		}

	}

	// query param timestamp
	qrTimestamp := o.Timestamp
	qTimestamp := swag.FormatFloat64(qrTimestamp)
	if qTimestamp != "" {
		if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
