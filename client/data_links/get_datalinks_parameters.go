// Code generated by go-swagger; DO NOT EDIT.

package data_links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDatalinksParams creates a new GetDatalinksParams object
// with the default values initialized.
func NewGetDatalinksParams() *GetDatalinksParams {
	var (
		siteLinksOnlyDefault = bool(false)
	)
	return &GetDatalinksParams{
		SiteLinksOnly: &siteLinksOnlyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDatalinksParamsWithTimeout creates a new GetDatalinksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDatalinksParamsWithTimeout(timeout time.Duration) *GetDatalinksParams {
	var (
		siteLinksOnlyDefault = bool(false)
	)
	return &GetDatalinksParams{
		SiteLinksOnly: &siteLinksOnlyDefault,

		timeout: timeout,
	}
}

// NewGetDatalinksParamsWithContext creates a new GetDatalinksParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDatalinksParamsWithContext(ctx context.Context) *GetDatalinksParams {
	var (
		siteLinksOnlyDefault = bool(false)
	)
	return &GetDatalinksParams{
		SiteLinksOnly: &siteLinksOnlyDefault,

		Context: ctx,
	}
}

// NewGetDatalinksParamsWithHTTPClient creates a new GetDatalinksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDatalinksParamsWithHTTPClient(client *http.Client) *GetDatalinksParams {
	var (
		siteLinksOnlyDefault = bool(false)
	)
	return &GetDatalinksParams{
		SiteLinksOnly: &siteLinksOnlyDefault,
		HTTPClient:    client,
	}
}

/*GetDatalinksParams contains all the parameters to send to the API endpoint
for the get datalinks operation typically these are written to a http.Request
*/
type GetDatalinksParams struct {

	/*SiteLinksOnly*/
	SiteLinksOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get datalinks params
func (o *GetDatalinksParams) WithTimeout(timeout time.Duration) *GetDatalinksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get datalinks params
func (o *GetDatalinksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get datalinks params
func (o *GetDatalinksParams) WithContext(ctx context.Context) *GetDatalinksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get datalinks params
func (o *GetDatalinksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get datalinks params
func (o *GetDatalinksParams) WithHTTPClient(client *http.Client) *GetDatalinksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get datalinks params
func (o *GetDatalinksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSiteLinksOnly adds the siteLinksOnly to the get datalinks params
func (o *GetDatalinksParams) WithSiteLinksOnly(siteLinksOnly *bool) *GetDatalinksParams {
	o.SetSiteLinksOnly(siteLinksOnly)
	return o
}

// SetSiteLinksOnly adds the siteLinksOnly to the get datalinks params
func (o *GetDatalinksParams) SetSiteLinksOnly(siteLinksOnly *bool) {
	o.SiteLinksOnly = siteLinksOnly
}

// WriteToRequest writes these params to a swagger request
func (o *GetDatalinksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SiteLinksOnly != nil {

		// query param siteLinksOnly
		var qrSiteLinksOnly bool
		if o.SiteLinksOnly != nil {
			qrSiteLinksOnly = *o.SiteLinksOnly
		}
		qSiteLinksOnly := swag.FormatBool(qrSiteLinksOnly)
		if qSiteLinksOnly != "" {
			if err := r.SetQueryParam("siteLinksOnly", qSiteLinksOnly); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
