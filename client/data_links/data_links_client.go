// Code generated by go-swagger; DO NOT EDIT.

package data_links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new data links API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data links API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDatalinksID(params *DeleteDatalinksIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDatalinksIDOK, error)

	GetDatalinks(params *GetDatalinksParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatalinksOK, error)

	GetDatalinksDeviceID(params *GetDatalinksDeviceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatalinksDeviceIDOK, error)

	GetDatalinksID(params *GetDatalinksIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatalinksIDOK, error)

	GetDatalinksSitesSiteid(params *GetDatalinksSitesSiteidParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatalinksSitesSiteidOK, error)

	PostDatalinks(params *PostDatalinksParams, authInfo runtime.ClientAuthInfoWriter) (*PostDatalinksOK, error)

	PutDatalinksID(params *PutDatalinksIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDatalinksIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDatalinksID deletes data link based on its ID
*/
func (a *Client) DeleteDatalinksID(params *DeleteDatalinksIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDatalinksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatalinksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDatalinksId",
		Method:             "DELETE",
		PathPattern:        "/data-links/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDatalinksIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatalinksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDatalinksId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatalinks lists of all data links
*/
func (a *Client) GetDatalinks(params *GetDatalinksParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatalinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatalinksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatalinks",
		Method:             "GET",
		PathPattern:        "/data-links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatalinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatalinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatalinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatalinksDeviceID gets data link based on device ID
*/
func (a *Client) GetDatalinksDeviceID(params *GetDatalinksDeviceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatalinksDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatalinksDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatalinksDeviceId",
		Method:             "GET",
		PathPattern:        "/data-links/device/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatalinksDeviceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatalinksDeviceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatalinksDeviceId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatalinksID gets data link based on its ID
*/
func (a *Client) GetDatalinksID(params *GetDatalinksIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatalinksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatalinksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatalinksId",
		Method:             "GET",
		PathPattern:        "/data-links/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatalinksIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatalinksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatalinksId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatalinksSitesSiteid lists of data links based site Id
*/
func (a *Client) GetDatalinksSitesSiteid(params *GetDatalinksSitesSiteidParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatalinksSitesSiteidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatalinksSitesSiteidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatalinksSitesSiteid",
		Method:             "GET",
		PathPattern:        "/data-links/sites/{siteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatalinksSitesSiteidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatalinksSitesSiteidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatalinksSitesSiteid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDatalinks creates data link
*/
func (a *Client) PostDatalinks(params *PostDatalinksParams, authInfo runtime.ClientAuthInfoWriter) (*PostDatalinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatalinksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postDatalinks",
		Method:             "POST",
		PathPattern:        "/data-links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDatalinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatalinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDatalinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDatalinksID updates data link
*/
func (a *Client) PutDatalinksID(params *PutDatalinksIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDatalinksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDatalinksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDatalinksId",
		Method:             "PUT",
		PathPattern:        "/data-links/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDatalinksIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDatalinksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDatalinksId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
