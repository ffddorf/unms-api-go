// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNmsAccountLoginUbiquitiParams creates a new GetNmsAccountLoginUbiquitiParams object
// with the default values initialized.
func NewGetNmsAccountLoginUbiquitiParams() *GetNmsAccountLoginUbiquitiParams {
	var ()
	return &GetNmsAccountLoginUbiquitiParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNmsAccountLoginUbiquitiParamsWithTimeout creates a new GetNmsAccountLoginUbiquitiParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNmsAccountLoginUbiquitiParamsWithTimeout(timeout time.Duration) *GetNmsAccountLoginUbiquitiParams {
	var ()
	return &GetNmsAccountLoginUbiquitiParams{

		timeout: timeout,
	}
}

// NewGetNmsAccountLoginUbiquitiParamsWithContext creates a new GetNmsAccountLoginUbiquitiParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNmsAccountLoginUbiquitiParamsWithContext(ctx context.Context) *GetNmsAccountLoginUbiquitiParams {
	var ()
	return &GetNmsAccountLoginUbiquitiParams{

		Context: ctx,
	}
}

// NewGetNmsAccountLoginUbiquitiParamsWithHTTPClient creates a new GetNmsAccountLoginUbiquitiParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNmsAccountLoginUbiquitiParamsWithHTTPClient(client *http.Client) *GetNmsAccountLoginUbiquitiParams {
	var ()
	return &GetNmsAccountLoginUbiquitiParams{
		HTTPClient: client,
	}
}

/*GetNmsAccountLoginUbiquitiParams contains all the parameters to send to the API endpoint
for the get nms account login ubiquiti operation typically these are written to a http.Request
*/
type GetNmsAccountLoginUbiquitiParams struct {

	/*Code*/
	Code *string
	/*Error*/
	Error *string
	/*ErrorDescription*/
	ErrorDescription *string
	/*State*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) WithTimeout(timeout time.Duration) *GetNmsAccountLoginUbiquitiParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) WithContext(ctx context.Context) *GetNmsAccountLoginUbiquitiParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) WithHTTPClient(client *http.Client) *GetNmsAccountLoginUbiquitiParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) WithCode(code *string) *GetNmsAccountLoginUbiquitiParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) SetCode(code *string) {
	o.Code = code
}

// WithError adds the error to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) WithError(error *string) *GetNmsAccountLoginUbiquitiParams {
	o.SetError(error)
	return o
}

// SetError adds the error to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) SetError(error *string) {
	o.Error = error
}

// WithErrorDescription adds the errorDescription to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) WithErrorDescription(errorDescription *string) *GetNmsAccountLoginUbiquitiParams {
	o.SetErrorDescription(errorDescription)
	return o
}

// SetErrorDescription adds the errorDescription to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) SetErrorDescription(errorDescription *string) {
	o.ErrorDescription = errorDescription
}

// WithState adds the state to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) WithState(state *string) *GetNmsAccountLoginUbiquitiParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get nms account login ubiquiti params
func (o *GetNmsAccountLoginUbiquitiParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetNmsAccountLoginUbiquitiParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Code != nil {

		// query param code
		var qrCode string
		if o.Code != nil {
			qrCode = *o.Code
		}
		qCode := qrCode
		if qCode != "" {
			if err := r.SetQueryParam("code", qCode); err != nil {
				return err
			}
		}

	}

	if o.Error != nil {

		// query param error
		var qrError string
		if o.Error != nil {
			qrError = *o.Error
		}
		qError := qrError
		if qError != "" {
			if err := r.SetQueryParam("error", qError); err != nil {
				return err
			}
		}

	}

	if o.ErrorDescription != nil {

		// query param error_description
		var qrErrorDescription string
		if o.ErrorDescription != nil {
			qrErrorDescription = *o.ErrorDescription
		}
		qErrorDescription := qrErrorDescription
		if qErrorDescription != "" {
			if err := r.SetQueryParam("error_description", qErrorDescription); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
