// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PostUserLoginReader is a Reader for the PostUserLogin structure.
type PostUserLoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUserLoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUserLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPostUserLoginCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUserLoginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUserLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUserLoginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostUserLoginOK creates a PostUserLoginOK with default headers values
func NewPostUserLoginOK() *PostUserLoginOK {
	return &PostUserLoginOK{}
}

/*PostUserLoginOK handles this case with default header values.

Successful
*/
type PostUserLoginOK struct {
	/*User authorization token
	 */
	XAuthToken string

	Payload *models.UserLogin
}

func (o *PostUserLoginOK) Error() string {
	return fmt.Sprintf("[POST /user/login][%d] postUserLoginOK  %+v", 200, o.Payload)
}

func (o *PostUserLoginOK) GetPayload() *models.UserLogin {
	return o.Payload
}

func (o *PostUserLoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-auth-token
	o.XAuthToken = response.GetHeader("x-auth-token")

	o.Payload = new(models.UserLogin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserLoginCreated creates a PostUserLoginCreated with default headers values
func NewPostUserLoginCreated() *PostUserLoginCreated {
	return &PostUserLoginCreated{}
}

/*PostUserLoginCreated handles this case with default header values.

Created
*/
type PostUserLoginCreated struct {
	Payload *models.TwoFactorToken
}

func (o *PostUserLoginCreated) Error() string {
	return fmt.Sprintf("[POST /user/login][%d] postUserLoginCreated  %+v", 201, o.Payload)
}

func (o *PostUserLoginCreated) GetPayload() *models.TwoFactorToken {
	return o.Payload
}

func (o *PostUserLoginCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TwoFactorToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserLoginBadRequest creates a PostUserLoginBadRequest with default headers values
func NewPostUserLoginBadRequest() *PostUserLoginBadRequest {
	return &PostUserLoginBadRequest{}
}

/*PostUserLoginBadRequest handles this case with default header values.

Bad Request
*/
type PostUserLoginBadRequest struct {
	Payload *models.Error
}

func (o *PostUserLoginBadRequest) Error() string {
	return fmt.Sprintf("[POST /user/login][%d] postUserLoginBadRequest  %+v", 400, o.Payload)
}

func (o *PostUserLoginBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUserLoginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserLoginUnauthorized creates a PostUserLoginUnauthorized with default headers values
func NewPostUserLoginUnauthorized() *PostUserLoginUnauthorized {
	return &PostUserLoginUnauthorized{}
}

/*PostUserLoginUnauthorized handles this case with default header values.

Unauthorized
*/
type PostUserLoginUnauthorized struct {
	Payload *models.Error
}

func (o *PostUserLoginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /user/login][%d] postUserLoginUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUserLoginUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUserLoginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserLoginInternalServerError creates a PostUserLoginInternalServerError with default headers values
func NewPostUserLoginInternalServerError() *PostUserLoginInternalServerError {
	return &PostUserLoginInternalServerError{}
}

/*PostUserLoginInternalServerError handles this case with default header values.

Internal Server Error
*/
type PostUserLoginInternalServerError struct {
	Payload *models.Error
}

func (o *PostUserLoginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /user/login][%d] postUserLoginInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUserLoginInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUserLoginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
