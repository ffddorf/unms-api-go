// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PutUserTotpauthReader is a Reader for the PutUserTotpauth structure.
type PutUserTotpauthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserTotpauthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserTotpauthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUserTotpauthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutUserTotpauthUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUserTotpauthForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutUserTotpauthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutUserTotpauthOK creates a PutUserTotpauthOK with default headers values
func NewPutUserTotpauthOK() *PutUserTotpauthOK {
	return &PutUserTotpauthOK{}
}

/*PutUserTotpauthOK handles this case with default header values.

Successful
*/
type PutUserTotpauthOK struct {
	Payload *models.User
}

func (o *PutUserTotpauthOK) Error() string {
	return fmt.Sprintf("[PUT /user/totpauth][%d] putUserTotpauthOK  %+v", 200, o.Payload)
}

func (o *PutUserTotpauthOK) GetPayload() *models.User {
	return o.Payload
}

func (o *PutUserTotpauthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserTotpauthBadRequest creates a PutUserTotpauthBadRequest with default headers values
func NewPutUserTotpauthBadRequest() *PutUserTotpauthBadRequest {
	return &PutUserTotpauthBadRequest{}
}

/*PutUserTotpauthBadRequest handles this case with default header values.

Bad Request
*/
type PutUserTotpauthBadRequest struct {
	Payload *models.Error
}

func (o *PutUserTotpauthBadRequest) Error() string {
	return fmt.Sprintf("[PUT /user/totpauth][%d] putUserTotpauthBadRequest  %+v", 400, o.Payload)
}

func (o *PutUserTotpauthBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutUserTotpauthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserTotpauthUnauthorized creates a PutUserTotpauthUnauthorized with default headers values
func NewPutUserTotpauthUnauthorized() *PutUserTotpauthUnauthorized {
	return &PutUserTotpauthUnauthorized{}
}

/*PutUserTotpauthUnauthorized handles this case with default header values.

Unauthorized
*/
type PutUserTotpauthUnauthorized struct {
	Payload *models.Error
}

func (o *PutUserTotpauthUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /user/totpauth][%d] putUserTotpauthUnauthorized  %+v", 401, o.Payload)
}

func (o *PutUserTotpauthUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutUserTotpauthUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserTotpauthForbidden creates a PutUserTotpauthForbidden with default headers values
func NewPutUserTotpauthForbidden() *PutUserTotpauthForbidden {
	return &PutUserTotpauthForbidden{}
}

/*PutUserTotpauthForbidden handles this case with default header values.

Forbidden
*/
type PutUserTotpauthForbidden struct {
	Payload *models.Error
}

func (o *PutUserTotpauthForbidden) Error() string {
	return fmt.Sprintf("[PUT /user/totpauth][%d] putUserTotpauthForbidden  %+v", 403, o.Payload)
}

func (o *PutUserTotpauthForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutUserTotpauthForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserTotpauthInternalServerError creates a PutUserTotpauthInternalServerError with default headers values
func NewPutUserTotpauthInternalServerError() *PutUserTotpauthInternalServerError {
	return &PutUserTotpauthInternalServerError{}
}

/*PutUserTotpauthInternalServerError handles this case with default header values.

Internal Server Error
*/
type PutUserTotpauthInternalServerError struct {
	Payload *models.Error
}

func (o *PutUserTotpauthInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /user/totpauth][%d] putUserTotpauthInternalServerError  %+v", 500, o.Payload)
}

func (o *PutUserTotpauthInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutUserTotpauthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
