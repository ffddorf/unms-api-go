// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNmsSummaryParams creates a new GetNmsSummaryParams object
// with the default values initialized.
func NewGetNmsSummaryParams() *GetNmsSummaryParams {
	var (
		firmwaresTimestampDefault = float64(0)
		logsTimestampDefault      = float64(0)
		outagesTimestampDefault   = float64(0)
	)
	return &GetNmsSummaryParams{
		FirmwaresTimestamp: &firmwaresTimestampDefault,
		LogsTimestamp:      &logsTimestampDefault,
		OutagesTimestamp:   &outagesTimestampDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNmsSummaryParamsWithTimeout creates a new GetNmsSummaryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNmsSummaryParamsWithTimeout(timeout time.Duration) *GetNmsSummaryParams {
	var (
		firmwaresTimestampDefault = float64(0)
		logsTimestampDefault      = float64(0)
		outagesTimestampDefault   = float64(0)
	)
	return &GetNmsSummaryParams{
		FirmwaresTimestamp: &firmwaresTimestampDefault,
		LogsTimestamp:      &logsTimestampDefault,
		OutagesTimestamp:   &outagesTimestampDefault,

		timeout: timeout,
	}
}

// NewGetNmsSummaryParamsWithContext creates a new GetNmsSummaryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNmsSummaryParamsWithContext(ctx context.Context) *GetNmsSummaryParams {
	var (
		firmwaresTimestampDefault = float64(0)
		logsTimestampDefault      = float64(0)
		outagesTimestampDefault   = float64(0)
	)
	return &GetNmsSummaryParams{
		FirmwaresTimestamp: &firmwaresTimestampDefault,
		LogsTimestamp:      &logsTimestampDefault,
		OutagesTimestamp:   &outagesTimestampDefault,

		Context: ctx,
	}
}

// NewGetNmsSummaryParamsWithHTTPClient creates a new GetNmsSummaryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNmsSummaryParamsWithHTTPClient(client *http.Client) *GetNmsSummaryParams {
	var (
		firmwaresTimestampDefault = float64(0)
		logsTimestampDefault      = float64(0)
		outagesTimestampDefault   = float64(0)
	)
	return &GetNmsSummaryParams{
		FirmwaresTimestamp: &firmwaresTimestampDefault,
		LogsTimestamp:      &logsTimestampDefault,
		OutagesTimestamp:   &outagesTimestampDefault,
		HTTPClient:         client,
	}
}

/*GetNmsSummaryParams contains all the parameters to send to the API endpoint
for the get nms summary operation typically these are written to a http.Request
*/
type GetNmsSummaryParams struct {

	/*FirmwaresTimestamp*/
	FirmwaresTimestamp *float64
	/*LogsLevel*/
	LogsLevel []string
	/*LogsTimestamp*/
	LogsTimestamp *float64
	/*OutagesTimestamp*/
	OutagesTimestamp *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get nms summary params
func (o *GetNmsSummaryParams) WithTimeout(timeout time.Duration) *GetNmsSummaryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nms summary params
func (o *GetNmsSummaryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nms summary params
func (o *GetNmsSummaryParams) WithContext(ctx context.Context) *GetNmsSummaryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nms summary params
func (o *GetNmsSummaryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nms summary params
func (o *GetNmsSummaryParams) WithHTTPClient(client *http.Client) *GetNmsSummaryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nms summary params
func (o *GetNmsSummaryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFirmwaresTimestamp adds the firmwaresTimestamp to the get nms summary params
func (o *GetNmsSummaryParams) WithFirmwaresTimestamp(firmwaresTimestamp *float64) *GetNmsSummaryParams {
	o.SetFirmwaresTimestamp(firmwaresTimestamp)
	return o
}

// SetFirmwaresTimestamp adds the firmwaresTimestamp to the get nms summary params
func (o *GetNmsSummaryParams) SetFirmwaresTimestamp(firmwaresTimestamp *float64) {
	o.FirmwaresTimestamp = firmwaresTimestamp
}

// WithLogsLevel adds the logsLevel to the get nms summary params
func (o *GetNmsSummaryParams) WithLogsLevel(logsLevel []string) *GetNmsSummaryParams {
	o.SetLogsLevel(logsLevel)
	return o
}

// SetLogsLevel adds the logsLevel to the get nms summary params
func (o *GetNmsSummaryParams) SetLogsLevel(logsLevel []string) {
	o.LogsLevel = logsLevel
}

// WithLogsTimestamp adds the logsTimestamp to the get nms summary params
func (o *GetNmsSummaryParams) WithLogsTimestamp(logsTimestamp *float64) *GetNmsSummaryParams {
	o.SetLogsTimestamp(logsTimestamp)
	return o
}

// SetLogsTimestamp adds the logsTimestamp to the get nms summary params
func (o *GetNmsSummaryParams) SetLogsTimestamp(logsTimestamp *float64) {
	o.LogsTimestamp = logsTimestamp
}

// WithOutagesTimestamp adds the outagesTimestamp to the get nms summary params
func (o *GetNmsSummaryParams) WithOutagesTimestamp(outagesTimestamp *float64) *GetNmsSummaryParams {
	o.SetOutagesTimestamp(outagesTimestamp)
	return o
}

// SetOutagesTimestamp adds the outagesTimestamp to the get nms summary params
func (o *GetNmsSummaryParams) SetOutagesTimestamp(outagesTimestamp *float64) {
	o.OutagesTimestamp = outagesTimestamp
}

// WriteToRequest writes these params to a swagger request
func (o *GetNmsSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FirmwaresTimestamp != nil {

		// query param firmwaresTimestamp
		var qrFirmwaresTimestamp float64
		if o.FirmwaresTimestamp != nil {
			qrFirmwaresTimestamp = *o.FirmwaresTimestamp
		}
		qFirmwaresTimestamp := swag.FormatFloat64(qrFirmwaresTimestamp)
		if qFirmwaresTimestamp != "" {
			if err := r.SetQueryParam("firmwaresTimestamp", qFirmwaresTimestamp); err != nil {
				return err
			}
		}

	}

	valuesLogsLevel := o.LogsLevel

	joinedLogsLevel := swag.JoinByFormat(valuesLogsLevel, "multi")
	// query array param logsLevel
	if err := r.SetQueryParam("logsLevel", joinedLogsLevel...); err != nil {
		return err
	}

	if o.LogsTimestamp != nil {

		// query param logsTimestamp
		var qrLogsTimestamp float64
		if o.LogsTimestamp != nil {
			qrLogsTimestamp = *o.LogsTimestamp
		}
		qLogsTimestamp := swag.FormatFloat64(qrLogsTimestamp)
		if qLogsTimestamp != "" {
			if err := r.SetQueryParam("logsTimestamp", qLogsTimestamp); err != nil {
				return err
			}
		}

	}

	if o.OutagesTimestamp != nil {

		// query param outagesTimestamp
		var qrOutagesTimestamp float64
		if o.OutagesTimestamp != nil {
			qrOutagesTimestamp = *o.OutagesTimestamp
		}
		qOutagesTimestamp := swag.FormatFloat64(qrOutagesTimestamp)
		if qOutagesTimestamp != "" {
			if err := r.SetQueryParam("outagesTimestamp", qOutagesTimestamp); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
