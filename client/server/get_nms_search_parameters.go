// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNmsSearchParams creates a new GetNmsSearchParams object
// with the default values initialized.
func NewGetNmsSearchParams() *GetNmsSearchParams {
	var ()
	return &GetNmsSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNmsSearchParamsWithTimeout creates a new GetNmsSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNmsSearchParamsWithTimeout(timeout time.Duration) *GetNmsSearchParams {
	var ()
	return &GetNmsSearchParams{

		timeout: timeout,
	}
}

// NewGetNmsSearchParamsWithContext creates a new GetNmsSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNmsSearchParamsWithContext(ctx context.Context) *GetNmsSearchParams {
	var ()
	return &GetNmsSearchParams{

		Context: ctx,
	}
}

// NewGetNmsSearchParamsWithHTTPClient creates a new GetNmsSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNmsSearchParamsWithHTTPClient(client *http.Client) *GetNmsSearchParams {
	var ()
	return &GetNmsSearchParams{
		HTTPClient: client,
	}
}

/*GetNmsSearchParams contains all the parameters to send to the API endpoint
for the get nms search operation typically these are written to a http.Request
*/
type GetNmsSearchParams struct {

	/*Count
	  Results per page.

	*/
	Count float64
	/*Page
	  Results page.

	*/
	Page float64
	/*Query
	  Text to search for.

	*/
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get nms search params
func (o *GetNmsSearchParams) WithTimeout(timeout time.Duration) *GetNmsSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nms search params
func (o *GetNmsSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nms search params
func (o *GetNmsSearchParams) WithContext(ctx context.Context) *GetNmsSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nms search params
func (o *GetNmsSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nms search params
func (o *GetNmsSearchParams) WithHTTPClient(client *http.Client) *GetNmsSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nms search params
func (o *GetNmsSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get nms search params
func (o *GetNmsSearchParams) WithCount(count float64) *GetNmsSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get nms search params
func (o *GetNmsSearchParams) SetCount(count float64) {
	o.Count = count
}

// WithPage adds the page to the get nms search params
func (o *GetNmsSearchParams) WithPage(page float64) *GetNmsSearchParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get nms search params
func (o *GetNmsSearchParams) SetPage(page float64) {
	o.Page = page
}

// WithQuery adds the query to the get nms search params
func (o *GetNmsSearchParams) WithQuery(query *string) *GetNmsSearchParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get nms search params
func (o *GetNmsSearchParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *GetNmsSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param count
	qrCount := o.Count
	qCount := swag.FormatFloat64(qrCount)
	if qCount != "" {
		if err := r.SetQueryParam("count", qCount); err != nil {
			return err
		}
	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatFloat64(qrPage)
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string
		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {
			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
