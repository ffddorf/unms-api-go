// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNmsChangedParams creates a new GetNmsChangedParams object
// with the default values initialized.
func NewGetNmsChangedParams() *GetNmsChangedParams {
	var ()
	return &GetNmsChangedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNmsChangedParamsWithTimeout creates a new GetNmsChangedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNmsChangedParamsWithTimeout(timeout time.Duration) *GetNmsChangedParams {
	var ()
	return &GetNmsChangedParams{

		timeout: timeout,
	}
}

// NewGetNmsChangedParamsWithContext creates a new GetNmsChangedParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNmsChangedParamsWithContext(ctx context.Context) *GetNmsChangedParams {
	var ()
	return &GetNmsChangedParams{

		Context: ctx,
	}
}

// NewGetNmsChangedParamsWithHTTPClient creates a new GetNmsChangedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNmsChangedParamsWithHTTPClient(client *http.Client) *GetNmsChangedParams {
	var ()
	return &GetNmsChangedParams{
		HTTPClient: client,
	}
}

/*GetNmsChangedParams contains all the parameters to send to the API endpoint
for the get nms changed operation typically these are written to a http.Request
*/
type GetNmsChangedParams struct {

	/*Since
	  Timestamp in milliseconds.

	*/
	Since int64
	/*Ucrm
	  Search items related to UCRM.

	*/
	Ucrm *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get nms changed params
func (o *GetNmsChangedParams) WithTimeout(timeout time.Duration) *GetNmsChangedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nms changed params
func (o *GetNmsChangedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nms changed params
func (o *GetNmsChangedParams) WithContext(ctx context.Context) *GetNmsChangedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nms changed params
func (o *GetNmsChangedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nms changed params
func (o *GetNmsChangedParams) WithHTTPClient(client *http.Client) *GetNmsChangedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nms changed params
func (o *GetNmsChangedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSince adds the since to the get nms changed params
func (o *GetNmsChangedParams) WithSince(since int64) *GetNmsChangedParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get nms changed params
func (o *GetNmsChangedParams) SetSince(since int64) {
	o.Since = since
}

// WithUcrm adds the ucrm to the get nms changed params
func (o *GetNmsChangedParams) WithUcrm(ucrm *bool) *GetNmsChangedParams {
	o.SetUcrm(ucrm)
	return o
}

// SetUcrm adds the ucrm to the get nms changed params
func (o *GetNmsChangedParams) SetUcrm(ucrm *bool) {
	o.Ucrm = ucrm
}

// WriteToRequest writes these params to a swagger request
func (o *GetNmsChangedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param since
	qrSince := o.Since
	qSince := swag.FormatInt64(qrSince)
	if qSince != "" {
		if err := r.SetQueryParam("since", qSince); err != nil {
			return err
		}
	}

	if o.Ucrm != nil {

		// query param ucrm
		var qrUcrm bool
		if o.Ucrm != nil {
			qrUcrm = *o.Ucrm
		}
		qUcrm := swag.FormatBool(qrUcrm)
		if qUcrm != "" {
			if err := r.SetQueryParam("ucrm", qUcrm); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
