// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// GetNmsUpdateLogReader is a Reader for the GetNmsUpdateLog structure.
type GetNmsUpdateLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNmsUpdateLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNmsUpdateLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetNmsUpdateLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNmsUpdateLogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNmsUpdateLogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetNmsUpdateLogServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNmsUpdateLogOK creates a GetNmsUpdateLogOK with default headers values
func NewGetNmsUpdateLogOK() *GetNmsUpdateLogOK {
	return &GetNmsUpdateLogOK{}
}

/*GetNmsUpdateLogOK handles this case with default header values.

Successful
*/
type GetNmsUpdateLogOK struct {
	Payload string
}

func (o *GetNmsUpdateLogOK) Error() string {
	return fmt.Sprintf("[GET /nms/update/log][%d] getNmsUpdateLogOK  %+v", 200, o.Payload)
}

func (o *GetNmsUpdateLogOK) GetPayload() string {
	return o.Payload
}

func (o *GetNmsUpdateLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNmsUpdateLogUnauthorized creates a GetNmsUpdateLogUnauthorized with default headers values
func NewGetNmsUpdateLogUnauthorized() *GetNmsUpdateLogUnauthorized {
	return &GetNmsUpdateLogUnauthorized{}
}

/*GetNmsUpdateLogUnauthorized handles this case with default header values.

Unauthorized
*/
type GetNmsUpdateLogUnauthorized struct {
	Payload *models.Error
}

func (o *GetNmsUpdateLogUnauthorized) Error() string {
	return fmt.Sprintf("[GET /nms/update/log][%d] getNmsUpdateLogUnauthorized  %+v", 401, o.Payload)
}

func (o *GetNmsUpdateLogUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNmsUpdateLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNmsUpdateLogForbidden creates a GetNmsUpdateLogForbidden with default headers values
func NewGetNmsUpdateLogForbidden() *GetNmsUpdateLogForbidden {
	return &GetNmsUpdateLogForbidden{}
}

/*GetNmsUpdateLogForbidden handles this case with default header values.

Forbidden
*/
type GetNmsUpdateLogForbidden struct {
	Payload *models.Error
}

func (o *GetNmsUpdateLogForbidden) Error() string {
	return fmt.Sprintf("[GET /nms/update/log][%d] getNmsUpdateLogForbidden  %+v", 403, o.Payload)
}

func (o *GetNmsUpdateLogForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNmsUpdateLogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNmsUpdateLogInternalServerError creates a GetNmsUpdateLogInternalServerError with default headers values
func NewGetNmsUpdateLogInternalServerError() *GetNmsUpdateLogInternalServerError {
	return &GetNmsUpdateLogInternalServerError{}
}

/*GetNmsUpdateLogInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetNmsUpdateLogInternalServerError struct {
	Payload *models.Error
}

func (o *GetNmsUpdateLogInternalServerError) Error() string {
	return fmt.Sprintf("[GET /nms/update/log][%d] getNmsUpdateLogInternalServerError  %+v", 500, o.Payload)
}

func (o *GetNmsUpdateLogInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNmsUpdateLogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNmsUpdateLogServiceUnavailable creates a GetNmsUpdateLogServiceUnavailable with default headers values
func NewGetNmsUpdateLogServiceUnavailable() *GetNmsUpdateLogServiceUnavailable {
	return &GetNmsUpdateLogServiceUnavailable{}
}

/*GetNmsUpdateLogServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type GetNmsUpdateLogServiceUnavailable struct {
	Payload *models.Error
}

func (o *GetNmsUpdateLogServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /nms/update/log][%d] getNmsUpdateLogServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetNmsUpdateLogServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNmsUpdateLogServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
