// Code generated by go-swagger; DO NOT EDIT.

package token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new token API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for token API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTokenTokenid(params *DeleteTokenTokenidParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTokenTokenidOK, error)

	GetToken(params *GetTokenParams, authInfo runtime.ClientAuthInfoWriter) (*GetTokenOK, error)

	GetTokenTokenid(params *GetTokenTokenidParams, authInfo runtime.ClientAuthInfoWriter) (*GetTokenTokenidOK, error)

	PostToken(params *PostTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PostTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteTokenTokenid deletes API token
*/
func (a *Client) DeleteTokenTokenid(params *DeleteTokenTokenidParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTokenTokenidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTokenTokenidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTokenTokenid",
		Method:             "DELETE",
		PathPattern:        "/token/{tokenId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTokenTokenidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTokenTokenidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTokenTokenid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetToken gets all API tokens
*/
func (a *Client) GetToken(params *GetTokenParams, authInfo runtime.ClientAuthInfoWriter) (*GetTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getToken",
		Method:             "GET",
		PathPattern:        "/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTokenTokenid gets API token by ID
*/
func (a *Client) GetTokenTokenid(params *GetTokenTokenidParams, authInfo runtime.ClientAuthInfoWriter) (*GetTokenTokenidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenTokenidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTokenTokenid",
		Method:             "GET",
		PathPattern:        "/token/{tokenId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTokenTokenidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokenTokenidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTokenTokenid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostToken creates new API token
*/
func (a *Client) PostToken(params *PostTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PostTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postToken",
		Method:             "POST",
		PathPattern:        "/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
