// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PostUsersImportReader is a Reader for the PostUsersImport structure.
type PostUsersImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUsersImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUsersImportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUsersImportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUsersImportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUsersImportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUsersImportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostUsersImportOK creates a PostUsersImportOK with default headers values
func NewPostUsersImportOK() *PostUsersImportOK {
	return &PostUsersImportOK{}
}

/*PostUsersImportOK handles this case with default header values.

Successful
*/
type PostUsersImportOK struct {
	Payload models.ImportUsersResultListSchema
}

func (o *PostUsersImportOK) Error() string {
	return fmt.Sprintf("[POST /users/import][%d] postUsersImportOK  %+v", 200, o.Payload)
}

func (o *PostUsersImportOK) GetPayload() models.ImportUsersResultListSchema {
	return o.Payload
}

func (o *PostUsersImportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersImportBadRequest creates a PostUsersImportBadRequest with default headers values
func NewPostUsersImportBadRequest() *PostUsersImportBadRequest {
	return &PostUsersImportBadRequest{}
}

/*PostUsersImportBadRequest handles this case with default header values.

Bad Request
*/
type PostUsersImportBadRequest struct {
	Payload *models.Error
}

func (o *PostUsersImportBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/import][%d] postUsersImportBadRequest  %+v", 400, o.Payload)
}

func (o *PostUsersImportBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUsersImportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersImportUnauthorized creates a PostUsersImportUnauthorized with default headers values
func NewPostUsersImportUnauthorized() *PostUsersImportUnauthorized {
	return &PostUsersImportUnauthorized{}
}

/*PostUsersImportUnauthorized handles this case with default header values.

Unauthorized
*/
type PostUsersImportUnauthorized struct {
	Payload *models.Error
}

func (o *PostUsersImportUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/import][%d] postUsersImportUnauthorized  %+v", 401, o.Payload)
}

func (o *PostUsersImportUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUsersImportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersImportForbidden creates a PostUsersImportForbidden with default headers values
func NewPostUsersImportForbidden() *PostUsersImportForbidden {
	return &PostUsersImportForbidden{}
}

/*PostUsersImportForbidden handles this case with default header values.

Forbidden
*/
type PostUsersImportForbidden struct {
	Payload *models.Error
}

func (o *PostUsersImportForbidden) Error() string {
	return fmt.Sprintf("[POST /users/import][%d] postUsersImportForbidden  %+v", 403, o.Payload)
}

func (o *PostUsersImportForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUsersImportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersImportInternalServerError creates a PostUsersImportInternalServerError with default headers values
func NewPostUsersImportInternalServerError() *PostUsersImportInternalServerError {
	return &PostUsersImportInternalServerError{}
}

/*PostUsersImportInternalServerError handles this case with default header values.

Internal Server Error
*/
type PostUsersImportInternalServerError struct {
	Payload *models.Error
}

func (o *PostUsersImportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/import][%d] postUsersImportInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUsersImportInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUsersImportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
