// Code generated by go-swagger; DO NOT EDIT.

package vault

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vault API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vault API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetVaultCredentials(params *GetVaultCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVaultCredentialsOK, error)

	GetVaultIDCredentials(params *GetVaultIDCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVaultIDCredentialsOK, error)

	PostVaultCredentials(params *PostVaultCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVaultCredentialsOK, error)

	PostVaultCredentialsRegenerate(params *PostVaultCredentialsRegenerateParams, authInfo runtime.ClientAuthInfoWriter) (*PostVaultCredentialsRegenerateOK, error)

	PostVaultCredentialsUnlock(params *PostVaultCredentialsUnlockParams, authInfo runtime.ClientAuthInfoWriter) (*PostVaultCredentialsUnlockOK, error)

	PostVaultIDCredentialsRegenerate(params *PostVaultIDCredentialsRegenerateParams, authInfo runtime.ClientAuthInfoWriter) (*PostVaultIDCredentialsRegenerateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetVaultCredentials gets credentials vault status
*/
func (a *Client) GetVaultCredentials(params *GetVaultCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVaultCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVaultCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVaultCredentials",
		Method:             "GET",
		PathPattern:        "/vault/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVaultCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVaultCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVaultCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVaultIDCredentials gets device credentials
*/
func (a *Client) GetVaultIDCredentials(params *GetVaultIDCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVaultIDCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVaultIDCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVaultIdCredentials",
		Method:             "GET",
		PathPattern:        "/vault/{id}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVaultIDCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVaultIDCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVaultIdCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVaultCredentials updates credentials vault status
*/
func (a *Client) PostVaultCredentials(params *PostVaultCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVaultCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaultCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postVaultCredentials",
		Method:             "POST",
		PathPattern:        "/vault/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVaultCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaultCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postVaultCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVaultCredentialsRegenerate generates new password for devices returns status
*/
func (a *Client) PostVaultCredentialsRegenerate(params *PostVaultCredentialsRegenerateParams, authInfo runtime.ClientAuthInfoWriter) (*PostVaultCredentialsRegenerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaultCredentialsRegenerateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postVaultCredentialsRegenerate",
		Method:             "POST",
		PathPattern:        "/vault/credentials/regenerate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVaultCredentialsRegenerateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaultCredentialsRegenerateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postVaultCredentialsRegenerate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVaultCredentialsUnlock unlocks private pgp key
*/
func (a *Client) PostVaultCredentialsUnlock(params *PostVaultCredentialsUnlockParams, authInfo runtime.ClientAuthInfoWriter) (*PostVaultCredentialsUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaultCredentialsUnlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postVaultCredentialsUnlock",
		Method:             "POST",
		PathPattern:        "/vault/credentials/unlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVaultCredentialsUnlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaultCredentialsUnlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postVaultCredentialsUnlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVaultIDCredentialsRegenerate generates new password for device
*/
func (a *Client) PostVaultIDCredentialsRegenerate(params *PostVaultIDCredentialsRegenerateParams, authInfo runtime.ClientAuthInfoWriter) (*PostVaultIDCredentialsRegenerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaultIDCredentialsRegenerateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postVaultIdCredentialsRegenerate",
		Method:             "POST",
		PathPattern:        "/vault/{id}/credentials/regenerate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVaultIDCredentialsRegenerateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaultIDCredentialsRegenerateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postVaultIdCredentialsRegenerate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
