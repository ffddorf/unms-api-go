// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitesSearchParams creates a new GetSitesSearchParams object
// with the default values initialized.
func NewGetSitesSearchParams() *GetSitesSearchParams {
	var ()
	return &GetSitesSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitesSearchParamsWithTimeout creates a new GetSitesSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitesSearchParamsWithTimeout(timeout time.Duration) *GetSitesSearchParams {
	var ()
	return &GetSitesSearchParams{

		timeout: timeout,
	}
}

// NewGetSitesSearchParamsWithContext creates a new GetSitesSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitesSearchParamsWithContext(ctx context.Context) *GetSitesSearchParams {
	var ()
	return &GetSitesSearchParams{

		Context: ctx,
	}
}

// NewGetSitesSearchParamsWithHTTPClient creates a new GetSitesSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitesSearchParamsWithHTTPClient(client *http.Client) *GetSitesSearchParams {
	var ()
	return &GetSitesSearchParams{
		HTTPClient: client,
	}
}

/*GetSitesSearchParams contains all the parameters to send to the API endpoint
for the get sites search operation typically these are written to a http.Request
*/
type GetSitesSearchParams struct {

	/*Count
	  Results per page.

	*/
	Count float64
	/*Latitude
	  Order sites by distance from this latitude.

	*/
	Latitude *float64
	/*Longitude
	  Order sites by distance from this longitude.

	*/
	Longitude *float64
	/*Page
	  Results page.

	*/
	Page float64
	/*Query
	  Text to search for in site.

	*/
	Query *string
	/*Type
	  Type of site to search.

	*/
	Type *string
	/*Ucrm
	  Search sites bound with UCRM.

	*/
	Ucrm *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sites search params
func (o *GetSitesSearchParams) WithTimeout(timeout time.Duration) *GetSitesSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sites search params
func (o *GetSitesSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sites search params
func (o *GetSitesSearchParams) WithContext(ctx context.Context) *GetSitesSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sites search params
func (o *GetSitesSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sites search params
func (o *GetSitesSearchParams) WithHTTPClient(client *http.Client) *GetSitesSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sites search params
func (o *GetSitesSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get sites search params
func (o *GetSitesSearchParams) WithCount(count float64) *GetSitesSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get sites search params
func (o *GetSitesSearchParams) SetCount(count float64) {
	o.Count = count
}

// WithLatitude adds the latitude to the get sites search params
func (o *GetSitesSearchParams) WithLatitude(latitude *float64) *GetSitesSearchParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the get sites search params
func (o *GetSitesSearchParams) SetLatitude(latitude *float64) {
	o.Latitude = latitude
}

// WithLongitude adds the longitude to the get sites search params
func (o *GetSitesSearchParams) WithLongitude(longitude *float64) *GetSitesSearchParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the get sites search params
func (o *GetSitesSearchParams) SetLongitude(longitude *float64) {
	o.Longitude = longitude
}

// WithPage adds the page to the get sites search params
func (o *GetSitesSearchParams) WithPage(page float64) *GetSitesSearchParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get sites search params
func (o *GetSitesSearchParams) SetPage(page float64) {
	o.Page = page
}

// WithQuery adds the query to the get sites search params
func (o *GetSitesSearchParams) WithQuery(query *string) *GetSitesSearchParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get sites search params
func (o *GetSitesSearchParams) SetQuery(query *string) {
	o.Query = query
}

// WithType adds the typeVar to the get sites search params
func (o *GetSitesSearchParams) WithType(typeVar *string) *GetSitesSearchParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get sites search params
func (o *GetSitesSearchParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUcrm adds the ucrm to the get sites search params
func (o *GetSitesSearchParams) WithUcrm(ucrm *bool) *GetSitesSearchParams {
	o.SetUcrm(ucrm)
	return o
}

// SetUcrm adds the ucrm to the get sites search params
func (o *GetSitesSearchParams) SetUcrm(ucrm *bool) {
	o.Ucrm = ucrm
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitesSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param count
	qrCount := o.Count
	qCount := swag.FormatFloat64(qrCount)
	if qCount != "" {
		if err := r.SetQueryParam("count", qCount); err != nil {
			return err
		}
	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude float64
		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := swag.FormatFloat64(qrLatitude)
		if qLatitude != "" {
			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}

	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude float64
		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := swag.FormatFloat64(qrLongitude)
		if qLongitude != "" {
			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}

	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatFloat64(qrPage)
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string
		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {
			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.Ucrm != nil {

		// query param ucrm
		var qrUcrm bool
		if o.Ucrm != nil {
			qrUcrm = *o.Ucrm
		}
		qUcrm := swag.FormatBool(qrUcrm)
		if qUcrm != "" {
			if err := r.SetQueryParam("ucrm", qUcrm); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
