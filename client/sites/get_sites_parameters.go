// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitesParams creates a new GetSitesParams object
// with the default values initialized.
func NewGetSitesParams() *GetSitesParams {
	var ()
	return &GetSitesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitesParamsWithTimeout creates a new GetSitesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitesParamsWithTimeout(timeout time.Duration) *GetSitesParams {
	var ()
	return &GetSitesParams{

		timeout: timeout,
	}
}

// NewGetSitesParamsWithContext creates a new GetSitesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitesParamsWithContext(ctx context.Context) *GetSitesParams {
	var ()
	return &GetSitesParams{

		Context: ctx,
	}
}

// NewGetSitesParamsWithHTTPClient creates a new GetSitesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitesParamsWithHTTPClient(client *http.Client) *GetSitesParams {
	var ()
	return &GetSitesParams{
		HTTPClient: client,
	}
}

/*GetSitesParams contains all the parameters to send to the API endpoint
for the get sites operation typically these are written to a http.Request
*/
type GetSitesParams struct {

	/*DeviceID
	  Return site containing device with this ID.

	*/
	DeviceID *string
	/*ID
	  Return only sites with these IDs.

	*/
	ID []string
	/*IP
	  Return only sites that contain a device with this IP address.

	*/
	IP *string
	/*Type
	  Return sites with this type.

	*/
	Type *string
	/*Ucrm
	  If true, returns only sites that are bound with CRM. If false, returns only sites that are not bound with CRM. Can be used only with "type" parameter.

	*/
	Ucrm *bool
	/*UcrmDetails
	  Include CRM client and service details. Can be used with any other parameter.

	*/
	UcrmDetails *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sites params
func (o *GetSitesParams) WithTimeout(timeout time.Duration) *GetSitesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sites params
func (o *GetSitesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sites params
func (o *GetSitesParams) WithContext(ctx context.Context) *GetSitesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sites params
func (o *GetSitesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sites params
func (o *GetSitesParams) WithHTTPClient(client *http.Client) *GetSitesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sites params
func (o *GetSitesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the get sites params
func (o *GetSitesParams) WithDeviceID(deviceID *string) *GetSitesParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get sites params
func (o *GetSitesParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithID adds the id to the get sites params
func (o *GetSitesParams) WithID(id []string) *GetSitesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get sites params
func (o *GetSitesParams) SetID(id []string) {
	o.ID = id
}

// WithIP adds the ip to the get sites params
func (o *GetSitesParams) WithIP(ip *string) *GetSitesParams {
	o.SetIP(ip)
	return o
}

// SetIP adds the ip to the get sites params
func (o *GetSitesParams) SetIP(ip *string) {
	o.IP = ip
}

// WithType adds the typeVar to the get sites params
func (o *GetSitesParams) WithType(typeVar *string) *GetSitesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get sites params
func (o *GetSitesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUcrm adds the ucrm to the get sites params
func (o *GetSitesParams) WithUcrm(ucrm *bool) *GetSitesParams {
	o.SetUcrm(ucrm)
	return o
}

// SetUcrm adds the ucrm to the get sites params
func (o *GetSitesParams) SetUcrm(ucrm *bool) {
	o.Ucrm = ucrm
}

// WithUcrmDetails adds the ucrmDetails to the get sites params
func (o *GetSitesParams) WithUcrmDetails(ucrmDetails *bool) *GetSitesParams {
	o.SetUcrmDetails(ucrmDetails)
	return o
}

// SetUcrmDetails adds the ucrmDetails to the get sites params
func (o *GetSitesParams) SetUcrmDetails(ucrmDetails *bool) {
	o.UcrmDetails = ucrmDetails
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeviceID != nil {

		// query param deviceId
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("deviceId", qDeviceID); err != nil {
				return err
			}
		}

	}

	valuesID := o.ID

	joinedID := swag.JoinByFormat(valuesID, "multi")
	// query array param id
	if err := r.SetQueryParam("id", joinedID...); err != nil {
		return err
	}

	if o.IP != nil {

		// query param ip
		var qrIP string
		if o.IP != nil {
			qrIP = *o.IP
		}
		qIP := qrIP
		if qIP != "" {
			if err := r.SetQueryParam("ip", qIP); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.Ucrm != nil {

		// query param ucrm
		var qrUcrm bool
		if o.Ucrm != nil {
			qrUcrm = *o.Ucrm
		}
		qUcrm := swag.FormatBool(qrUcrm)
		if qUcrm != "" {
			if err := r.SetQueryParam("ucrm", qUcrm); err != nil {
				return err
			}
		}

	}

	if o.UcrmDetails != nil {

		// query param ucrmDetails
		var qrUcrmDetails bool
		if o.UcrmDetails != nil {
			qrUcrmDetails = *o.UcrmDetails
		}
		qUcrmDetails := swag.FormatBool(qrUcrmDetails)
		if qUcrmDetails != "" {
			if err := r.SetQueryParam("ucrmDetails", qUcrmDetails); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
