// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitesSiteidTrafficParams creates a new GetSitesSiteidTrafficParams object
// with the default values initialized.
func NewGetSitesSiteidTrafficParams() *GetSitesSiteidTrafficParams {
	var ()
	return &GetSitesSiteidTrafficParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitesSiteidTrafficParamsWithTimeout creates a new GetSitesSiteidTrafficParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitesSiteidTrafficParamsWithTimeout(timeout time.Duration) *GetSitesSiteidTrafficParams {
	var ()
	return &GetSitesSiteidTrafficParams{

		timeout: timeout,
	}
}

// NewGetSitesSiteidTrafficParamsWithContext creates a new GetSitesSiteidTrafficParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitesSiteidTrafficParamsWithContext(ctx context.Context) *GetSitesSiteidTrafficParams {
	var ()
	return &GetSitesSiteidTrafficParams{

		Context: ctx,
	}
}

// NewGetSitesSiteidTrafficParamsWithHTTPClient creates a new GetSitesSiteidTrafficParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitesSiteidTrafficParamsWithHTTPClient(client *http.Client) *GetSitesSiteidTrafficParams {
	var ()
	return &GetSitesSiteidTrafficParams{
		HTTPClient: client,
	}
}

/*GetSitesSiteidTrafficParams contains all the parameters to send to the API endpoint
for the get sites siteid traffic operation typically these are written to a http.Request
*/
type GetSitesSiteidTrafficParams struct {

	/*From
	  Timestamp of the beginning of the interval in milliseconds

	*/
	From float64
	/*Granularity
	  Granularity of the traffic stats

	*/
	Granularity string
	/*SiteID*/
	SiteID string
	/*To
	  Timestamp of the end of the interval in milliseconds

	*/
	To float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) WithTimeout(timeout time.Duration) *GetSitesSiteidTrafficParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) WithContext(ctx context.Context) *GetSitesSiteidTrafficParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) WithHTTPClient(client *http.Client) *GetSitesSiteidTrafficParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) WithFrom(from float64) *GetSitesSiteidTrafficParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) SetFrom(from float64) {
	o.From = from
}

// WithGranularity adds the granularity to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) WithGranularity(granularity string) *GetSitesSiteidTrafficParams {
	o.SetGranularity(granularity)
	return o
}

// SetGranularity adds the granularity to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) SetGranularity(granularity string) {
	o.Granularity = granularity
}

// WithSiteID adds the siteID to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) WithSiteID(siteID string) *GetSitesSiteidTrafficParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WithTo adds the to to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) WithTo(to float64) *GetSitesSiteidTrafficParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get sites siteid traffic params
func (o *GetSitesSiteidTrafficParams) SetTo(to float64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitesSiteidTrafficParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param from
	qrFrom := o.From
	qFrom := swag.FormatFloat64(qrFrom)
	if qFrom != "" {
		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// query param granularity
	qrGranularity := o.Granularity
	qGranularity := qrGranularity
	if qGranularity != "" {
		if err := r.SetQueryParam("granularity", qGranularity); err != nil {
			return err
		}
	}

	// path param siteId
	if err := r.SetPathParam("siteId", o.SiteID); err != nil {
		return err
	}

	// query param to
	qrTo := o.To
	qTo := swag.FormatFloat64(qrTo)
	if qTo != "" {
		if err := r.SetQueryParam("to", qTo); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
