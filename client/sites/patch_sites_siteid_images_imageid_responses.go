// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ffddorf/unms-api-go/models"
)

// PatchSitesSiteidImagesImageidReader is a Reader for the PatchSitesSiteidImagesImageid structure.
type PatchSitesSiteidImagesImageidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSitesSiteidImagesImageidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchSitesSiteidImagesImageidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchSitesSiteidImagesImageidBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchSitesSiteidImagesImageidUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchSitesSiteidImagesImageidForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchSitesSiteidImagesImageidInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchSitesSiteidImagesImageidOK creates a PatchSitesSiteidImagesImageidOK with default headers values
func NewPatchSitesSiteidImagesImageidOK() *PatchSitesSiteidImagesImageidOK {
	return &PatchSitesSiteidImagesImageidOK{}
}

/*PatchSitesSiteidImagesImageidOK handles this case with default header values.

Successful
*/
type PatchSitesSiteidImagesImageidOK struct {
	Payload *models.Image
}

func (o *PatchSitesSiteidImagesImageidOK) Error() string {
	return fmt.Sprintf("[PATCH /sites/{siteId}/images/{imageId}][%d] patchSitesSiteidImagesImageidOK  %+v", 200, o.Payload)
}

func (o *PatchSitesSiteidImagesImageidOK) GetPayload() *models.Image {
	return o.Payload
}

func (o *PatchSitesSiteidImagesImageidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Image)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSitesSiteidImagesImageidBadRequest creates a PatchSitesSiteidImagesImageidBadRequest with default headers values
func NewPatchSitesSiteidImagesImageidBadRequest() *PatchSitesSiteidImagesImageidBadRequest {
	return &PatchSitesSiteidImagesImageidBadRequest{}
}

/*PatchSitesSiteidImagesImageidBadRequest handles this case with default header values.

Bad Request
*/
type PatchSitesSiteidImagesImageidBadRequest struct {
	Payload *models.Error
}

func (o *PatchSitesSiteidImagesImageidBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /sites/{siteId}/images/{imageId}][%d] patchSitesSiteidImagesImageidBadRequest  %+v", 400, o.Payload)
}

func (o *PatchSitesSiteidImagesImageidBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchSitesSiteidImagesImageidBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSitesSiteidImagesImageidUnauthorized creates a PatchSitesSiteidImagesImageidUnauthorized with default headers values
func NewPatchSitesSiteidImagesImageidUnauthorized() *PatchSitesSiteidImagesImageidUnauthorized {
	return &PatchSitesSiteidImagesImageidUnauthorized{}
}

/*PatchSitesSiteidImagesImageidUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchSitesSiteidImagesImageidUnauthorized struct {
	Payload *models.Error
}

func (o *PatchSitesSiteidImagesImageidUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /sites/{siteId}/images/{imageId}][%d] patchSitesSiteidImagesImageidUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchSitesSiteidImagesImageidUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchSitesSiteidImagesImageidUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSitesSiteidImagesImageidForbidden creates a PatchSitesSiteidImagesImageidForbidden with default headers values
func NewPatchSitesSiteidImagesImageidForbidden() *PatchSitesSiteidImagesImageidForbidden {
	return &PatchSitesSiteidImagesImageidForbidden{}
}

/*PatchSitesSiteidImagesImageidForbidden handles this case with default header values.

Forbidden
*/
type PatchSitesSiteidImagesImageidForbidden struct {
	Payload *models.Error
}

func (o *PatchSitesSiteidImagesImageidForbidden) Error() string {
	return fmt.Sprintf("[PATCH /sites/{siteId}/images/{imageId}][%d] patchSitesSiteidImagesImageidForbidden  %+v", 403, o.Payload)
}

func (o *PatchSitesSiteidImagesImageidForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchSitesSiteidImagesImageidForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSitesSiteidImagesImageidInternalServerError creates a PatchSitesSiteidImagesImageidInternalServerError with default headers values
func NewPatchSitesSiteidImagesImageidInternalServerError() *PatchSitesSiteidImagesImageidInternalServerError {
	return &PatchSitesSiteidImagesImageidInternalServerError{}
}

/*PatchSitesSiteidImagesImageidInternalServerError handles this case with default header values.

Internal Server Error
*/
type PatchSitesSiteidImagesImageidInternalServerError struct {
	Payload *models.Error
}

func (o *PatchSitesSiteidImagesImageidInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /sites/{siteId}/images/{imageId}][%d] patchSitesSiteidImagesImageidInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSitesSiteidImagesImageidInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchSitesSiteidImagesImageidInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
