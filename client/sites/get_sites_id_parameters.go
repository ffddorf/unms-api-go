// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitesIDParams creates a new GetSitesIDParams object
// with the default values initialized.
func NewGetSitesIDParams() *GetSitesIDParams {
	var ()
	return &GetSitesIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitesIDParamsWithTimeout creates a new GetSitesIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitesIDParamsWithTimeout(timeout time.Duration) *GetSitesIDParams {
	var ()
	return &GetSitesIDParams{

		timeout: timeout,
	}
}

// NewGetSitesIDParamsWithContext creates a new GetSitesIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitesIDParamsWithContext(ctx context.Context) *GetSitesIDParams {
	var ()
	return &GetSitesIDParams{

		Context: ctx,
	}
}

// NewGetSitesIDParamsWithHTTPClient creates a new GetSitesIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitesIDParamsWithHTTPClient(client *http.Client) *GetSitesIDParams {
	var ()
	return &GetSitesIDParams{
		HTTPClient: client,
	}
}

/*GetSitesIDParams contains all the parameters to send to the API endpoint
for the get sites Id operation typically these are written to a http.Request
*/
type GetSitesIDParams struct {

	/*ID*/
	ID string
	/*UcrmDetails
	  Include CRM client and service details.

	*/
	UcrmDetails *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sites Id params
func (o *GetSitesIDParams) WithTimeout(timeout time.Duration) *GetSitesIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sites Id params
func (o *GetSitesIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sites Id params
func (o *GetSitesIDParams) WithContext(ctx context.Context) *GetSitesIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sites Id params
func (o *GetSitesIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sites Id params
func (o *GetSitesIDParams) WithHTTPClient(client *http.Client) *GetSitesIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sites Id params
func (o *GetSitesIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get sites Id params
func (o *GetSitesIDParams) WithID(id string) *GetSitesIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get sites Id params
func (o *GetSitesIDParams) SetID(id string) {
	o.ID = id
}

// WithUcrmDetails adds the ucrmDetails to the get sites Id params
func (o *GetSitesIDParams) WithUcrmDetails(ucrmDetails *bool) *GetSitesIDParams {
	o.SetUcrmDetails(ucrmDetails)
	return o
}

// SetUcrmDetails adds the ucrmDetails to the get sites Id params
func (o *GetSitesIDParams) SetUcrmDetails(ucrmDetails *bool) {
	o.UcrmDetails = ucrmDetails
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitesIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.UcrmDetails != nil {

		// query param ucrmDetails
		var qrUcrmDetails bool
		if o.UcrmDetails != nil {
			qrUcrmDetails = *o.UcrmDetails
		}
		qUcrmDetails := swag.FormatBool(qrUcrmDetails)
		if qUcrmDetails != "" {
			if err := r.SetQueryParam("ucrmDetails", qUcrmDetails); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
