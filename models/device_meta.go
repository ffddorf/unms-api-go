// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceMeta device meta
// swagger:model DeviceMeta
type DeviceMeta struct {

	// alias
	// Max Length: 30
	Alias string `json:"alias,omitempty"`

	// Custom IP address in IPv4 or IPv6 format.
	CustomIPAddress string `json:"customIpAddress,omitempty"`

	// failed message decryption
	// Required: true
	FailedMessageDecryption *bool `json:"failedMessageDecryption"`

	// maintenance
	// Required: true
	Maintenance *bool `json:"maintenance"`

	// note
	// Max Length: 300
	Note string `json:"note,omitempty"`

	// restart timestamp
	// Required: true
	// Format: date
	RestartTimestamp *strfmt.Date `json:"restartTimestamp"`
}

// Validate validates this device meta
func (m *DeviceMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedMessageDecryption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceMeta) validateAlias(formats strfmt.Registry) error {

	if swag.IsZero(m.Alias) { // not required
		return nil
	}

	if err := validate.MaxLength("alias", "body", string(m.Alias), 30); err != nil {
		return err
	}

	return nil
}

func (m *DeviceMeta) validateFailedMessageDecryption(formats strfmt.Registry) error {

	if err := validate.Required("failedMessageDecryption", "body", m.FailedMessageDecryption); err != nil {
		return err
	}

	return nil
}

func (m *DeviceMeta) validateMaintenance(formats strfmt.Registry) error {

	if err := validate.Required("maintenance", "body", m.Maintenance); err != nil {
		return err
	}

	return nil
}

func (m *DeviceMeta) validateNote(formats strfmt.Registry) error {

	if swag.IsZero(m.Note) { // not required
		return nil
	}

	if err := validate.MaxLength("note", "body", string(m.Note), 300); err != nil {
		return err
	}

	return nil
}

func (m *DeviceMeta) validateRestartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("restartTimestamp", "body", m.RestartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("restartTimestamp", "body", "date", m.RestartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceMeta) UnmarshalBinary(b []byte) error {
	var res DeviceMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
