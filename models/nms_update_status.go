// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NmsUpdateStatus nms update status
// swagger:model NmsUpdateStatus
type NmsUpdateStatus struct {

	// can nms update
	// Required: true
	CanNmsUpdate *bool `json:"canNmsUpdate"`

	// nms update error
	// Required: true
	NmsUpdateError *NmsUpdateError `json:"nmsUpdateError"`

	// nms update status
	// Required: true
	// Enum: [ready requested updating]
	NmsUpdateStatus *string `json:"nmsUpdateStatus"`
}

// Validate validates this nms update status
func (m *NmsUpdateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanNmsUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNmsUpdateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNmsUpdateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NmsUpdateStatus) validateCanNmsUpdate(formats strfmt.Registry) error {

	if err := validate.Required("canNmsUpdate", "body", m.CanNmsUpdate); err != nil {
		return err
	}

	return nil
}

func (m *NmsUpdateStatus) validateNmsUpdateError(formats strfmt.Registry) error {

	if err := validate.Required("nmsUpdateError", "body", m.NmsUpdateError); err != nil {
		return err
	}

	if m.NmsUpdateError != nil {
		if err := m.NmsUpdateError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nmsUpdateError")
			}
			return err
		}
	}

	return nil
}

var nmsUpdateStatusTypeNmsUpdateStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ready","requested","updating"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nmsUpdateStatusTypeNmsUpdateStatusPropEnum = append(nmsUpdateStatusTypeNmsUpdateStatusPropEnum, v)
	}
}

const (

	// NmsUpdateStatusNmsUpdateStatusReady captures enum value "ready"
	NmsUpdateStatusNmsUpdateStatusReady string = "ready"

	// NmsUpdateStatusNmsUpdateStatusRequested captures enum value "requested"
	NmsUpdateStatusNmsUpdateStatusRequested string = "requested"

	// NmsUpdateStatusNmsUpdateStatusUpdating captures enum value "updating"
	NmsUpdateStatusNmsUpdateStatusUpdating string = "updating"
)

// prop value enum
func (m *NmsUpdateStatus) validateNmsUpdateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nmsUpdateStatusTypeNmsUpdateStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NmsUpdateStatus) validateNmsUpdateStatus(formats strfmt.Registry) error {

	if err := validate.Required("nmsUpdateStatus", "body", m.NmsUpdateStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateNmsUpdateStatusEnum("nmsUpdateStatus", "body", *m.NmsUpdateStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NmsUpdateStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NmsUpdateStatus) UnmarshalBinary(b []byte) error {
	var res NmsUpdateStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
