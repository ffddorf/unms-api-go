// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model44 model 44
// swagger:model Model 44
type Model44 struct {

	// addresses
	Addresses Addresses2 `json:"addresses,omitempty"`

	// index
	// Required: true
	// Minimum: 0
	Index *int64 `json:"index"`

	// mac
	// Pattern: ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
	Mac string `json:"mac,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Enum: [eth sfp+ wlan]
	Type *string `json:"type,omitempty"`
}

// Validate validates this model 44
func (m *Model44) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model44) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	if err := m.Addresses.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("addresses")
		}
		return err
	}

	return nil
}

func (m *Model44) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	if err := validate.MinimumInt("index", "body", int64(*m.Index), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Model44) validateMac(formats strfmt.Registry) error {

	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", string(m.Mac), `^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$`); err != nil {
		return err
	}

	return nil
}

func (m *Model44) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var model44TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eth","sfp+","wlan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model44TypeTypePropEnum = append(model44TypeTypePropEnum, v)
	}
}

const (

	// Model44TypeEth captures enum value "eth"
	Model44TypeEth string = "eth"

	// Model44TypeSfp captures enum value "sfp+"
	Model44TypeSfp string = "sfp+"

	// Model44TypeWlan captures enum value "wlan"
	Model44TypeWlan string = "wlan"
)

// prop value enum
func (m *Model44) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, model44TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Model44) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model44) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model44) UnmarshalBinary(b []byte) error {
	var res Model44
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
