// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Radio1 radio1
// swagger:model radio1
type Radio1 struct {

	// antenna list
	AntennaList AntennaList `json:"antennaList,omitempty"`

	// ccode list
	// Required: true
	CcodeList *float64 `json:"ccodeList"`

	// ccode locked
	// Required: true
	CcodeLocked *float64 `json:"ccodeLocked"`

	// channel width list
	ChannelWidthList ChannelWidthList `json:"channelWidthList,omitempty"`

	// default antenna Id
	// Required: true
	DefaultAntennaID *float64 `json:"defaultAntennaId"`

	// distance limit
	// Required: true
	DistanceLimit *float64 `json:"distanceLimit"`

	// ieee bitmask
	// Required: true
	IeeeBitmask *float64 `json:"ieeeBitmask"`

	// supported bands
	SupportedBands SupportedBands `json:"supportedBands,omitempty"`

	// supported ieee standards
	SupportedIeeeStandards SupportedIeeeStandards `json:"supportedIeeeStandards,omitempty"`

	// supports ap ptmp
	// Required: true
	SupportsApPtmp *bool `json:"supportsApPtmp"`

	// supports ap ptp
	// Required: true
	SupportsApPtp *bool `json:"supportsApPtp"`

	// supports sta ptmp
	// Required: true
	SupportsStaPtmp *bool `json:"supportsStaPtmp"`

	// supports sta ptp
	// Required: true
	SupportsStaPtp *bool `json:"supportsStaPtp"`

	// tx power range
	TxPowerRange *TxPowerRange `json:"txPowerRange,omitempty"`
}

// Validate validates this radio1
func (m *Radio1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAntennaList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcodeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcodeLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidthList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultAntennaID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistanceLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIeeeBitmask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedBands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedIeeeStandards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportsApPtmp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportsApPtp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportsStaPtmp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportsStaPtp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxPowerRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Radio1) validateAntennaList(formats strfmt.Registry) error {

	if swag.IsZero(m.AntennaList) { // not required
		return nil
	}

	if err := m.AntennaList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("antennaList")
		}
		return err
	}

	return nil
}

func (m *Radio1) validateCcodeList(formats strfmt.Registry) error {

	if err := validate.Required("ccodeList", "body", m.CcodeList); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateCcodeLocked(formats strfmt.Registry) error {

	if err := validate.Required("ccodeLocked", "body", m.CcodeLocked); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateChannelWidthList(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelWidthList) { // not required
		return nil
	}

	if err := m.ChannelWidthList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("channelWidthList")
		}
		return err
	}

	return nil
}

func (m *Radio1) validateDefaultAntennaID(formats strfmt.Registry) error {

	if err := validate.Required("defaultAntennaId", "body", m.DefaultAntennaID); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateDistanceLimit(formats strfmt.Registry) error {

	if err := validate.Required("distanceLimit", "body", m.DistanceLimit); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateIeeeBitmask(formats strfmt.Registry) error {

	if err := validate.Required("ieeeBitmask", "body", m.IeeeBitmask); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateSupportedBands(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedBands) { // not required
		return nil
	}

	if err := m.SupportedBands.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supportedBands")
		}
		return err
	}

	return nil
}

func (m *Radio1) validateSupportedIeeeStandards(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedIeeeStandards) { // not required
		return nil
	}

	if err := m.SupportedIeeeStandards.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supportedIeeeStandards")
		}
		return err
	}

	return nil
}

func (m *Radio1) validateSupportsApPtmp(formats strfmt.Registry) error {

	if err := validate.Required("supportsApPtmp", "body", m.SupportsApPtmp); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateSupportsApPtp(formats strfmt.Registry) error {

	if err := validate.Required("supportsApPtp", "body", m.SupportsApPtp); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateSupportsStaPtmp(formats strfmt.Registry) error {

	if err := validate.Required("supportsStaPtmp", "body", m.SupportsStaPtmp); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateSupportsStaPtp(formats strfmt.Registry) error {

	if err := validate.Required("supportsStaPtp", "body", m.SupportsStaPtp); err != nil {
		return err
	}

	return nil
}

func (m *Radio1) validateTxPowerRange(formats strfmt.Registry) error {

	if swag.IsZero(m.TxPowerRange) { // not required
		return nil
	}

	if m.TxPowerRange != nil {
		if err := m.TxPowerRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txPowerRange")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Radio1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Radio1) UnmarshalBinary(b []byte) error {
	var res Radio1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
