// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteEndpointIdentification site endpoint identification
// swagger:model SiteEndpointIdentification
type SiteEndpointIdentification struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// Name of the site.
	// Required: true
	Name *string `json:"name"`

	// Parent siteId.
	// Required: true
	ParentID *string `json:"parentId"`

	// Status of the site.
	// Required: true
	// Enum: [active disconnected inactive]
	Status *string `json:"status"`

	// Whether access to internet is disabled for this site or not.
	// Required: true
	Suspended *bool `json:"suspended"`

	// Type of the site.
	// Required: true
	// Enum: [site endpoint]
	Type *string `json:"type"`

	// Time when the site was last updated.
	// Required: true
	// Format: date
	Updated *strfmt.Date `json:"updated"`
}

// Validate validates this site endpoint identification
func (m *SiteEndpointIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuspended(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteEndpointIdentification) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SiteEndpointIdentification) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SiteEndpointIdentification) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parentId", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

var siteEndpointIdentificationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","disconnected","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteEndpointIdentificationTypeStatusPropEnum = append(siteEndpointIdentificationTypeStatusPropEnum, v)
	}
}

const (

	// SiteEndpointIdentificationStatusActive captures enum value "active"
	SiteEndpointIdentificationStatusActive string = "active"

	// SiteEndpointIdentificationStatusDisconnected captures enum value "disconnected"
	SiteEndpointIdentificationStatusDisconnected string = "disconnected"

	// SiteEndpointIdentificationStatusInactive captures enum value "inactive"
	SiteEndpointIdentificationStatusInactive string = "inactive"
)

// prop value enum
func (m *SiteEndpointIdentification) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteEndpointIdentificationTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteEndpointIdentification) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *SiteEndpointIdentification) validateSuspended(formats strfmt.Registry) error {

	if err := validate.Required("suspended", "body", m.Suspended); err != nil {
		return err
	}

	return nil
}

var siteEndpointIdentificationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["site","endpoint"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteEndpointIdentificationTypeTypePropEnum = append(siteEndpointIdentificationTypeTypePropEnum, v)
	}
}

const (

	// SiteEndpointIdentificationTypeSite captures enum value "site"
	SiteEndpointIdentificationTypeSite string = "site"

	// SiteEndpointIdentificationTypeEndpoint captures enum value "endpoint"
	SiteEndpointIdentificationTypeEndpoint string = "endpoint"
)

// prop value enum
func (m *SiteEndpointIdentification) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteEndpointIdentificationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteEndpointIdentification) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *SiteEndpointIdentification) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("updated", "body", "date", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteEndpointIdentification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteEndpointIdentification) UnmarshalBinary(b []byte) error {
	var res SiteEndpointIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
