// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceInterfaceSchema device interface schema
// swagger:model DeviceInterfaceSchema
type DeviceInterfaceSchema struct {

	// addresses
	Addresses Addresses `json:"addresses,omitempty"`

	// bridge
	Bridge string `json:"bridge,omitempty"`

	// can display statistics
	CanDisplayStatistics bool `json:"canDisplayStatistics,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// identification
	// Required: true
	Identification *InterfaceIdentification `json:"identification"`

	// is switched port
	IsSwitchedPort bool `json:"isSwitchedPort,omitempty"`

	// lag
	Lag string `json:"lag,omitempty"`

	// mtu
	Mtu string `json:"mtu,omitempty"`

	// ospf
	Ospf *InterfaceOspf `json:"ospf,omitempty"`

	// poe
	Poe *InterfacePoe `json:"poe,omitempty"`

	// pppoe
	Pppoe string `json:"pppoe,omitempty"`

	// proxy a r p
	ProxyARP string `json:"proxyARP,omitempty"`

	// sfp
	Sfp string `json:"sfp,omitempty"`

	// speed
	Speed string `json:"speed,omitempty"`

	// statistics
	Statistics *InterfaceStatistics `json:"statistics,omitempty"`

	// status
	Status *InterfaceStatus `json:"status,omitempty"`

	// switch
	Switch string `json:"switch,omitempty"`

	// visible
	Visible bool `json:"visible,omitempty"`

	// vlan
	Vlan string `json:"vlan,omitempty"`

	// wireless
	Wireless *Wireless `json:"wireless,omitempty"`
}

// Validate validates this device interface schema
func (m *DeviceInterfaceSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOspf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWireless(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceInterfaceSchema) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	if err := m.Addresses.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("addresses")
		}
		return err
	}

	return nil
}

func (m *DeviceInterfaceSchema) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *DeviceInterfaceSchema) validateIdentification(formats strfmt.Registry) error {

	if err := validate.Required("identification", "body", m.Identification); err != nil {
		return err
	}

	if m.Identification != nil {
		if err := m.Identification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identification")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceInterfaceSchema) validateOspf(formats strfmt.Registry) error {

	if swag.IsZero(m.Ospf) { // not required
		return nil
	}

	if m.Ospf != nil {
		if err := m.Ospf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ospf")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceInterfaceSchema) validatePoe(formats strfmt.Registry) error {

	if swag.IsZero(m.Poe) { // not required
		return nil
	}

	if m.Poe != nil {
		if err := m.Poe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poe")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceInterfaceSchema) validateStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.Statistics) { // not required
		return nil
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceInterfaceSchema) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceInterfaceSchema) validateWireless(formats strfmt.Registry) error {

	if swag.IsZero(m.Wireless) { // not required
		return nil
	}

	if m.Wireless != nil {
		if err := m.Wireless.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wireless")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceInterfaceSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceInterfaceSchema) UnmarshalBinary(b []byte) error {
	var res DeviceInterfaceSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
