// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceOverview Read-only basic device/client overview attributes.
// swagger:model DeviceOverview
type DeviceOverview struct {

	// antenna
	Antenna *Antenna `json:"antenna,omitempty"`

	// battery capacity
	BatteryCapacity float64 `json:"batteryCapacity,omitempty"`

	// battery time
	BatteryTime float64 `json:"batteryTime,omitempty"`

	// Nullable property in milliamperes.
	BiasCurrent float64 `json:"biasCurrent,omitempty"`

	// TRUE if device can be upgraded.
	CanUpgrade bool `json:"canUpgrade,omitempty"`

	// channel width
	ChannelWidth float64 `json:"channelWidth,omitempty"`

	// Current cpu load.
	CPU float64 `json:"cpu,omitempty"`

	// created at
	// Format: date
	CreatedAt strfmt.Date `json:"createdAt,omitempty"`

	// Nullable property in meters.
	Distance float64 `json:"distance,omitempty"`

	// downlink capacity
	DownlinkCapacity int64 `json:"downlinkCapacity,omitempty"`

	// Nullable prop; current frequency (only for airmax devices).
	Frequency float64 `json:"frequency,omitempty"`

	// TRUE if device is in location mode.
	IsLocateRunning bool `json:"isLocateRunning,omitempty"`

	// Last seen timestamp in ISO format.
	// Format: date
	LastSeen strfmt.Date `json:"lastSeen,omitempty"`

	// link score
	LinkScore *LinkScore `json:"linkScore,omitempty"`

	// power status
	PowerStatus float64 `json:"powerStatus,omitempty"`

	// Current memory usage.
	RAM float64 `json:"ram,omitempty"`

	// TRUE if device is running on battery
	RunningOnBattery bool `json:"runningOnBattery,omitempty"`

	// Nullable prop; current signal level (only for airmax devices), for example -55 dBm.
	Signal float64 `json:"signal,omitempty"`

	// Count of stations (only for airmax and aircube).
	StationsCount float64 `json:"stationsCount,omitempty"`

	// Read-only value generated by UNMS.
	Status string `json:"status,omitempty"`

	// temperature
	Temperature float64 `json:"temperature,omitempty"`

	// theoretical downlink capacity
	TheoreticalDownlinkCapacity int64 `json:"theoreticalDownlinkCapacity,omitempty"`

	// theoretical max downlink capacity
	TheoreticalMaxDownlinkCapacity int64 `json:"theoreticalMaxDownlinkCapacity,omitempty"`

	// theoretical max uplink capacity
	TheoreticalMaxUplinkCapacity int64 `json:"theoreticalMaxUplinkCapacity,omitempty"`

	// theoretical uplink capacity
	TheoreticalUplinkCapacity int64 `json:"theoreticalUplinkCapacity,omitempty"`

	// transmit power
	TransmitPower float64 `json:"transmitPower,omitempty"`

	// uplink capacity
	UplinkCapacity int64 `json:"uplinkCapacity,omitempty"`

	// Uptime in seconds.
	Uptime float64 `json:"uptime,omitempty"`

	// System input voltage in V.
	Voltage float64 `json:"voltage,omitempty"`
}

// Validate validates this device overview
func (m *DeviceOverview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAntenna(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceOverview) validateAntenna(formats strfmt.Registry) error {

	if swag.IsZero(m.Antenna) { // not required
		return nil
	}

	if m.Antenna != nil {
		if err := m.Antenna.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("antenna")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceOverview) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOverview) validateLastSeen(formats strfmt.Registry) error {

	if swag.IsZero(m.LastSeen) { // not required
		return nil
	}

	if err := validate.FormatOf("lastSeen", "body", "date", m.LastSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOverview) validateLinkScore(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkScore) { // not required
		return nil
	}

	if m.LinkScore != nil {
		if err := m.LinkScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkScore")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceOverview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceOverview) UnmarshalBinary(b []byte) error {
	var res DeviceOverview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
