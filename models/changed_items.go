// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChangedItems changed items
// swagger:model ChangedItems
type ChangedItems struct {

	// Server address, null if hostname cannot be resolved.
	Address string `json:"address,omitempty"`

	// deleted sites
	DeletedSites DeletedSitesList `json:"deletedSites,omitempty"`

	// settings
	Settings *NmsSettings `json:"settings,omitempty"`

	// sites
	Sites SitesList `json:"sites,omitempty"`

	// users
	Users UserList `json:"users,omitempty"`
}

// Validate validates this changed items
func (m *ChangedItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeletedSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangedItems) validateDeletedSites(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedSites) { // not required
		return nil
	}

	if err := m.DeletedSites.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deletedSites")
		}
		return err
	}

	return nil
}

func (m *ChangedItems) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *ChangedItems) validateSites(formats strfmt.Registry) error {

	if swag.IsZero(m.Sites) { // not required
		return nil
	}

	if err := m.Sites.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sites")
		}
		return err
	}

	return nil
}

func (m *ChangedItems) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if err := m.Users.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("users")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChangedItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangedItems) UnmarshalBinary(b []byte) error {
	var res ChangedItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
