// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UnmsBackup unms backup
// swagger:model UnmsBackup
type UnmsBackup struct {

	// Flag if the backup is compatible with current UNMS version.
	// Required: true
	Compatible *bool `json:"compatible"`

	// created at
	// Required: true
	// Format: date
	CreatedAt *strfmt.Date `json:"createdAt"`

	// id
	// Required: true
	ID *string `json:"id"`

	// origin
	// Required: true
	// Enum: [auto manual]
	Origin *string `json:"origin"`

	// Size in bytes.
	// Required: true
	Size *int64 `json:"size"`

	// state
	// Required: true
	// Enum: [success in-progress failed]
	State *string `json:"state"`

	// unms version
	// Required: true
	UnmsVersion *UnmsVersion `json:"unmsVersion"`
}

// Validate validates this unms backup
func (m *UnmsBackup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompatible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnmsVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnmsBackup) validateCompatible(formats strfmt.Registry) error {

	if err := validate.Required("compatible", "body", m.Compatible); err != nil {
		return err
	}

	return nil
}

func (m *UnmsBackup) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UnmsBackup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var unmsBackupTypeOriginPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unmsBackupTypeOriginPropEnum = append(unmsBackupTypeOriginPropEnum, v)
	}
}

const (

	// UnmsBackupOriginAuto captures enum value "auto"
	UnmsBackupOriginAuto string = "auto"

	// UnmsBackupOriginManual captures enum value "manual"
	UnmsBackupOriginManual string = "manual"
)

// prop value enum
func (m *UnmsBackup) validateOriginEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, unmsBackupTypeOriginPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UnmsBackup) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", m.Origin); err != nil {
		return err
	}

	// value enum
	if err := m.validateOriginEnum("origin", "body", *m.Origin); err != nil {
		return err
	}

	return nil
}

func (m *UnmsBackup) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

var unmsBackupTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","in-progress","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unmsBackupTypeStatePropEnum = append(unmsBackupTypeStatePropEnum, v)
	}
}

const (

	// UnmsBackupStateSuccess captures enum value "success"
	UnmsBackupStateSuccess string = "success"

	// UnmsBackupStateInProgress captures enum value "in-progress"
	UnmsBackupStateInProgress string = "in-progress"

	// UnmsBackupStateFailed captures enum value "failed"
	UnmsBackupStateFailed string = "failed"
)

// prop value enum
func (m *UnmsBackup) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, unmsBackupTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UnmsBackup) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *UnmsBackup) validateUnmsVersion(formats strfmt.Registry) error {

	if err := validate.Required("unmsVersion", "body", m.UnmsVersion); err != nil {
		return err
	}

	if m.UnmsVersion != nil {
		if err := m.UnmsVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unmsVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnmsBackup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnmsBackup) UnmarshalBinary(b []byte) error {
	var res UnmsBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
