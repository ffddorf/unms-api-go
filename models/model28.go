// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model28 model 28
// swagger:model Model 28
type Model28 struct {

	// interface
	Interface *Interface2 `json:"interface,omitempty"`

	// VLAN mode
	// Required: true
	// Enum: [tagged untagged quiq]
	Mode *string `json:"mode"`
}

// Validate validates this model 28
func (m *Model28) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model28) validateInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.Interface) { // not required
		return nil
	}

	if m.Interface != nil {
		if err := m.Interface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface")
			}
			return err
		}
	}

	return nil
}

var model28TypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tagged","untagged","quiq"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model28TypeModePropEnum = append(model28TypeModePropEnum, v)
	}
}

const (

	// Model28ModeTagged captures enum value "tagged"
	Model28ModeTagged string = "tagged"

	// Model28ModeUntagged captures enum value "untagged"
	Model28ModeUntagged string = "untagged"

	// Model28ModeQuiq captures enum value "quiq"
	Model28ModeQuiq string = "quiq"
)

// prop value enum
func (m *Model28) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, model28TypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Model28) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model28) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model28) UnmarshalBinary(b []byte) error {
	var res Model28
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
