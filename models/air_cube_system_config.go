// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AirCubeSystemConfig air cube system config
// swagger:model AirCubeSystemConfig
type AirCubeSystemConfig struct {

	// device name
	// Required: true
	DeviceName *string `json:"deviceName"`

	// led night mode
	LedNightMode *LedNightMode `json:"ledNightMode,omitempty"`

	// new password
	NewPassword string `json:"newPassword,omitempty"`

	// poe passthrough
	// Required: true
	PoePassthrough *bool `json:"poePassthrough"`

	// reset button enabled
	// Required: true
	ResetButtonEnabled *bool `json:"resetButtonEnabled"`

	// timezone
	// Required: true
	Timezone *string `json:"timezone"`

	// username
	// Required: true
	Username *string `json:"username"`

	// zonename
	// Required: true
	Zonename *string `json:"zonename"`
}

// Validate validates this air cube system config
func (m *AirCubeSystemConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLedNightMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoePassthrough(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResetButtonEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonename(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AirCubeSystemConfig) validateDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("deviceName", "body", m.DeviceName); err != nil {
		return err
	}

	return nil
}

func (m *AirCubeSystemConfig) validateLedNightMode(formats strfmt.Registry) error {

	if swag.IsZero(m.LedNightMode) { // not required
		return nil
	}

	if m.LedNightMode != nil {
		if err := m.LedNightMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ledNightMode")
			}
			return err
		}
	}

	return nil
}

func (m *AirCubeSystemConfig) validatePoePassthrough(formats strfmt.Registry) error {

	if err := validate.Required("poePassthrough", "body", m.PoePassthrough); err != nil {
		return err
	}

	return nil
}

func (m *AirCubeSystemConfig) validateResetButtonEnabled(formats strfmt.Registry) error {

	if err := validate.Required("resetButtonEnabled", "body", m.ResetButtonEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirCubeSystemConfig) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

func (m *AirCubeSystemConfig) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *AirCubeSystemConfig) validateZonename(formats strfmt.Registry) error {

	if err := validate.Required("zonename", "body", m.Zonename); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AirCubeSystemConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AirCubeSystemConfig) UnmarshalBinary(b []byte) error {
	var res AirCubeSystemConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
