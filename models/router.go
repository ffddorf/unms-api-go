// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Router router
// swagger:model router
type Router struct {

	// dhcp lease time
	DhcpLeaseTime float64 `json:"dhcpLeaseTime,omitempty"`

	// dhcp pool end
	DhcpPoolEnd string `json:"dhcpPoolEnd,omitempty"`

	// dhcp pool start
	DhcpPoolStart string `json:"dhcpPoolStart,omitempty"`

	// dhcp relay
	DhcpRelay string `json:"dhcpRelay,omitempty"`

	// dhcp server
	DhcpServer string `json:"dhcpServer,omitempty"`

	// dns proxy enable
	DNSProxyEnable bool `json:"dnsProxyEnable,omitempty"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// nat protocol ftp
	NatProtocolFtp bool `json:"natProtocolFtp,omitempty"`

	// nat protocol pptp
	NatProtocolPptp bool `json:"natProtocolPptp,omitempty"`

	// nat protocol rtsp
	NatProtocolRtsp bool `json:"natProtocolRtsp,omitempty"`

	// nat protocol sip
	NatProtocolSip bool `json:"natProtocolSip,omitempty"`

	// primary Dns
	PrimaryDNS string `json:"primaryDns,omitempty"`

	// secondary Dns
	SecondaryDNS string `json:"secondaryDns,omitempty"`

	// upnp enabled
	UpnpEnabled bool `json:"upnpEnabled,omitempty"`

	// wan access blocked
	WanAccessBlocked bool `json:"wanAccessBlocked,omitempty"`

	// wan mode
	WanMode string `json:"wanMode,omitempty"`

	// wan vlan
	// Maximum: 4063
	// Minimum: 2
	WanVlan float64 `json:"wanVlan,omitempty"`
}

// Validate validates this router
func (m *Router) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWanVlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Router) validateWanVlan(formats strfmt.Registry) error {

	if swag.IsZero(m.WanVlan) { // not required
		return nil
	}

	if err := validate.Minimum("wanVlan", "body", float64(m.WanVlan), 2, false); err != nil {
		return err
	}

	if err := validate.Maximum("wanVlan", "body", float64(m.WanVlan), 4063, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Router) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Router) UnmarshalBinary(b []byte) error {
	var res Router
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
