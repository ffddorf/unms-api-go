// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceModelInfo device model info
// swagger:model DeviceModelInfo
type DeviceModelInfo struct {

	// category
	// Required: true
	// Enum: [device accessories]
	Category *string `json:"category"`

	// icon path
	// Required: true
	IconPath *string `json:"iconPath"`

	// icon Url
	// Required: true
	IconURL *string `json:"iconUrl"`

	// id
	// Required: true
	ID *string `json:"id"`

	// image path
	// Required: true
	ImagePath *string `json:"imagePath"`

	// image Url
	// Required: true
	ImageURL *string `json:"imageUrl"`

	// model
	// Required: true
	Model *string `json:"model"`

	// name
	// Required: true
	Name *string `json:"name"`

	// store Url
	// Required: true
	StoreURL *string `json:"storeUrl"`
}

// Validate validates this device model info
func (m *DeviceModelInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceModelInfoTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["device","accessories"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceModelInfoTypeCategoryPropEnum = append(deviceModelInfoTypeCategoryPropEnum, v)
	}
}

const (

	// DeviceModelInfoCategoryDevice captures enum value "device"
	DeviceModelInfoCategoryDevice string = "device"

	// DeviceModelInfoCategoryAccessories captures enum value "accessories"
	DeviceModelInfoCategoryAccessories string = "accessories"
)

// prop value enum
func (m *DeviceModelInfo) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceModelInfoTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceModelInfo) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *DeviceModelInfo) validateIconPath(formats strfmt.Registry) error {

	if err := validate.Required("iconPath", "body", m.IconPath); err != nil {
		return err
	}

	return nil
}

func (m *DeviceModelInfo) validateIconURL(formats strfmt.Registry) error {

	if err := validate.Required("iconUrl", "body", m.IconURL); err != nil {
		return err
	}

	return nil
}

func (m *DeviceModelInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceModelInfo) validateImagePath(formats strfmt.Registry) error {

	if err := validate.Required("imagePath", "body", m.ImagePath); err != nil {
		return err
	}

	return nil
}

func (m *DeviceModelInfo) validateImageURL(formats strfmt.Registry) error {

	if err := validate.Required("imageUrl", "body", m.ImageURL); err != nil {
		return err
	}

	return nil
}

func (m *DeviceModelInfo) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

func (m *DeviceModelInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeviceModelInfo) validateStoreURL(formats strfmt.Registry) error {

	if err := validate.Required("storeUrl", "body", m.StoreURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceModelInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceModelInfo) UnmarshalBinary(b []byte) error {
	var res DeviceModelInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
