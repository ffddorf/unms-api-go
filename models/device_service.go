// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceService device service
// swagger:model DeviceService
type DeviceService struct {

	// discovery
	Discovery *Discovery1 `json:"discovery,omitempty"`

	// ntp client
	NtpClient *NtpClient `json:"ntpClient,omitempty"`

	// snmp agent
	SnmpAgent *SnmpAgent `json:"snmpAgent,omitempty"`

	// ssh server
	SSHServer *SSHServer `json:"sshServer,omitempty"`

	// system log
	SystemLog *SystemLog `json:"systemLog,omitempty"`

	// telnet server
	TelnetServer *TelnetServer `json:"telnetServer,omitempty"`

	// web server
	WebServer *WebServer `json:"webServer,omitempty"`
}

// Validate validates this device service
func (m *DeviceService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscovery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnmpAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelnetServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceService) validateDiscovery(formats strfmt.Registry) error {

	if swag.IsZero(m.Discovery) { // not required
		return nil
	}

	if m.Discovery != nil {
		if err := m.Discovery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discovery")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateNtpClient(formats strfmt.Registry) error {

	if swag.IsZero(m.NtpClient) { // not required
		return nil
	}

	if m.NtpClient != nil {
		if err := m.NtpClient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntpClient")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateSnmpAgent(formats strfmt.Registry) error {

	if swag.IsZero(m.SnmpAgent) { // not required
		return nil
	}

	if m.SnmpAgent != nil {
		if err := m.SnmpAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snmpAgent")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateSSHServer(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHServer) { // not required
		return nil
	}

	if m.SSHServer != nil {
		if err := m.SSHServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshServer")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateSystemLog(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemLog) { // not required
		return nil
	}

	if m.SystemLog != nil {
		if err := m.SystemLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemLog")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateTelnetServer(formats strfmt.Registry) error {

	if swag.IsZero(m.TelnetServer) { // not required
		return nil
	}

	if m.TelnetServer != nil {
		if err := m.TelnetServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("telnetServer")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateWebServer(formats strfmt.Registry) error {

	if swag.IsZero(m.WebServer) { // not required
		return nil
	}

	if m.WebServer != nil {
		if err := m.WebServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webServer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceService) UnmarshalBinary(b []byte) error {
	var res DeviceService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
