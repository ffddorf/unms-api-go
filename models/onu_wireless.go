// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnuWireless onu wireless
// swagger:model OnuWireless
type OnuWireless struct {

	// Wireless channel, set to 'auto' or number 1-13
	// Required: true
	// Enum: [auto 1 2 3 4 5 6 7 8 9 10 11 12 13]
	Channel *string `json:"channel"`

	// Wireless channel width in MHz
	// Required: true
	// Enum: [20 40]
	ChannelWidth *string `json:"channelWidth"`

	// Country for regulatory domain - ISO 3166-2 alpha code or WO for 'World wide'
	// Required: true
	Country *string `json:"country"`

	// Country list id
	// Required: true
	CountryListID *string `json:"countryListId"`

	// Set to true if wireless is enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// WPA pre-shared key
	// Required: true
	// Max Length: 63
	// Min Length: 8
	Key *string `json:"key"`

	// When false, configuration of wireless part can be done directly from ONU only.
	// Required: true
	Provisioned *bool `json:"provisioned"`

	// Wireless network SSID
	// Required: true
	// Max Length: 32
	// Min Length: 1
	Ssid *string `json:"ssid"`

	// TX power in %
	// Required: true
	// Maximum: 100
	// Minimum: 0
	TxPower *float64 `json:"txPower"`
}

// Validate validates this onu wireless
func (m *OnuWireless) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxPower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var onuWirelessTypeChannelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","1","2","3","4","5","6","7","8","9","10","11","12","13"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onuWirelessTypeChannelPropEnum = append(onuWirelessTypeChannelPropEnum, v)
	}
}

const (

	// OnuWirelessChannelAuto captures enum value "auto"
	OnuWirelessChannelAuto string = "auto"

	// OnuWirelessChannelNr1 captures enum value "1"
	OnuWirelessChannelNr1 string = "1"

	// OnuWirelessChannelNr2 captures enum value "2"
	OnuWirelessChannelNr2 string = "2"

	// OnuWirelessChannelNr3 captures enum value "3"
	OnuWirelessChannelNr3 string = "3"

	// OnuWirelessChannelNr4 captures enum value "4"
	OnuWirelessChannelNr4 string = "4"

	// OnuWirelessChannelNr5 captures enum value "5"
	OnuWirelessChannelNr5 string = "5"

	// OnuWirelessChannelNr6 captures enum value "6"
	OnuWirelessChannelNr6 string = "6"

	// OnuWirelessChannelNr7 captures enum value "7"
	OnuWirelessChannelNr7 string = "7"

	// OnuWirelessChannelNr8 captures enum value "8"
	OnuWirelessChannelNr8 string = "8"

	// OnuWirelessChannelNr9 captures enum value "9"
	OnuWirelessChannelNr9 string = "9"

	// OnuWirelessChannelNr10 captures enum value "10"
	OnuWirelessChannelNr10 string = "10"

	// OnuWirelessChannelNr11 captures enum value "11"
	OnuWirelessChannelNr11 string = "11"

	// OnuWirelessChannelNr12 captures enum value "12"
	OnuWirelessChannelNr12 string = "12"

	// OnuWirelessChannelNr13 captures enum value "13"
	OnuWirelessChannelNr13 string = "13"
)

// prop value enum
func (m *OnuWireless) validateChannelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, onuWirelessTypeChannelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OnuWireless) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("channel", "body", m.Channel); err != nil {
		return err
	}

	// value enum
	if err := m.validateChannelEnum("channel", "body", *m.Channel); err != nil {
		return err
	}

	return nil
}

var onuWirelessTypeChannelWidthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["20","40"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onuWirelessTypeChannelWidthPropEnum = append(onuWirelessTypeChannelWidthPropEnum, v)
	}
}

const (

	// OnuWirelessChannelWidthNr20 captures enum value "20"
	OnuWirelessChannelWidthNr20 string = "20"

	// OnuWirelessChannelWidthNr40 captures enum value "40"
	OnuWirelessChannelWidthNr40 string = "40"
)

// prop value enum
func (m *OnuWireless) validateChannelWidthEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, onuWirelessTypeChannelWidthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OnuWireless) validateChannelWidth(formats strfmt.Registry) error {

	if err := validate.Required("channelWidth", "body", m.ChannelWidth); err != nil {
		return err
	}

	// value enum
	if err := m.validateChannelWidthEnum("channelWidth", "body", *m.ChannelWidth); err != nil {
		return err
	}

	return nil
}

func (m *OnuWireless) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *OnuWireless) validateCountryListID(formats strfmt.Registry) error {

	if err := validate.Required("countryListId", "body", m.CountryListID); err != nil {
		return err
	}

	return nil
}

func (m *OnuWireless) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *OnuWireless) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	if err := validate.MinLength("key", "body", string(*m.Key), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("key", "body", string(*m.Key), 63); err != nil {
		return err
	}

	return nil
}

func (m *OnuWireless) validateProvisioned(formats strfmt.Registry) error {

	if err := validate.Required("provisioned", "body", m.Provisioned); err != nil {
		return err
	}

	return nil
}

func (m *OnuWireless) validateSsid(formats strfmt.Registry) error {

	if err := validate.Required("ssid", "body", m.Ssid); err != nil {
		return err
	}

	if err := validate.MinLength("ssid", "body", string(*m.Ssid), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ssid", "body", string(*m.Ssid), 32); err != nil {
		return err
	}

	return nil
}

func (m *OnuWireless) validateTxPower(formats strfmt.Registry) error {

	if err := validate.Required("txPower", "body", m.TxPower); err != nil {
		return err
	}

	if err := validate.Minimum("txPower", "body", float64(*m.TxPower), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("txPower", "body", float64(*m.TxPower), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnuWireless) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnuWireless) UnmarshalBinary(b []byte) error {
	var res OnuWireless
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
