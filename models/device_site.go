// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceSite device site
// swagger:model DeviceSite
type DeviceSite struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// parent
	Parent string `json:"parent,omitempty"`

	// status
	// Required: true
	// Enum: [active disconnected inactive]
	Status *string `json:"status"`

	// type
	// Required: true
	// Enum: [site endpoint client]
	Type *string `json:"type"`
}

// Validate validates this device site
func (m *DeviceSite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSite) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceSite) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var deviceSiteTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","disconnected","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceSiteTypeStatusPropEnum = append(deviceSiteTypeStatusPropEnum, v)
	}
}

const (

	// DeviceSiteStatusActive captures enum value "active"
	DeviceSiteStatusActive string = "active"

	// DeviceSiteStatusDisconnected captures enum value "disconnected"
	DeviceSiteStatusDisconnected string = "disconnected"

	// DeviceSiteStatusInactive captures enum value "inactive"
	DeviceSiteStatusInactive string = "inactive"
)

// prop value enum
func (m *DeviceSite) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceSiteTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceSite) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var deviceSiteTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["site","endpoint","client"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceSiteTypeTypePropEnum = append(deviceSiteTypeTypePropEnum, v)
	}
}

const (

	// DeviceSiteTypeSite captures enum value "site"
	DeviceSiteTypeSite string = "site"

	// DeviceSiteTypeEndpoint captures enum value "endpoint"
	DeviceSiteTypeEndpoint string = "endpoint"

	// DeviceSiteTypeClient captures enum value "client"
	DeviceSiteTypeClient string = "client"
)

// prop value enum
func (m *DeviceSite) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceSiteTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceSite) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSite) UnmarshalBinary(b []byte) error {
	var res DeviceSite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
