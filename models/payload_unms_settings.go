// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PayloadUnmsSettings payload unms settings
// swagger:model PayloadUnmsSettings
type PayloadUnmsSettings struct {

	// device grace period outage
	// Maximum: 2.592e+09
	// Minimum: 30000
	DeviceGracePeriodOutage float64 `json:"deviceGracePeriodOutage,omitempty"`

	// device ping address
	DevicePingAddress string `json:"devicePingAddress,omitempty"`

	// device ping interval normal
	// Maximum: 200000
	// Minimum: 10000
	DevicePingIntervalNormal float64 `json:"devicePingIntervalNormal,omitempty"`

	// device ping interval outage
	// Maximum: 100000
	// Minimum: 2000
	DevicePingIntervalOutage float64 `json:"devicePingIntervalOutage,omitempty"`

	// device transmission frequency
	// Enum: [minimal low medium high realtime]
	DeviceTransmissionFrequency string `json:"deviceTransmissionFrequency,omitempty"`

	// meta
	Meta *Meta1 `json:"meta,omitempty"`

	// override global
	// Required: true
	OverrideGlobal *bool `json:"overrideGlobal"`
}

// Validate validates this payload unms settings
func (m *PayloadUnmsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceGracePeriodOutage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevicePingIntervalNormal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevicePingIntervalOutage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceTransmissionFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideGlobal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayloadUnmsSettings) validateDeviceGracePeriodOutage(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceGracePeriodOutage) { // not required
		return nil
	}

	if err := validate.Minimum("deviceGracePeriodOutage", "body", float64(m.DeviceGracePeriodOutage), 30000, false); err != nil {
		return err
	}

	if err := validate.Maximum("deviceGracePeriodOutage", "body", float64(m.DeviceGracePeriodOutage), 2.592e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PayloadUnmsSettings) validateDevicePingIntervalNormal(formats strfmt.Registry) error {

	if swag.IsZero(m.DevicePingIntervalNormal) { // not required
		return nil
	}

	if err := validate.Minimum("devicePingIntervalNormal", "body", float64(m.DevicePingIntervalNormal), 10000, false); err != nil {
		return err
	}

	if err := validate.Maximum("devicePingIntervalNormal", "body", float64(m.DevicePingIntervalNormal), 200000, false); err != nil {
		return err
	}

	return nil
}

func (m *PayloadUnmsSettings) validateDevicePingIntervalOutage(formats strfmt.Registry) error {

	if swag.IsZero(m.DevicePingIntervalOutage) { // not required
		return nil
	}

	if err := validate.Minimum("devicePingIntervalOutage", "body", float64(m.DevicePingIntervalOutage), 2000, false); err != nil {
		return err
	}

	if err := validate.Maximum("devicePingIntervalOutage", "body", float64(m.DevicePingIntervalOutage), 100000, false); err != nil {
		return err
	}

	return nil
}

var payloadUnmsSettingsTypeDeviceTransmissionFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		payloadUnmsSettingsTypeDeviceTransmissionFrequencyPropEnum = append(payloadUnmsSettingsTypeDeviceTransmissionFrequencyPropEnum, v)
	}
}

const (

	// PayloadUnmsSettingsDeviceTransmissionFrequencyMinimal captures enum value "minimal"
	PayloadUnmsSettingsDeviceTransmissionFrequencyMinimal string = "minimal"

	// PayloadUnmsSettingsDeviceTransmissionFrequencyLow captures enum value "low"
	PayloadUnmsSettingsDeviceTransmissionFrequencyLow string = "low"

	// PayloadUnmsSettingsDeviceTransmissionFrequencyMedium captures enum value "medium"
	PayloadUnmsSettingsDeviceTransmissionFrequencyMedium string = "medium"

	// PayloadUnmsSettingsDeviceTransmissionFrequencyHigh captures enum value "high"
	PayloadUnmsSettingsDeviceTransmissionFrequencyHigh string = "high"

	// PayloadUnmsSettingsDeviceTransmissionFrequencyRealtime captures enum value "realtime"
	PayloadUnmsSettingsDeviceTransmissionFrequencyRealtime string = "realtime"
)

// prop value enum
func (m *PayloadUnmsSettings) validateDeviceTransmissionFrequencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, payloadUnmsSettingsTypeDeviceTransmissionFrequencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PayloadUnmsSettings) validateDeviceTransmissionFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceTransmissionFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceTransmissionFrequencyEnum("deviceTransmissionFrequency", "body", m.DeviceTransmissionFrequency); err != nil {
		return err
	}

	return nil
}

func (m *PayloadUnmsSettings) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *PayloadUnmsSettings) validateOverrideGlobal(formats strfmt.Registry) error {

	if err := validate.Required("overrideGlobal", "body", m.OverrideGlobal); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PayloadUnmsSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PayloadUnmsSettings) UnmarshalBinary(b []byte) error {
	var res PayloadUnmsSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
