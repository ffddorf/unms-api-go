// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceOutage device outage
// swagger:model DeviceOutage
type DeviceOutage struct {

	// Device is added to UNMS
	// Required: true
	Authorized *bool `json:"authorized"`

	// category
	// Required: true
	// Enum: [optical wired wireless accessories]
	Category *string `json:"category"`

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// firmware version
	// Required: true
	FirmwareVersion *string `json:"firmwareVersion"`

	// Technical ID only for UNMS
	// Required: true
	ID *string `json:"id"`

	// ip
	// Required: true
	IP *string `json:"ip"`

	// Available only for clients (ONU)
	// Required: true
	Mac *string `json:"mac"`

	// model
	// Required: true
	Model *string `json:"model"`

	// model name
	// Required: true
	ModelName *string `json:"modelName"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform Id
	// Required: true
	PlatformID *string `json:"platformId"`

	// platform name
	// Required: true
	PlatformName *string `json:"platformName"`

	// role
	// Required: true
	// Enum: [router switch gpon ap station other ups server wireless convertor gateway]
	Role *string `json:"role"`

	// serial number
	// Required: true
	SerialNumber *string `json:"serialNumber"`

	// site
	Site *Site1 `json:"site,omitempty"`

	// type
	// Required: true
	// Enum: [onu olt erouter eswitch epower airCube airMax airFiber toughSwitch solarBeam blackBox]
	Type *string `json:"type"`
}

// Validate validates this device outage
func (m *DeviceOutage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwareVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceOutage) validateAuthorized(formats strfmt.Registry) error {

	if err := validate.Required("authorized", "body", m.Authorized); err != nil {
		return err
	}

	return nil
}

var deviceOutageTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["optical","wired","wireless","accessories"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceOutageTypeCategoryPropEnum = append(deviceOutageTypeCategoryPropEnum, v)
	}
}

const (

	// DeviceOutageCategoryOptical captures enum value "optical"
	DeviceOutageCategoryOptical string = "optical"

	// DeviceOutageCategoryWired captures enum value "wired"
	DeviceOutageCategoryWired string = "wired"

	// DeviceOutageCategoryWireless captures enum value "wireless"
	DeviceOutageCategoryWireless string = "wireless"

	// DeviceOutageCategoryAccessories captures enum value "accessories"
	DeviceOutageCategoryAccessories string = "accessories"
)

// prop value enum
func (m *DeviceOutage) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceOutageTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceOutage) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateFirmwareVersion(formats strfmt.Registry) error {

	if err := validate.Required("firmwareVersion", "body", m.FirmwareVersion); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateModelName(formats strfmt.Registry) error {

	if err := validate.Required("modelName", "body", m.ModelName); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("platformId", "body", m.PlatformID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validatePlatformName(formats strfmt.Registry) error {

	if err := validate.Required("platformName", "body", m.PlatformName); err != nil {
		return err
	}

	return nil
}

var deviceOutageTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceOutageTypeRolePropEnum = append(deviceOutageTypeRolePropEnum, v)
	}
}

const (

	// DeviceOutageRoleRouter captures enum value "router"
	DeviceOutageRoleRouter string = "router"

	// DeviceOutageRoleSwitch captures enum value "switch"
	DeviceOutageRoleSwitch string = "switch"

	// DeviceOutageRoleGpon captures enum value "gpon"
	DeviceOutageRoleGpon string = "gpon"

	// DeviceOutageRoleAp captures enum value "ap"
	DeviceOutageRoleAp string = "ap"

	// DeviceOutageRoleStation captures enum value "station"
	DeviceOutageRoleStation string = "station"

	// DeviceOutageRoleOther captures enum value "other"
	DeviceOutageRoleOther string = "other"

	// DeviceOutageRoleUps captures enum value "ups"
	DeviceOutageRoleUps string = "ups"

	// DeviceOutageRoleServer captures enum value "server"
	DeviceOutageRoleServer string = "server"

	// DeviceOutageRoleWireless captures enum value "wireless"
	DeviceOutageRoleWireless string = "wireless"

	// DeviceOutageRoleConvertor captures enum value "convertor"
	DeviceOutageRoleConvertor string = "convertor"

	// DeviceOutageRoleGateway captures enum value "gateway"
	DeviceOutageRoleGateway string = "gateway"
)

// prop value enum
func (m *DeviceOutage) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceOutageTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceOutage) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateSerialNumber(formats strfmt.Registry) error {

	if err := validate.Required("serialNumber", "body", m.SerialNumber); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOutage) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

var deviceOutageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["onu","olt","erouter","eswitch","epower","airCube","airMax","airFiber","toughSwitch","solarBeam","blackBox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceOutageTypeTypePropEnum = append(deviceOutageTypeTypePropEnum, v)
	}
}

const (

	// DeviceOutageTypeOnu captures enum value "onu"
	DeviceOutageTypeOnu string = "onu"

	// DeviceOutageTypeOlt captures enum value "olt"
	DeviceOutageTypeOlt string = "olt"

	// DeviceOutageTypeErouter captures enum value "erouter"
	DeviceOutageTypeErouter string = "erouter"

	// DeviceOutageTypeEswitch captures enum value "eswitch"
	DeviceOutageTypeEswitch string = "eswitch"

	// DeviceOutageTypeEpower captures enum value "epower"
	DeviceOutageTypeEpower string = "epower"

	// DeviceOutageTypeAirCube captures enum value "airCube"
	DeviceOutageTypeAirCube string = "airCube"

	// DeviceOutageTypeAirMax captures enum value "airMax"
	DeviceOutageTypeAirMax string = "airMax"

	// DeviceOutageTypeAirFiber captures enum value "airFiber"
	DeviceOutageTypeAirFiber string = "airFiber"

	// DeviceOutageTypeToughSwitch captures enum value "toughSwitch"
	DeviceOutageTypeToughSwitch string = "toughSwitch"

	// DeviceOutageTypeSolarBeam captures enum value "solarBeam"
	DeviceOutageTypeSolarBeam string = "solarBeam"

	// DeviceOutageTypeBlackBox captures enum value "blackBox"
	DeviceOutageTypeBlackBox string = "blackBox"
)

// prop value enum
func (m *DeviceOutage) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceOutageTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceOutage) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceOutage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceOutage) UnmarshalBinary(b []byte) error {
	var res DeviceOutage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
