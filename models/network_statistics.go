// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkStatistics network statistics
// swagger:model NetworkStatistics
type NetworkStatistics struct {

	// all clients
	AllClients AllClients `json:"allClients,omitempty"`

	// all sites
	AllSites AllSites `json:"allSites,omitempty"`

	// interval
	Interval *NetworkStatisticInterval `json:"interval,omitempty"`

	// live clients
	LiveClients LiveClients `json:"liveClients,omitempty"`

	// live sites
	LiveSites LiveSites `json:"liveSites,omitempty"`

	// network health
	NetworkHealth NetworkHealth `json:"networkHealth,omitempty"`

	// period
	Period int64 `json:"period,omitempty"`
}

// Validate validates this network statistics
func (m *NetworkStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiveClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiveSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkHealth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkStatistics) validateAllClients(formats strfmt.Registry) error {

	if swag.IsZero(m.AllClients) { // not required
		return nil
	}

	if err := m.AllClients.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("allClients")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateAllSites(formats strfmt.Registry) error {

	if swag.IsZero(m.AllSites) { // not required
		return nil
	}

	if err := m.AllSites.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("allSites")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if m.Interval != nil {
		if err := m.Interval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interval")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkStatistics) validateLiveClients(formats strfmt.Registry) error {

	if swag.IsZero(m.LiveClients) { // not required
		return nil
	}

	if err := m.LiveClients.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("liveClients")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateLiveSites(formats strfmt.Registry) error {

	if swag.IsZero(m.LiveSites) { // not required
		return nil
	}

	if err := m.LiveSites.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("liveSites")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateNetworkHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkHealth) { // not required
		return nil
	}

	if err := m.NetworkHealth.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkHealth")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkStatistics) UnmarshalBinary(b []byte) error {
	var res NetworkStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
