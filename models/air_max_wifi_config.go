// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AirMaxWifiConfig air max wifi config
// swagger:model AirMaxWifiConfig
type AirMaxWifiConfig struct {

	// ack distance
	// Required: true
	AckDistance *float64 `json:"ackDistance"`

	// ack timeout
	// Required: true
	AckTimeout *float64 `json:"ackTimeout"`

	// aggregation frames
	// Required: true
	AggregationFrames *float64 `json:"aggregationFrames"`

	// allowed frequencies
	// Required: true
	AllowedFrequencies AllowedFrequencies `json:"allowedFrequencies"`

	// amsdu enabled
	// Required: true
	AmsduEnabled *bool `json:"amsduEnabled"`

	// antenna gain
	// Required: true
	AntennaGain *float64 `json:"antennaGain"`

	// antenna Id
	// Required: true
	AntennaID *float64 `json:"antennaId"`

	// MAC address
	// Required: true
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	ApMac *string `json:"apMac"`

	// atpc enabled
	// Required: true
	AtpcEnabled *bool `json:"atpcEnabled"`

	// atpc threshold
	// Required: true
	AtpcThreshold *float64 `json:"atpcThreshold"`

	// band
	// Required: true
	// Enum: [A G]
	Band *string `json:"band"`

	// board info
	BoardInfo *BoardInfo `json:"boardInfo,omitempty"`

	// cable loss
	// Required: true
	CableLoss *float64 `json:"cableLoss"`

	// center frequency
	// Required: true
	CenterFrequency *float64 `json:"centerFrequency"`

	// channel width
	// Required: true
	ChannelWidth *float64 `json:"channelWidth"`

	// control frequency
	// Required: true
	ControlFrequency *float64 `json:"controlFrequency"`

	// country code
	// Required: true
	CountryCode *float64 `json:"countryCode"`

	// de auth protection status enabled
	// Required: true
	DeAuthProtectionStatusEnabled *bool `json:"deAuthProtectionStatusEnabled"`

	// dev name
	// Required: true
	DevName *string `json:"devName"`

	// distance scale
	// Required: true
	DistanceScale *float64 `json:"distanceScale"`

	// duty cycle
	// Required: true
	DutyCycle *float64 `json:"dutyCycle"`

	// extension channel
	// Required: true
	// Enum: [plus minus]
	ExtensionChannel *string `json:"extensionChannel"`

	// frame period
	// Required: true
	FramePeriod *float64 `json:"framePeriod"`

	// hide ssid
	// Required: true
	HideSsid *bool `json:"hideSsid"`

	// ieee mode string
	// Required: true
	IeeeModeString *string `json:"ieeeModeString"`

	// is a c k auto distance enabled
	// Required: true
	IsACKAutoDistanceEnabled *bool `json:"isACKAutoDistanceEnabled"`

	// is add mtik enabled
	// Required: true
	IsAddMtikEnabled *bool `json:"isAddMtikEnabled"`

	// is auto channel width enabled
	// Required: true
	IsAutoChannelWidthEnabled *bool `json:"isAutoChannelWidthEnabled"`

	// is auto e i r p limit enabled
	// Required: true
	IsAutoEIRPLimitEnabled *bool `json:"isAutoEIRPLimitEnabled"`

	// is auto t x rate enabled
	// Required: true
	IsAutoTXRateEnabled *bool `json:"isAutoTXRateEnabled"`

	// is isolation enabled
	// Required: true
	IsIsolationEnabled *bool `json:"isIsolationEnabled"`

	// is multicast enhance enabled
	// Required: true
	IsMulticastEnhanceEnabled *bool `json:"isMulticastEnhanceEnabled"`

	// is rx gain auto enabled
	// Required: true
	IsRxGainAutoEnabled *bool `json:"isRxGainAutoEnabled"`

	// is w d s enabled
	// Required: true
	IsWDSEnabled *bool `json:"isWDSEnabled"`

	// led thresholds config
	LedThresholdsConfig LedThresholdsConfig `json:"ledThresholdsConfig,omitempty"`

	// mac ACL config
	MacACLConfig *MacACLConfig `json:"macACLConfig,omitempty"`

	// mode
	// Required: true
	// Enum: [ap ap-ptp ap-ptmp ap-ptmp-airmax ap-ptmp-airmax-mixed ap-ptmp-airmax-ac sta sta-ptp sta-ptmp aprepeater repeater mesh]
	Mode *string `json:"mode"`

	// polling priority
	// Required: true
	PollingPriority *float64 `json:"pollingPriority"`

	// regulatory domain bands
	RegulatoryDomainBands RegulatoryDomainBands `json:"regulatoryDomainBands,omitempty"`

	// regulatory domain channels
	RegulatoryDomainChannels RegulatoryDomainChannels `json:"regulatoryDomainChannels,omitempty"`

	// rx gain
	// Required: true
	RxGain *float64 `json:"rxGain"`

	// rx target power
	// Required: true
	RxTargetPower *float64 `json:"rxTargetPower"`

	// security config
	SecurityConfig *SecurityConfig `json:"securityConfig,omitempty"`

	// sensitivity threshold
	// Required: true
	SensitivityThreshold *float64 `json:"sensitivityThreshold"`

	// sensitivity threshold enabled
	// Required: true
	SensitivityThresholdEnabled *bool `json:"sensitivityThresholdEnabled"`

	// ssid
	// Required: true
	Ssid *string `json:"ssid"`

	// sync mode
	// Required: true
	// Enum: [1 2]
	SyncMode *float64 `json:"syncMode"`

	// tdd framing
	// Required: true
	TddFraming *TddFraming `json:"tddFraming"`

	// tdma filter
	// Required: true
	TdmaFilter *float64 `json:"tdmaFilter"`

	// tx power
	// Required: true
	TxPower *float64 `json:"txPower"`

	// tx power max
	// Required: true
	TxPowerMax *float64 `json:"txPowerMax"`

	// tx rate
	// Required: true
	TxRate *float64 `json:"txRate"`

	// tx rate mode
	// Required: true
	TxRateMode *float64 `json:"txRateMode"`
}

// Validate validates this air max wifi config
func (m *AirMaxWifiConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAckDistance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAckTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregationFrames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowedFrequencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmsduEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAntennaGain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAntennaID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtpcEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtpcThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoardInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCableLoss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCenterFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeAuthProtectionStatusEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistanceScale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDutyCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFramePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHideSsid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIeeeModeString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsACKAutoDistanceEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAddMtikEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAutoChannelWidthEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAutoEIRPLimitEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAutoTXRateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsIsolationEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsMulticastEnhanceEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRxGainAutoEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsWDSEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacACLConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePollingPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegulatoryDomainBands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegulatoryDomainChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRxGain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRxTargetPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensitivityThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensitivityThresholdEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTddFraming(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTdmaFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxPowerMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxRateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AirMaxWifiConfig) validateAckDistance(formats strfmt.Registry) error {

	if err := validate.Required("ackDistance", "body", m.AckDistance); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateAckTimeout(formats strfmt.Registry) error {

	if err := validate.Required("ackTimeout", "body", m.AckTimeout); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateAggregationFrames(formats strfmt.Registry) error {

	if err := validate.Required("aggregationFrames", "body", m.AggregationFrames); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateAllowedFrequencies(formats strfmt.Registry) error {

	if err := validate.Required("allowedFrequencies", "body", m.AllowedFrequencies); err != nil {
		return err
	}

	if err := m.AllowedFrequencies.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("allowedFrequencies")
		}
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateAmsduEnabled(formats strfmt.Registry) error {

	if err := validate.Required("amsduEnabled", "body", m.AmsduEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateAntennaGain(formats strfmt.Registry) error {

	if err := validate.Required("antennaGain", "body", m.AntennaGain); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateAntennaID(formats strfmt.Registry) error {

	if err := validate.Required("antennaId", "body", m.AntennaID); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateApMac(formats strfmt.Registry) error {

	if err := validate.Required("apMac", "body", m.ApMac); err != nil {
		return err
	}

	if err := validate.Pattern("apMac", "body", string(*m.ApMac), `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateAtpcEnabled(formats strfmt.Registry) error {

	if err := validate.Required("atpcEnabled", "body", m.AtpcEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateAtpcThreshold(formats strfmt.Registry) error {

	if err := validate.Required("atpcThreshold", "body", m.AtpcThreshold); err != nil {
		return err
	}

	return nil
}

var airMaxWifiConfigTypeBandPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A","G"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airMaxWifiConfigTypeBandPropEnum = append(airMaxWifiConfigTypeBandPropEnum, v)
	}
}

const (

	// AirMaxWifiConfigBandA captures enum value "A"
	AirMaxWifiConfigBandA string = "A"

	// AirMaxWifiConfigBandG captures enum value "G"
	AirMaxWifiConfigBandG string = "G"
)

// prop value enum
func (m *AirMaxWifiConfig) validateBandEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airMaxWifiConfigTypeBandPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AirMaxWifiConfig) validateBand(formats strfmt.Registry) error {

	if err := validate.Required("band", "body", m.Band); err != nil {
		return err
	}

	// value enum
	if err := m.validateBandEnum("band", "body", *m.Band); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateBoardInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.BoardInfo) { // not required
		return nil
	}

	if m.BoardInfo != nil {
		if err := m.BoardInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boardInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AirMaxWifiConfig) validateCableLoss(formats strfmt.Registry) error {

	if err := validate.Required("cableLoss", "body", m.CableLoss); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateCenterFrequency(formats strfmt.Registry) error {

	if err := validate.Required("centerFrequency", "body", m.CenterFrequency); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateChannelWidth(formats strfmt.Registry) error {

	if err := validate.Required("channelWidth", "body", m.ChannelWidth); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateControlFrequency(formats strfmt.Registry) error {

	if err := validate.Required("controlFrequency", "body", m.ControlFrequency); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateDeAuthProtectionStatusEnabled(formats strfmt.Registry) error {

	if err := validate.Required("deAuthProtectionStatusEnabled", "body", m.DeAuthProtectionStatusEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateDevName(formats strfmt.Registry) error {

	if err := validate.Required("devName", "body", m.DevName); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateDistanceScale(formats strfmt.Registry) error {

	if err := validate.Required("distanceScale", "body", m.DistanceScale); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateDutyCycle(formats strfmt.Registry) error {

	if err := validate.Required("dutyCycle", "body", m.DutyCycle); err != nil {
		return err
	}

	return nil
}

var airMaxWifiConfigTypeExtensionChannelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["plus","minus"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airMaxWifiConfigTypeExtensionChannelPropEnum = append(airMaxWifiConfigTypeExtensionChannelPropEnum, v)
	}
}

const (

	// AirMaxWifiConfigExtensionChannelPlus captures enum value "plus"
	AirMaxWifiConfigExtensionChannelPlus string = "plus"

	// AirMaxWifiConfigExtensionChannelMinus captures enum value "minus"
	AirMaxWifiConfigExtensionChannelMinus string = "minus"
)

// prop value enum
func (m *AirMaxWifiConfig) validateExtensionChannelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airMaxWifiConfigTypeExtensionChannelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AirMaxWifiConfig) validateExtensionChannel(formats strfmt.Registry) error {

	if err := validate.Required("extensionChannel", "body", m.ExtensionChannel); err != nil {
		return err
	}

	// value enum
	if err := m.validateExtensionChannelEnum("extensionChannel", "body", *m.ExtensionChannel); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateFramePeriod(formats strfmt.Registry) error {

	if err := validate.Required("framePeriod", "body", m.FramePeriod); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateHideSsid(formats strfmt.Registry) error {

	if err := validate.Required("hideSsid", "body", m.HideSsid); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIeeeModeString(formats strfmt.Registry) error {

	if err := validate.Required("ieeeModeString", "body", m.IeeeModeString); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsACKAutoDistanceEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isACKAutoDistanceEnabled", "body", m.IsACKAutoDistanceEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsAddMtikEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isAddMtikEnabled", "body", m.IsAddMtikEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsAutoChannelWidthEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isAutoChannelWidthEnabled", "body", m.IsAutoChannelWidthEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsAutoEIRPLimitEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isAutoEIRPLimitEnabled", "body", m.IsAutoEIRPLimitEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsAutoTXRateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isAutoTXRateEnabled", "body", m.IsAutoTXRateEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsIsolationEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isIsolationEnabled", "body", m.IsIsolationEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsMulticastEnhanceEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isMulticastEnhanceEnabled", "body", m.IsMulticastEnhanceEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsRxGainAutoEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isRxGainAutoEnabled", "body", m.IsRxGainAutoEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateIsWDSEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isWDSEnabled", "body", m.IsWDSEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateMacACLConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.MacACLConfig) { // not required
		return nil
	}

	if m.MacACLConfig != nil {
		if err := m.MacACLConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("macACLConfig")
			}
			return err
		}
	}

	return nil
}

var airMaxWifiConfigTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airMaxWifiConfigTypeModePropEnum = append(airMaxWifiConfigTypeModePropEnum, v)
	}
}

const (

	// AirMaxWifiConfigModeAp captures enum value "ap"
	AirMaxWifiConfigModeAp string = "ap"

	// AirMaxWifiConfigModeApPtp captures enum value "ap-ptp"
	AirMaxWifiConfigModeApPtp string = "ap-ptp"

	// AirMaxWifiConfigModeApPtmp captures enum value "ap-ptmp"
	AirMaxWifiConfigModeApPtmp string = "ap-ptmp"

	// AirMaxWifiConfigModeApPtmpAirmax captures enum value "ap-ptmp-airmax"
	AirMaxWifiConfigModeApPtmpAirmax string = "ap-ptmp-airmax"

	// AirMaxWifiConfigModeApPtmpAirmaxMixed captures enum value "ap-ptmp-airmax-mixed"
	AirMaxWifiConfigModeApPtmpAirmaxMixed string = "ap-ptmp-airmax-mixed"

	// AirMaxWifiConfigModeApPtmpAirmaxAc captures enum value "ap-ptmp-airmax-ac"
	AirMaxWifiConfigModeApPtmpAirmaxAc string = "ap-ptmp-airmax-ac"

	// AirMaxWifiConfigModeSta captures enum value "sta"
	AirMaxWifiConfigModeSta string = "sta"

	// AirMaxWifiConfigModeStaPtp captures enum value "sta-ptp"
	AirMaxWifiConfigModeStaPtp string = "sta-ptp"

	// AirMaxWifiConfigModeStaPtmp captures enum value "sta-ptmp"
	AirMaxWifiConfigModeStaPtmp string = "sta-ptmp"

	// AirMaxWifiConfigModeAprepeater captures enum value "aprepeater"
	AirMaxWifiConfigModeAprepeater string = "aprepeater"

	// AirMaxWifiConfigModeRepeater captures enum value "repeater"
	AirMaxWifiConfigModeRepeater string = "repeater"

	// AirMaxWifiConfigModeMesh captures enum value "mesh"
	AirMaxWifiConfigModeMesh string = "mesh"
)

// prop value enum
func (m *AirMaxWifiConfig) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airMaxWifiConfigTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AirMaxWifiConfig) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validatePollingPriority(formats strfmt.Registry) error {

	if err := validate.Required("pollingPriority", "body", m.PollingPriority); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateRegulatoryDomainBands(formats strfmt.Registry) error {

	if swag.IsZero(m.RegulatoryDomainBands) { // not required
		return nil
	}

	if err := m.RegulatoryDomainBands.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("regulatoryDomainBands")
		}
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateRegulatoryDomainChannels(formats strfmt.Registry) error {

	if swag.IsZero(m.RegulatoryDomainChannels) { // not required
		return nil
	}

	if err := m.RegulatoryDomainChannels.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("regulatoryDomainChannels")
		}
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateRxGain(formats strfmt.Registry) error {

	if err := validate.Required("rxGain", "body", m.RxGain); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateRxTargetPower(formats strfmt.Registry) error {

	if err := validate.Required("rxTargetPower", "body", m.RxTargetPower); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateSecurityConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityConfig) { // not required
		return nil
	}

	if m.SecurityConfig != nil {
		if err := m.SecurityConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AirMaxWifiConfig) validateSensitivityThreshold(formats strfmt.Registry) error {

	if err := validate.Required("sensitivityThreshold", "body", m.SensitivityThreshold); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateSensitivityThresholdEnabled(formats strfmt.Registry) error {

	if err := validate.Required("sensitivityThresholdEnabled", "body", m.SensitivityThresholdEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateSsid(formats strfmt.Registry) error {

	if err := validate.Required("ssid", "body", m.Ssid); err != nil {
		return err
	}

	return nil
}

var airMaxWifiConfigTypeSyncModePropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airMaxWifiConfigTypeSyncModePropEnum = append(airMaxWifiConfigTypeSyncModePropEnum, v)
	}
}

// prop value enum
func (m *AirMaxWifiConfig) validateSyncModeEnum(path, location string, value float64) error {
	if err := validate.Enum(path, location, value, airMaxWifiConfigTypeSyncModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AirMaxWifiConfig) validateSyncMode(formats strfmt.Registry) error {

	if err := validate.Required("syncMode", "body", m.SyncMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateSyncModeEnum("syncMode", "body", *m.SyncMode); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateTddFraming(formats strfmt.Registry) error {

	if err := validate.Required("tddFraming", "body", m.TddFraming); err != nil {
		return err
	}

	if m.TddFraming != nil {
		if err := m.TddFraming.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tddFraming")
			}
			return err
		}
	}

	return nil
}

func (m *AirMaxWifiConfig) validateTdmaFilter(formats strfmt.Registry) error {

	if err := validate.Required("tdmaFilter", "body", m.TdmaFilter); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateTxPower(formats strfmt.Registry) error {

	if err := validate.Required("txPower", "body", m.TxPower); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateTxPowerMax(formats strfmt.Registry) error {

	if err := validate.Required("txPowerMax", "body", m.TxPowerMax); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateTxRate(formats strfmt.Registry) error {

	if err := validate.Required("txRate", "body", m.TxRate); err != nil {
		return err
	}

	return nil
}

func (m *AirMaxWifiConfig) validateTxRateMode(formats strfmt.Registry) error {

	if err := validate.Required("txRateMode", "body", m.TxRateMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AirMaxWifiConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AirMaxWifiConfig) UnmarshalBinary(b []byte) error {
	var res AirMaxWifiConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
