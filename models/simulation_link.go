// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimulationLink simulation link
// swagger:model SimulationLink
type SimulationLink struct {

	// ap device Id
	// Required: true
	ApDeviceID *string `json:"apDeviceId"`

	// cpe device Id
	// Required: true
	CpeDeviceID *string `json:"cpeDeviceId"`

	// created at
	// Required: true
	// Format: date
	CreatedAt *strfmt.Date `json:"createdAt"`

	// id
	// Required: true
	ID *string `json:"id"`

	// quality
	// Required: true
	// Max Length: 200
	Quality *string `json:"quality"`

	// terrain
	// Required: true
	Terrain *Terrain `json:"terrain"`

	// updated at
	// Required: true
	// Format: date
	UpdatedAt *strfmt.Date `json:"updatedAt"`
}

// Validate validates this simulation link
func (m *SimulationLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpeDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulationLink) validateApDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("apDeviceId", "body", m.ApDeviceID); err != nil {
		return err
	}

	return nil
}

func (m *SimulationLink) validateCpeDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("cpeDeviceId", "body", m.CpeDeviceID); err != nil {
		return err
	}

	return nil
}

func (m *SimulationLink) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SimulationLink) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SimulationLink) validateQuality(formats strfmt.Registry) error {

	if err := validate.Required("quality", "body", m.Quality); err != nil {
		return err
	}

	if err := validate.MaxLength("quality", "body", string(*m.Quality), 200); err != nil {
		return err
	}

	return nil
}

func (m *SimulationLink) validateTerrain(formats strfmt.Registry) error {

	if err := validate.Required("terrain", "body", m.Terrain); err != nil {
		return err
	}

	if m.Terrain != nil {
		if err := m.Terrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terrain")
			}
			return err
		}
	}

	return nil
}

func (m *SimulationLink) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimulationLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimulationLink) UnmarshalBinary(b []byte) error {
	var res SimulationLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
