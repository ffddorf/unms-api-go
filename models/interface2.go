// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Interface2 interface 2
// swagger:model interface 2
type Interface2 struct {

	// Interface name (non-changeable)
	// Required: true
	ID *string `json:"id"`

	// MAC address of the interface
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac string `json:"mac,omitempty"`

	// Interface custom description
	Name string `json:"name,omitempty"`

	// Interface type
	// Enum: [ethernet switch port pon bridge pppoe vlan wireless lag]
	Type string `json:"type,omitempty"`
}

// Validate validates this interface 2
func (m *Interface2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Interface2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Interface2) validateMac(formats strfmt.Registry) error {

	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", string(m.Mac), `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

var interface2TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ethernet","switch","port","pon","bridge","pppoe","vlan","wireless","lag"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interface2TypeTypePropEnum = append(interface2TypeTypePropEnum, v)
	}
}

const (

	// Interface2TypeEthernet captures enum value "ethernet"
	Interface2TypeEthernet string = "ethernet"

	// Interface2TypeSwitch captures enum value "switch"
	Interface2TypeSwitch string = "switch"

	// Interface2TypePort captures enum value "port"
	Interface2TypePort string = "port"

	// Interface2TypePon captures enum value "pon"
	Interface2TypePon string = "pon"

	// Interface2TypeBridge captures enum value "bridge"
	Interface2TypeBridge string = "bridge"

	// Interface2TypePppoe captures enum value "pppoe"
	Interface2TypePppoe string = "pppoe"

	// Interface2TypeVlan captures enum value "vlan"
	Interface2TypeVlan string = "vlan"

	// Interface2TypeWireless captures enum value "wireless"
	Interface2TypeWireless string = "wireless"

	// Interface2TypeLag captures enum value "lag"
	Interface2TypeLag string = "lag"
)

// prop value enum
func (m *Interface2) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, interface2TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Interface2) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Interface2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Interface2) UnmarshalBinary(b []byte) error {
	var res Interface2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
