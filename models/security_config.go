// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfig security config
// swagger:model securityConfig
type SecurityConfig struct {

	// accounting server IP
	// Required: true
	AccountingServerIP *string `json:"accountingServerIP"`

	// accounting server port
	// Required: true
	AccountingServerPort *float64 `json:"accountingServerPort"`

	// accounting server secret
	// Required: true
	AccountingServerSecret *string `json:"accountingServerSecret"`

	// auth server IP
	// Required: true
	AuthServerIP *string `json:"authServerIP"`

	// auth server port
	// Required: true
	AuthServerPort *float64 `json:"authServerPort"`

	// auth server secret
	// Required: true
	AuthServerSecret *string `json:"authServerSecret"`

	// backup w p a
	// Required: true
	BackupWPA *BackupWPA `json:"backupWPA"`

	// eap anonymous identity
	// Required: true
	EapAnonymousIdentity *string `json:"eapAnonymousIdentity"`

	// eap password
	// Required: true
	EapPassword *string `json:"eapPassword"`

	// eap type
	// Required: true
	// Enum: [PEAP TTLS]
	EapType *string `json:"eapType"`

	// eap type ext
	// Required: true
	// Enum: [auth=MSCHAPV2]
	EapTypeExt *string `json:"eapTypeExt"`

	// eap username
	// Required: true
	EapUsername *string `json:"eapUsername"`

	// is a a a enabled
	// Required: true
	IsAAAEnabled *bool `json:"isAAAEnabled"`

	// is accounting server enabled
	// Required: true
	IsAccountingServerEnabled *bool `json:"isAccountingServerEnabled"`

	// is w p a supplicant enabled
	// Required: true
	IsWPASupplicantEnabled *bool `json:"isWPASupplicantEnabled"`

	// preshared key
	// Required: true
	PresharedKey *string `json:"presharedKey"`

	// security
	// Required: true
	// Enum: [wep wpa wpa2 wpaTKIP wpa2TKIP wpaAES wpa2AES aes256 none]
	Security *string `json:"security"`

	// wpa authentication
	// Required: true
	// Enum: [psk psk2 ent none]
	WpaAuthentication *string `json:"wpaAuthentication"`
}

// Validate validates this security config
func (m *SecurityConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountingServerIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountingServerPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountingServerSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthServerIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthServerPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthServerSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupWPA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapAnonymousIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapTypeExt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAAAEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAccountingServerEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsWPASupplicantEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresharedKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWpaAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfig) validateAccountingServerIP(formats strfmt.Registry) error {

	if err := validate.Required("accountingServerIP", "body", m.AccountingServerIP); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateAccountingServerPort(formats strfmt.Registry) error {

	if err := validate.Required("accountingServerPort", "body", m.AccountingServerPort); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateAccountingServerSecret(formats strfmt.Registry) error {

	if err := validate.Required("accountingServerSecret", "body", m.AccountingServerSecret); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateAuthServerIP(formats strfmt.Registry) error {

	if err := validate.Required("authServerIP", "body", m.AuthServerIP); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateAuthServerPort(formats strfmt.Registry) error {

	if err := validate.Required("authServerPort", "body", m.AuthServerPort); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateAuthServerSecret(formats strfmt.Registry) error {

	if err := validate.Required("authServerSecret", "body", m.AuthServerSecret); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateBackupWPA(formats strfmt.Registry) error {

	if err := validate.Required("backupWPA", "body", m.BackupWPA); err != nil {
		return err
	}

	if m.BackupWPA != nil {
		if err := m.BackupWPA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupWPA")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validateEapAnonymousIdentity(formats strfmt.Registry) error {

	if err := validate.Required("eapAnonymousIdentity", "body", m.EapAnonymousIdentity); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateEapPassword(formats strfmt.Registry) error {

	if err := validate.Required("eapPassword", "body", m.EapPassword); err != nil {
		return err
	}

	return nil
}

var securityConfigTypeEapTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PEAP","TTLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityConfigTypeEapTypePropEnum = append(securityConfigTypeEapTypePropEnum, v)
	}
}

const (

	// SecurityConfigEapTypePEAP captures enum value "PEAP"
	SecurityConfigEapTypePEAP string = "PEAP"

	// SecurityConfigEapTypeTTLS captures enum value "TTLS"
	SecurityConfigEapTypeTTLS string = "TTLS"
)

// prop value enum
func (m *SecurityConfig) validateEapTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityConfigTypeEapTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityConfig) validateEapType(formats strfmt.Registry) error {

	if err := validate.Required("eapType", "body", m.EapType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEapTypeEnum("eapType", "body", *m.EapType); err != nil {
		return err
	}

	return nil
}

var securityConfigTypeEapTypeExtPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auth=MSCHAPV2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityConfigTypeEapTypeExtPropEnum = append(securityConfigTypeEapTypeExtPropEnum, v)
	}
}

const (

	// SecurityConfigEapTypeExtAuthMSCHAPV2 captures enum value "auth=MSCHAPV2"
	SecurityConfigEapTypeExtAuthMSCHAPV2 string = "auth=MSCHAPV2"
)

// prop value enum
func (m *SecurityConfig) validateEapTypeExtEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityConfigTypeEapTypeExtPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityConfig) validateEapTypeExt(formats strfmt.Registry) error {

	if err := validate.Required("eapTypeExt", "body", m.EapTypeExt); err != nil {
		return err
	}

	// value enum
	if err := m.validateEapTypeExtEnum("eapTypeExt", "body", *m.EapTypeExt); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateEapUsername(formats strfmt.Registry) error {

	if err := validate.Required("eapUsername", "body", m.EapUsername); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateIsAAAEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isAAAEnabled", "body", m.IsAAAEnabled); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateIsAccountingServerEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isAccountingServerEnabled", "body", m.IsAccountingServerEnabled); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateIsWPASupplicantEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isWPASupplicantEnabled", "body", m.IsWPASupplicantEnabled); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validatePresharedKey(formats strfmt.Registry) error {

	if err := validate.Required("presharedKey", "body", m.PresharedKey); err != nil {
		return err
	}

	return nil
}

var securityConfigTypeSecurityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa","wpa2","wpaTKIP","wpa2TKIP","wpaAES","wpa2AES","aes256","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityConfigTypeSecurityPropEnum = append(securityConfigTypeSecurityPropEnum, v)
	}
}

const (

	// SecurityConfigSecurityWep captures enum value "wep"
	SecurityConfigSecurityWep string = "wep"

	// SecurityConfigSecurityWpa captures enum value "wpa"
	SecurityConfigSecurityWpa string = "wpa"

	// SecurityConfigSecurityWpa2 captures enum value "wpa2"
	SecurityConfigSecurityWpa2 string = "wpa2"

	// SecurityConfigSecurityWpaTKIP captures enum value "wpaTKIP"
	SecurityConfigSecurityWpaTKIP string = "wpaTKIP"

	// SecurityConfigSecurityWpa2TKIP captures enum value "wpa2TKIP"
	SecurityConfigSecurityWpa2TKIP string = "wpa2TKIP"

	// SecurityConfigSecurityWpaAES captures enum value "wpaAES"
	SecurityConfigSecurityWpaAES string = "wpaAES"

	// SecurityConfigSecurityWpa2AES captures enum value "wpa2AES"
	SecurityConfigSecurityWpa2AES string = "wpa2AES"

	// SecurityConfigSecurityAes256 captures enum value "aes256"
	SecurityConfigSecurityAes256 string = "aes256"

	// SecurityConfigSecurityNone captures enum value "none"
	SecurityConfigSecurityNone string = "none"
)

// prop value enum
func (m *SecurityConfig) validateSecurityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityConfigTypeSecurityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityConfig) validateSecurity(formats strfmt.Registry) error {

	if err := validate.Required("security", "body", m.Security); err != nil {
		return err
	}

	// value enum
	if err := m.validateSecurityEnum("security", "body", *m.Security); err != nil {
		return err
	}

	return nil
}

var securityConfigTypeWpaAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityConfigTypeWpaAuthenticationPropEnum = append(securityConfigTypeWpaAuthenticationPropEnum, v)
	}
}

const (

	// SecurityConfigWpaAuthenticationPsk captures enum value "psk"
	SecurityConfigWpaAuthenticationPsk string = "psk"

	// SecurityConfigWpaAuthenticationPsk2 captures enum value "psk2"
	SecurityConfigWpaAuthenticationPsk2 string = "psk2"

	// SecurityConfigWpaAuthenticationEnt captures enum value "ent"
	SecurityConfigWpaAuthenticationEnt string = "ent"

	// SecurityConfigWpaAuthenticationNone captures enum value "none"
	SecurityConfigWpaAuthenticationNone string = "none"
)

// prop value enum
func (m *SecurityConfig) validateWpaAuthenticationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityConfigTypeWpaAuthenticationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityConfig) validateWpaAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("wpaAuthentication", "body", m.WpaAuthentication); err != nil {
		return err
	}

	// value enum
	if err := m.validateWpaAuthenticationEnum("wpaAuthentication", "body", *m.WpaAuthentication); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfig) UnmarshalBinary(b []byte) error {
	var res SecurityConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
