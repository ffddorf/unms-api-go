// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Wan wan
// swagger:model wan
type Wan struct {

	// cidr
	// Required: true
	Cidr *string `json:"cidr"`

	// dns
	DNS DNS `json:"dns,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// gateway
	// Required: true
	Gateway *string `json:"gateway"`

	// interface names
	// Required: true
	InterfaceNames InterfaceNames `json:"interfaceNames"`

	// password
	// Required: true
	Password *string `json:"password"`

	// proto
	// Required: true
	// Enum: [static dhcp pppoe]
	Proto *string `json:"proto"`

	// service
	// Required: true
	Service *string `json:"service"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this wan
func (m *Wan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wan) validateCidr(formats strfmt.Registry) error {

	if err := validate.Required("cidr", "body", m.Cidr); err != nil {
		return err
	}

	return nil
}

func (m *Wan) validateDNS(formats strfmt.Registry) error {

	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	if err := m.DNS.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dns")
		}
		return err
	}

	return nil
}

func (m *Wan) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *Wan) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *Wan) validateInterfaceNames(formats strfmt.Registry) error {

	if err := validate.Required("interfaceNames", "body", m.InterfaceNames); err != nil {
		return err
	}

	if err := m.InterfaceNames.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interfaceNames")
		}
		return err
	}

	return nil
}

func (m *Wan) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

var wanTypeProtoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","dhcp","pppoe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wanTypeProtoPropEnum = append(wanTypeProtoPropEnum, v)
	}
}

const (

	// WanProtoStatic captures enum value "static"
	WanProtoStatic string = "static"

	// WanProtoDhcp captures enum value "dhcp"
	WanProtoDhcp string = "dhcp"

	// WanProtoPppoe captures enum value "pppoe"
	WanProtoPppoe string = "pppoe"
)

// prop value enum
func (m *Wan) validateProtoEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, wanTypeProtoPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Wan) validateProto(formats strfmt.Registry) error {

	if err := validate.Required("proto", "body", m.Proto); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtoEnum("proto", "body", *m.Proto); err != nil {
		return err
	}

	return nil
}

func (m *Wan) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *Wan) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Wan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wan) UnmarshalBinary(b []byte) error {
	var res Wan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
