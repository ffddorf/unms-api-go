// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerConfig server config
// swagger:model ServerConfig
type ServerConfig struct {

	// features
	Features *Features `json:"features,omitempty"`

	// Whether cloud SMTP is available or not.
	// Required: true
	IsCloudSMTPAvailable *bool `json:"isCloudSmtpAvailable"`

	// URL to check for new version of UNMS.
	// Required: true
	LatestVersionURL *string `json:"latestVersionUrl"`

	// Port where server is listening for netflow packets.
	// Required: true
	NetflowPort *float64 `json:"netflowPort"`

	// permissions
	// Required: true
	Permissions *ServerConfigPermissions `json:"permissions"`

	// Whether the server is using custom SSL cert or not.
	// Required: true
	UseCustomSslCert *bool `json:"useCustomSslCert"`
}

// Validate validates this server config
func (m *ServerConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCloudSMTPAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestVersionURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetflowPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseCustomSslCert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerConfig) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if m.Features != nil {
		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *ServerConfig) validateIsCloudSMTPAvailable(formats strfmt.Registry) error {

	if err := validate.Required("isCloudSmtpAvailable", "body", m.IsCloudSMTPAvailable); err != nil {
		return err
	}

	return nil
}

func (m *ServerConfig) validateLatestVersionURL(formats strfmt.Registry) error {

	if err := validate.Required("latestVersionUrl", "body", m.LatestVersionURL); err != nil {
		return err
	}

	return nil
}

func (m *ServerConfig) validateNetflowPort(formats strfmt.Registry) error {

	if err := validate.Required("netflowPort", "body", m.NetflowPort); err != nil {
		return err
	}

	return nil
}

func (m *ServerConfig) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *ServerConfig) validateUseCustomSslCert(formats strfmt.Registry) error {

	if err := validate.Required("useCustomSslCert", "body", m.UseCustomSslCert); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerConfig) UnmarshalBinary(b []byte) error {
	var res ServerConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
