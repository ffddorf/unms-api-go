// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceSystemConfiguration device system configuration
// swagger:model DeviceSystemConfiguration
type DeviceSystemConfiguration struct {

	// access from sfp
	AccessFromSfp bool `json:"accessFromSfp,omitempty"`

	// admin
	Admin *AdminLogin `json:"admin,omitempty"`

	// client isolation
	ClientIsolation bool `json:"clientIsolation,omitempty"`

	// dns1
	Dns1 string `json:"dns1,omitempty"`

	// dns2
	Dns2 string `json:"dns2,omitempty"`

	// domain name
	DomainName string `json:"domainName,omitempty"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// igmp snooping
	IgmpSnooping bool `json:"igmpSnooping,omitempty"`

	// inband management vlan
	InbandManagementVlan string `json:"inbandManagementVlan,omitempty"`

	// mtu
	Mtu string `json:"mtu,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// read only account
	ReadOnlyAccount *ReadOnlyAccount `json:"readOnlyAccount,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`

	// timezone list
	TimezoneList TimezoneList `json:"timezoneList,omitempty"`
}

// Validate validates this device system configuration
func (m *DeviceSystemConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnlyAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezoneList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSystemConfiguration) validateAdmin(formats strfmt.Registry) error {

	if swag.IsZero(m.Admin) { // not required
		return nil
	}

	if m.Admin != nil {
		if err := m.Admin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admin")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) validateReadOnlyAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadOnlyAccount) { // not required
		return nil
	}

	if m.ReadOnlyAccount != nil {
		if err := m.ReadOnlyAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readOnlyAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) validateTimezoneList(formats strfmt.Registry) error {

	if swag.IsZero(m.TimezoneList) { // not required
		return nil
	}

	if err := m.TimezoneList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timezoneList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSystemConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSystemConfiguration) UnmarshalBinary(b []byte) error {
	var res DeviceSystemConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
