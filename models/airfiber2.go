// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Airfiber2 airfiber 2
// swagger:model airfiber 2
type Airfiber2 struct {

	// antenna
	Antenna string `json:"antenna,omitempty"`

	// ap device
	ApDevice *ApDevice1 `json:"apDevice,omitempty"`

	// ap mac
	ApMac string `json:"apMac,omitempty"`

	// authentication
	// Enum: [psk psk2 ent none]
	Authentication string `json:"authentication,omitempty"`

	// bridge mode
	// Enum: [hw sw]
	BridgeMode string `json:"bridgeMode,omitempty"`

	// channel width
	// Minimum: 0
	ChannelWidth *int64 `json:"channelWidth,omitempty"`

	// country code
	// Minimum: 0
	CountryCode *int64 `json:"countryCode,omitempty"`

	// frame length
	FrameLength float64 `json:"frameLength,omitempty"`

	// frequency
	// Minimum: 0
	Frequency *float64 `json:"frequency,omitempty"`

	// frequency bands
	FrequencyBands FrequencyBands1 `json:"frequencyBands,omitempty"`

	// noise floor
	NoiseFloor string `json:"noiseFloor,omitempty"`

	// receive chains
	ReceiveChains float64 `json:"receiveChains,omitempty"`

	// remote signal
	RemoteSignal string `json:"remoteSignal,omitempty"`

	// security
	// Enum: [wep wpa wpa2 none]
	Security string `json:"security,omitempty"`

	// series
	// Enum: [LTU classic G60]
	Series string `json:"series,omitempty"`

	// signal chain
	SignalChain SignalChain `json:"signalChain,omitempty"`

	// signal remote chain
	SignalRemoteChain SignalRemoteChain `json:"signalRemoteChain,omitempty"`

	// ssid
	Ssid string `json:"ssid,omitempty"`

	// station name
	StationName string `json:"stationName,omitempty"`

	// stations count
	StationsCount float64 `json:"stationsCount,omitempty"`

	// transmit chains
	TransmitChains float64 `json:"transmitChains,omitempty"`

	// transmit duty cycle
	TransmitDutyCycle float64 `json:"transmitDutyCycle,omitempty"`

	// transmit eirp
	TransmitEirp float64 `json:"transmitEirp,omitempty"`

	// transmit power
	TransmitPower float64 `json:"transmitPower,omitempty"`

	// wireless mode
	// Enum: [ap ap-ptp ap-ptmp ap-ptmp-airmax ap-ptmp-airmax-mixed ap-ptmp-airmax-ac sta sta-ptp sta-ptmp aprepeater repeater mesh]
	WirelessMode string `json:"wirelessMode,omitempty"`
}

// Validate validates this airfiber 2
func (m *Airfiber2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBridgeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequencyBands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalRemoteChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWirelessMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Airfiber2) validateApDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.ApDevice) { // not required
		return nil
	}

	if m.ApDevice != nil {
		if err := m.ApDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apDevice")
			}
			return err
		}
	}

	return nil
}

var airfiber2TypeAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiber2TypeAuthenticationPropEnum = append(airfiber2TypeAuthenticationPropEnum, v)
	}
}

const (

	// Airfiber2AuthenticationPsk captures enum value "psk"
	Airfiber2AuthenticationPsk string = "psk"

	// Airfiber2AuthenticationPsk2 captures enum value "psk2"
	Airfiber2AuthenticationPsk2 string = "psk2"

	// Airfiber2AuthenticationEnt captures enum value "ent"
	Airfiber2AuthenticationEnt string = "ent"

	// Airfiber2AuthenticationNone captures enum value "none"
	Airfiber2AuthenticationNone string = "none"
)

// prop value enum
func (m *Airfiber2) validateAuthenticationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiber2TypeAuthenticationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber2) validateAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationEnum("authentication", "body", m.Authentication); err != nil {
		return err
	}

	return nil
}

var airfiber2TypeBridgeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hw","sw"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiber2TypeBridgeModePropEnum = append(airfiber2TypeBridgeModePropEnum, v)
	}
}

const (

	// Airfiber2BridgeModeHw captures enum value "hw"
	Airfiber2BridgeModeHw string = "hw"

	// Airfiber2BridgeModeSw captures enum value "sw"
	Airfiber2BridgeModeSw string = "sw"
)

// prop value enum
func (m *Airfiber2) validateBridgeModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiber2TypeBridgeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber2) validateBridgeMode(formats strfmt.Registry) error {

	if swag.IsZero(m.BridgeMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBridgeModeEnum("bridgeMode", "body", m.BridgeMode); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber2) validateChannelWidth(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelWidth) { // not required
		return nil
	}

	if err := validate.MinimumInt("channelWidth", "body", int64(*m.ChannelWidth), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber2) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.MinimumInt("countryCode", "body", int64(*m.CountryCode), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber2) validateFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	if err := validate.Minimum("frequency", "body", float64(*m.Frequency), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber2) validateFrequencyBands(formats strfmt.Registry) error {

	if swag.IsZero(m.FrequencyBands) { // not required
		return nil
	}

	if err := m.FrequencyBands.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("frequencyBands")
		}
		return err
	}

	return nil
}

var airfiber2TypeSecurityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa","wpa2","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiber2TypeSecurityPropEnum = append(airfiber2TypeSecurityPropEnum, v)
	}
}

const (

	// Airfiber2SecurityWep captures enum value "wep"
	Airfiber2SecurityWep string = "wep"

	// Airfiber2SecurityWpa captures enum value "wpa"
	Airfiber2SecurityWpa string = "wpa"

	// Airfiber2SecurityWpa2 captures enum value "wpa2"
	Airfiber2SecurityWpa2 string = "wpa2"

	// Airfiber2SecurityNone captures enum value "none"
	Airfiber2SecurityNone string = "none"
)

// prop value enum
func (m *Airfiber2) validateSecurityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiber2TypeSecurityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber2) validateSecurity(formats strfmt.Registry) error {

	if swag.IsZero(m.Security) { // not required
		return nil
	}

	// value enum
	if err := m.validateSecurityEnum("security", "body", m.Security); err != nil {
		return err
	}

	return nil
}

var airfiber2TypeSeriesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LTU","classic","G60"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiber2TypeSeriesPropEnum = append(airfiber2TypeSeriesPropEnum, v)
	}
}

const (

	// Airfiber2SeriesLTU captures enum value "LTU"
	Airfiber2SeriesLTU string = "LTU"

	// Airfiber2SeriesClassic captures enum value "classic"
	Airfiber2SeriesClassic string = "classic"

	// Airfiber2SeriesG60 captures enum value "G60"
	Airfiber2SeriesG60 string = "G60"
)

// prop value enum
func (m *Airfiber2) validateSeriesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiber2TypeSeriesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber2) validateSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.Series) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeriesEnum("series", "body", m.Series); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber2) validateSignalChain(formats strfmt.Registry) error {

	if swag.IsZero(m.SignalChain) { // not required
		return nil
	}

	if err := m.SignalChain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalChain")
		}
		return err
	}

	return nil
}

func (m *Airfiber2) validateSignalRemoteChain(formats strfmt.Registry) error {

	if swag.IsZero(m.SignalRemoteChain) { // not required
		return nil
	}

	if err := m.SignalRemoteChain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalRemoteChain")
		}
		return err
	}

	return nil
}

var airfiber2TypeWirelessModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiber2TypeWirelessModePropEnum = append(airfiber2TypeWirelessModePropEnum, v)
	}
}

const (

	// Airfiber2WirelessModeAp captures enum value "ap"
	Airfiber2WirelessModeAp string = "ap"

	// Airfiber2WirelessModeApPtp captures enum value "ap-ptp"
	Airfiber2WirelessModeApPtp string = "ap-ptp"

	// Airfiber2WirelessModeApPtmp captures enum value "ap-ptmp"
	Airfiber2WirelessModeApPtmp string = "ap-ptmp"

	// Airfiber2WirelessModeApPtmpAirmax captures enum value "ap-ptmp-airmax"
	Airfiber2WirelessModeApPtmpAirmax string = "ap-ptmp-airmax"

	// Airfiber2WirelessModeApPtmpAirmaxMixed captures enum value "ap-ptmp-airmax-mixed"
	Airfiber2WirelessModeApPtmpAirmaxMixed string = "ap-ptmp-airmax-mixed"

	// Airfiber2WirelessModeApPtmpAirmaxAc captures enum value "ap-ptmp-airmax-ac"
	Airfiber2WirelessModeApPtmpAirmaxAc string = "ap-ptmp-airmax-ac"

	// Airfiber2WirelessModeSta captures enum value "sta"
	Airfiber2WirelessModeSta string = "sta"

	// Airfiber2WirelessModeStaPtp captures enum value "sta-ptp"
	Airfiber2WirelessModeStaPtp string = "sta-ptp"

	// Airfiber2WirelessModeStaPtmp captures enum value "sta-ptmp"
	Airfiber2WirelessModeStaPtmp string = "sta-ptmp"

	// Airfiber2WirelessModeAprepeater captures enum value "aprepeater"
	Airfiber2WirelessModeAprepeater string = "aprepeater"

	// Airfiber2WirelessModeRepeater captures enum value "repeater"
	Airfiber2WirelessModeRepeater string = "repeater"

	// Airfiber2WirelessModeMesh captures enum value "mesh"
	Airfiber2WirelessModeMesh string = "mesh"
)

// prop value enum
func (m *Airfiber2) validateWirelessModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiber2TypeWirelessModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber2) validateWirelessMode(formats strfmt.Registry) error {

	if swag.IsZero(m.WirelessMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateWirelessModeEnum("wirelessMode", "body", m.WirelessMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Airfiber2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Airfiber2) UnmarshalBinary(b []byte) error {
	var res Airfiber2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
