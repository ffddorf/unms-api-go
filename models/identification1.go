// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Identification1 identification 1
// swagger:model identification 1
type Identification1 struct {

	// authorized
	// Required: true
	Authorized *bool `json:"authorized"`

	// category
	// Required: true
	Category *string `json:"category"`

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// firmware version
	FirmwareVersion string `json:"firmwareVersion,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// mac
	Mac string `json:"mac,omitempty"`

	// model
	// Required: true
	Model *string `json:"model"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform Id
	PlatformID string `json:"platformId,omitempty"`

	// role
	// Required: true
	// Enum: [router switch gpon ap station other ups server wireless convertor gateway]
	Role *string `json:"role"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// site Id
	SiteID string `json:"siteId,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// updated
	Updated float64 `json:"updated,omitempty"`
}

// Validate validates this identification 1
func (m *Identification1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Identification1) validateAuthorized(formats strfmt.Registry) error {

	if err := validate.Required("authorized", "body", m.Authorized); err != nil {
		return err
	}

	return nil
}

func (m *Identification1) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *Identification1) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *Identification1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Identification1) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

func (m *Identification1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var identification1TypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		identification1TypeRolePropEnum = append(identification1TypeRolePropEnum, v)
	}
}

const (

	// Identification1RoleRouter captures enum value "router"
	Identification1RoleRouter string = "router"

	// Identification1RoleSwitch captures enum value "switch"
	Identification1RoleSwitch string = "switch"

	// Identification1RoleGpon captures enum value "gpon"
	Identification1RoleGpon string = "gpon"

	// Identification1RoleAp captures enum value "ap"
	Identification1RoleAp string = "ap"

	// Identification1RoleStation captures enum value "station"
	Identification1RoleStation string = "station"

	// Identification1RoleOther captures enum value "other"
	Identification1RoleOther string = "other"

	// Identification1RoleUps captures enum value "ups"
	Identification1RoleUps string = "ups"

	// Identification1RoleServer captures enum value "server"
	Identification1RoleServer string = "server"

	// Identification1RoleWireless captures enum value "wireless"
	Identification1RoleWireless string = "wireless"

	// Identification1RoleConvertor captures enum value "convertor"
	Identification1RoleConvertor string = "convertor"

	// Identification1RoleGateway captures enum value "gateway"
	Identification1RoleGateway string = "gateway"
)

// prop value enum
func (m *Identification1) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, identification1TypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Identification1) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

func (m *Identification1) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Identification1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Identification1) UnmarshalBinary(b []byte) error {
	var res Identification1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
