// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Lan1 lan 1
// swagger:model lan 1
type Lan1 struct {

	// DHCP lease time in seconds
	// Required: true
	// Minimum: 1
	DhcpLeaseTime *int64 `json:"dhcpLeaseTime"`

	// IPv4 DHCP range start
	// Required: true
	DhcpPoolEnd *string `json:"dhcpPoolEnd"`

	// IPv4 DHCP range start
	// Required: true
	DhcpPoolStart *string `json:"dhcpPoolStart"`

	// IPv4 address of DHCP relay
	// Required: true
	DhcpRelay *string `json:"dhcpRelay"`

	// DHCP server mode
	// Required: true
	// Enum: [enabled disabled relay]
	DhcpServerMode *string `json:"dhcpServerMode"`

	// Set to true to enable DNS proxying
	// Required: true
	DNSProxyEnabled *bool `json:"dnsProxyEnabled"`
}

// Validate validates this lan 1
func (m *Lan1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhcpLeaseTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpPoolEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpPoolStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpRelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpServerMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSProxyEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lan1) validateDhcpLeaseTime(formats strfmt.Registry) error {

	if err := validate.Required("dhcpLeaseTime", "body", m.DhcpLeaseTime); err != nil {
		return err
	}

	if err := validate.MinimumInt("dhcpLeaseTime", "body", int64(*m.DhcpLeaseTime), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Lan1) validateDhcpPoolEnd(formats strfmt.Registry) error {

	if err := validate.Required("dhcpPoolEnd", "body", m.DhcpPoolEnd); err != nil {
		return err
	}

	return nil
}

func (m *Lan1) validateDhcpPoolStart(formats strfmt.Registry) error {

	if err := validate.Required("dhcpPoolStart", "body", m.DhcpPoolStart); err != nil {
		return err
	}

	return nil
}

func (m *Lan1) validateDhcpRelay(formats strfmt.Registry) error {

	if err := validate.Required("dhcpRelay", "body", m.DhcpRelay); err != nil {
		return err
	}

	return nil
}

var lan1TypeDhcpServerModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled","relay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lan1TypeDhcpServerModePropEnum = append(lan1TypeDhcpServerModePropEnum, v)
	}
}

const (

	// Lan1DhcpServerModeEnabled captures enum value "enabled"
	Lan1DhcpServerModeEnabled string = "enabled"

	// Lan1DhcpServerModeDisabled captures enum value "disabled"
	Lan1DhcpServerModeDisabled string = "disabled"

	// Lan1DhcpServerModeRelay captures enum value "relay"
	Lan1DhcpServerModeRelay string = "relay"
)

// prop value enum
func (m *Lan1) validateDhcpServerModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lan1TypeDhcpServerModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Lan1) validateDhcpServerMode(formats strfmt.Registry) error {

	if err := validate.Required("dhcpServerMode", "body", m.DhcpServerMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateDhcpServerModeEnum("dhcpServerMode", "body", *m.DhcpServerMode); err != nil {
		return err
	}

	return nil
}

func (m *Lan1) validateDNSProxyEnabled(formats strfmt.Registry) error {

	if err := validate.Required("dnsProxyEnabled", "body", m.DNSProxyEnabled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Lan1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lan1) UnmarshalBinary(b []byte) error {
	var res Lan1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
