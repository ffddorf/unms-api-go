// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model5 model 5
// swagger:model Model 5
type Model5 struct {

	// aggregated time
	// Required: true
	// Minimum: 1
	AggregatedTime *float64 `json:"aggregatedTime"`

	// device
	Device *DeviceOutage `json:"device,omitempty"`

	// device metadata
	DeviceMetadata *OutageDeviceMetadata `json:"deviceMetadata,omitempty"`

	// end timestamp
	// Required: true
	EndTimestamp *string `json:"endTimestamp"`

	// id
	// Required: true
	ID *string `json:"id"`

	// in progress
	// Required: true
	InProgress *bool `json:"inProgress"`

	// ongoing
	// Required: true
	Ongoing *bool `json:"ongoing"`

	// site
	Site *SiteIdentification `json:"site,omitempty"`

	// start timestamp
	// Required: true
	StartTimestamp *string `json:"startTimestamp"`

	// type
	// Enum: [outage unreachable]
	Type string `json:"type,omitempty"`
}

// Validate validates this model 5
func (m *Model5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOngoing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model5) validateAggregatedTime(formats strfmt.Registry) error {

	if err := validate.Required("aggregatedTime", "body", m.AggregatedTime); err != nil {
		return err
	}

	if err := validate.Minimum("aggregatedTime", "body", float64(*m.AggregatedTime), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Model5) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *Model5) validateDeviceMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceMetadata) { // not required
		return nil
	}

	if m.DeviceMetadata != nil {
		if err := m.DeviceMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Model5) validateEndTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("endTimestamp", "body", m.EndTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Model5) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Model5) validateInProgress(formats strfmt.Registry) error {

	if err := validate.Required("inProgress", "body", m.InProgress); err != nil {
		return err
	}

	return nil
}

func (m *Model5) validateOngoing(formats strfmt.Registry) error {

	if err := validate.Required("ongoing", "body", m.Ongoing); err != nil {
		return err
	}

	return nil
}

func (m *Model5) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *Model5) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("startTimestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	return nil
}

var model5TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["outage","unreachable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model5TypeTypePropEnum = append(model5TypeTypePropEnum, v)
	}
}

const (

	// Model5TypeOutage captures enum value "outage"
	Model5TypeOutage string = "outage"

	// Model5TypeUnreachable captures enum value "unreachable"
	Model5TypeUnreachable string = "unreachable"
)

// prop value enum
func (m *Model5) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, model5TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Model5) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model5) UnmarshalBinary(b []byte) error {
	var res Model5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
