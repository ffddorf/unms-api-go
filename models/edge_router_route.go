// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeRouterRoute edge router route
// swagger:model EdgeRouterRoute
type EdgeRouterRoute struct {

	// description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// destination
	Destination string `json:"destination,omitempty"`

	// distance
	// Maximum: 255
	// Minimum: 1
	Distance float64 `json:"distance,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// fib
	Fib bool `json:"fib,omitempty"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// gateway status
	GatewayStatus string `json:"gatewayStatus,omitempty"`

	// interface
	Interface string `json:"interface,omitempty"`

	// next hop
	NextHop string `json:"nextHop,omitempty"`

	// selected
	Selected bool `json:"selected,omitempty"`

	// static type
	StaticType string `json:"staticType,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this edge router route
func (m *EdgeRouterRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeRouterRoute) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 200); err != nil {
		return err
	}

	return nil
}

func (m *EdgeRouterRoute) validateDistance(formats strfmt.Registry) error {

	if swag.IsZero(m.Distance) { // not required
		return nil
	}

	if err := validate.Minimum("distance", "body", float64(m.Distance), 1, false); err != nil {
		return err
	}

	if err := validate.Maximum("distance", "body", float64(m.Distance), 255, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeRouterRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeRouterRoute) UnmarshalBinary(b []byte) error {
	var res EdgeRouterRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
