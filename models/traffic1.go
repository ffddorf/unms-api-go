// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Traffic1 traffic 1
// swagger:model Traffic 1
type Traffic1 struct {

	// Total number of bytes downloaded during interval
	// Required: true
	Download *float64 `json:"download"`

	// Start of the aggregated time interval as a timestamp in milliseconds
	// Required: true
	Time *float64 `json:"time"`

	// Total number of bytes uploaded during interval
	// Required: true
	Upload *float64 `json:"upload"`
}

// Validate validates this traffic 1
func (m *Traffic1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Traffic1) validateDownload(formats strfmt.Registry) error {

	if err := validate.Required("download", "body", m.Download); err != nil {
		return err
	}

	return nil
}

func (m *Traffic1) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

func (m *Traffic1) validateUpload(formats strfmt.Registry) error {

	if err := validate.Required("upload", "body", m.Upload); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Traffic1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Traffic1) UnmarshalBinary(b []byte) error {
	var res Traffic1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
