// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OspfArea ospf area
// swagger:model OspfArea
type OspfArea struct {

	// auth
	// Enum: [md5 plaintext-password off]
	Auth string `json:"auth,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// networks
	// Required: true
	Networks Networks `json:"networks"`

	// type
	// Required: true
	// Enum: [normal nssa stub]
	Type *string `json:"type"`
}

// Validate validates this ospf area
func (m *OspfArea) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ospfAreaTypeAuthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["md5","plaintext-password","off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ospfAreaTypeAuthPropEnum = append(ospfAreaTypeAuthPropEnum, v)
	}
}

const (

	// OspfAreaAuthMd5 captures enum value "md5"
	OspfAreaAuthMd5 string = "md5"

	// OspfAreaAuthPlaintextPassword captures enum value "plaintext-password"
	OspfAreaAuthPlaintextPassword string = "plaintext-password"

	// OspfAreaAuthOff captures enum value "off"
	OspfAreaAuthOff string = "off"
)

// prop value enum
func (m *OspfArea) validateAuthEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ospfAreaTypeAuthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OspfArea) validateAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.Auth) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthEnum("auth", "body", m.Auth); err != nil {
		return err
	}

	return nil
}

func (m *OspfArea) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *OspfArea) validateNetworks(formats strfmt.Registry) error {

	if err := validate.Required("networks", "body", m.Networks); err != nil {
		return err
	}

	if err := m.Networks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networks")
		}
		return err
	}

	return nil
}

var ospfAreaTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["normal","nssa","stub"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ospfAreaTypeTypePropEnum = append(ospfAreaTypeTypePropEnum, v)
	}
}

const (

	// OspfAreaTypeNormal captures enum value "normal"
	OspfAreaTypeNormal string = "normal"

	// OspfAreaTypeNssa captures enum value "nssa"
	OspfAreaTypeNssa string = "nssa"

	// OspfAreaTypeStub captures enum value "stub"
	OspfAreaTypeStub string = "stub"
)

// prop value enum
func (m *OspfArea) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ospfAreaTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OspfArea) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OspfArea) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OspfArea) UnmarshalBinary(b []byte) error {
	var res OspfArea
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
