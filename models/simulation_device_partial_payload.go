// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimulationDevicePartialPayload simulation device partial payload
// swagger:model SimulationDevicePartialPayload
type SimulationDevicePartialPayload struct {

	// altitude
	// Maximum: 10000
	// Minimum: -10000
	Altitude *float64 `json:"altitude,omitempty"`

	// antenna
	Antenna *Antenna2 `json:"antenna,omitempty"`

	// ap type
	// Enum: [ptp ptmp]
	ApType string `json:"apType,omitempty"`

	// channel width
	// Enum: [0]
	ChannelWidth float64 `json:"channelWidth,omitempty"`

	// color
	// Max Length: 20
	Color string `json:"color,omitempty"`

	// coverage cpe height
	// Enum: [0]
	CoverageCpeHeight float64 `json:"coverageCpeHeight,omitempty"`

	// device Id
	DeviceID string `json:"deviceId,omitempty"`

	// device name
	// Max Length: 200
	DeviceName string `json:"deviceName,omitempty"`

	// eirp
	// Enum: [0]
	Eirp int64 `json:"eirp,omitempty"`

	// frequency
	// Enum: [0]
	Frequency int64 `json:"frequency,omitempty"`

	// heading
	Heading float64 `json:"heading,omitempty"`

	// height
	// Enum: [0]
	Height float64 `json:"height,omitempty"`

	// latitude
	// Maximum: 90
	// Minimum: -90
	Latitude *float64 `json:"latitude,omitempty"`

	// longitude
	// Maximum: 180
	// Minimum: -180
	Longitude *float64 `json:"longitude,omitempty"`

	// name
	// Max Length: 200
	Name string `json:"name,omitempty"`

	// radius
	// Enum: [0]
	Radius float64 `json:"radius,omitempty"`

	// role
	// Enum: [ap cpe]
	Role string `json:"role,omitempty"`
}

// Validate validates this simulation device partial payload
func (m *SimulationDevicePartialPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAltitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAntenna(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoverageCpeHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEirp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadius(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateAltitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Altitude) { // not required
		return nil
	}

	if err := validate.Minimum("altitude", "body", float64(*m.Altitude), -10000, false); err != nil {
		return err
	}

	if err := validate.Maximum("altitude", "body", float64(*m.Altitude), 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulationDevicePartialPayload) validateAntenna(formats strfmt.Registry) error {

	if swag.IsZero(m.Antenna) { // not required
		return nil
	}

	if m.Antenna != nil {
		if err := m.Antenna.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("antenna")
			}
			return err
		}
	}

	return nil
}

var simulationDevicePartialPayloadTypeApTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ptp","ptmp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationDevicePartialPayloadTypeApTypePropEnum = append(simulationDevicePartialPayloadTypeApTypePropEnum, v)
	}
}

const (

	// SimulationDevicePartialPayloadApTypePtp captures enum value "ptp"
	SimulationDevicePartialPayloadApTypePtp string = "ptp"

	// SimulationDevicePartialPayloadApTypePtmp captures enum value "ptmp"
	SimulationDevicePartialPayloadApTypePtmp string = "ptmp"
)

// prop value enum
func (m *SimulationDevicePartialPayload) validateApTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, simulationDevicePartialPayloadTypeApTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateApType(formats strfmt.Registry) error {

	if swag.IsZero(m.ApType) { // not required
		return nil
	}

	// value enum
	if err := m.validateApTypeEnum("apType", "body", m.ApType); err != nil {
		return err
	}

	return nil
}

var simulationDevicePartialPayloadTypeChannelWidthPropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationDevicePartialPayloadTypeChannelWidthPropEnum = append(simulationDevicePartialPayloadTypeChannelWidthPropEnum, v)
	}
}

// prop value enum
func (m *SimulationDevicePartialPayload) validateChannelWidthEnum(path, location string, value float64) error {
	if err := validate.Enum(path, location, value, simulationDevicePartialPayloadTypeChannelWidthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateChannelWidth(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelWidth) { // not required
		return nil
	}

	// value enum
	if err := m.validateChannelWidthEnum("channelWidth", "body", m.ChannelWidth); err != nil {
		return err
	}

	return nil
}

func (m *SimulationDevicePartialPayload) validateColor(formats strfmt.Registry) error {

	if swag.IsZero(m.Color) { // not required
		return nil
	}

	if err := validate.MaxLength("color", "body", string(m.Color), 20); err != nil {
		return err
	}

	return nil
}

var simulationDevicePartialPayloadTypeCoverageCpeHeightPropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationDevicePartialPayloadTypeCoverageCpeHeightPropEnum = append(simulationDevicePartialPayloadTypeCoverageCpeHeightPropEnum, v)
	}
}

// prop value enum
func (m *SimulationDevicePartialPayload) validateCoverageCpeHeightEnum(path, location string, value float64) error {
	if err := validate.Enum(path, location, value, simulationDevicePartialPayloadTypeCoverageCpeHeightPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateCoverageCpeHeight(formats strfmt.Registry) error {

	if swag.IsZero(m.CoverageCpeHeight) { // not required
		return nil
	}

	// value enum
	if err := m.validateCoverageCpeHeightEnum("coverageCpeHeight", "body", m.CoverageCpeHeight); err != nil {
		return err
	}

	return nil
}

func (m *SimulationDevicePartialPayload) validateDeviceName(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceName) { // not required
		return nil
	}

	if err := validate.MaxLength("deviceName", "body", string(m.DeviceName), 200); err != nil {
		return err
	}

	return nil
}

var simulationDevicePartialPayloadTypeEirpPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationDevicePartialPayloadTypeEirpPropEnum = append(simulationDevicePartialPayloadTypeEirpPropEnum, v)
	}
}

// prop value enum
func (m *SimulationDevicePartialPayload) validateEirpEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, simulationDevicePartialPayloadTypeEirpPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateEirp(formats strfmt.Registry) error {

	if swag.IsZero(m.Eirp) { // not required
		return nil
	}

	// value enum
	if err := m.validateEirpEnum("eirp", "body", m.Eirp); err != nil {
		return err
	}

	return nil
}

var simulationDevicePartialPayloadTypeFrequencyPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationDevicePartialPayloadTypeFrequencyPropEnum = append(simulationDevicePartialPayloadTypeFrequencyPropEnum, v)
	}
}

// prop value enum
func (m *SimulationDevicePartialPayload) validateFrequencyEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, simulationDevicePartialPayloadTypeFrequencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateFrequencyEnum("frequency", "body", m.Frequency); err != nil {
		return err
	}

	return nil
}

var simulationDevicePartialPayloadTypeHeightPropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationDevicePartialPayloadTypeHeightPropEnum = append(simulationDevicePartialPayloadTypeHeightPropEnum, v)
	}
}

// prop value enum
func (m *SimulationDevicePartialPayload) validateHeightEnum(path, location string, value float64) error {
	if err := validate.Enum(path, location, value, simulationDevicePartialPayloadTypeHeightPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateHeight(formats strfmt.Registry) error {

	if swag.IsZero(m.Height) { // not required
		return nil
	}

	// value enum
	if err := m.validateHeightEnum("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *SimulationDevicePartialPayload) validateLatitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Latitude) { // not required
		return nil
	}

	if err := validate.Minimum("latitude", "body", float64(*m.Latitude), -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("latitude", "body", float64(*m.Latitude), 90, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulationDevicePartialPayload) validateLongitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Longitude) { // not required
		return nil
	}

	if err := validate.Minimum("longitude", "body", float64(*m.Longitude), -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("longitude", "body", float64(*m.Longitude), 180, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulationDevicePartialPayload) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 200); err != nil {
		return err
	}

	return nil
}

var simulationDevicePartialPayloadTypeRadiusPropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationDevicePartialPayloadTypeRadiusPropEnum = append(simulationDevicePartialPayloadTypeRadiusPropEnum, v)
	}
}

// prop value enum
func (m *SimulationDevicePartialPayload) validateRadiusEnum(path, location string, value float64) error {
	if err := validate.Enum(path, location, value, simulationDevicePartialPayloadTypeRadiusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateRadius(formats strfmt.Registry) error {

	if swag.IsZero(m.Radius) { // not required
		return nil
	}

	// value enum
	if err := m.validateRadiusEnum("radius", "body", m.Radius); err != nil {
		return err
	}

	return nil
}

var simulationDevicePartialPayloadTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","cpe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationDevicePartialPayloadTypeRolePropEnum = append(simulationDevicePartialPayloadTypeRolePropEnum, v)
	}
}

const (

	// SimulationDevicePartialPayloadRoleAp captures enum value "ap"
	SimulationDevicePartialPayloadRoleAp string = "ap"

	// SimulationDevicePartialPayloadRoleCpe captures enum value "cpe"
	SimulationDevicePartialPayloadRoleCpe string = "cpe"
)

// prop value enum
func (m *SimulationDevicePartialPayload) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, simulationDevicePartialPayloadTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SimulationDevicePartialPayload) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimulationDevicePartialPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimulationDevicePartialPayload) UnmarshalBinary(b []byte) error {
	var res SimulationDevicePartialPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
