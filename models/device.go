// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Device device
// swagger:model device
type Device struct {

	// Device category
	// Enum: [optical wired wireless accessories]
	Category string `json:"category,omitempty"`

	// Device firmware version
	FirmwareVersion string `json:"firmwareVersion,omitempty"`

	// Id of gateway device
	// Required: true
	ID *string `json:"id"`

	// Device IP address in CIDR format
	IPAddress string `json:"ipAddress,omitempty"`

	// Device MAC address
	// Required: true
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac *string `json:"mac"`

	// Device model
	Model string `json:"model,omitempty"`

	// Device name
	// Required: true
	Name *string `json:"name"`

	// Device platform id
	PlatformID string `json:"platformId,omitempty"`

	// Device status
	// Required: true
	// Enum: [active connecting discovered inactive disabled disconnected unauthorized proposed unknown unplaced custom]
	Status *string `json:"status"`

	// Device type
	Type string `json:"type,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["optical","wired","wireless","accessories"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceTypeCategoryPropEnum = append(deviceTypeCategoryPropEnum, v)
	}
}

const (

	// DeviceCategoryOptical captures enum value "optical"
	DeviceCategoryOptical string = "optical"

	// DeviceCategoryWired captures enum value "wired"
	DeviceCategoryWired string = "wired"

	// DeviceCategoryWireless captures enum value "wireless"
	DeviceCategoryWireless string = "wireless"

	// DeviceCategoryAccessories captures enum value "accessories"
	DeviceCategoryAccessories string = "accessories"
)

// prop value enum
func (m *Device) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Device) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	if err := validate.Pattern("mac", "body", string(*m.Mac), `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var deviceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","connecting","discovered","inactive","disabled","disconnected","unauthorized","proposed","unknown","unplaced","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceTypeStatusPropEnum = append(deviceTypeStatusPropEnum, v)
	}
}

const (

	// DeviceStatusActive captures enum value "active"
	DeviceStatusActive string = "active"

	// DeviceStatusConnecting captures enum value "connecting"
	DeviceStatusConnecting string = "connecting"

	// DeviceStatusDiscovered captures enum value "discovered"
	DeviceStatusDiscovered string = "discovered"

	// DeviceStatusInactive captures enum value "inactive"
	DeviceStatusInactive string = "inactive"

	// DeviceStatusDisabled captures enum value "disabled"
	DeviceStatusDisabled string = "disabled"

	// DeviceStatusDisconnected captures enum value "disconnected"
	DeviceStatusDisconnected string = "disconnected"

	// DeviceStatusUnauthorized captures enum value "unauthorized"
	DeviceStatusUnauthorized string = "unauthorized"

	// DeviceStatusProposed captures enum value "proposed"
	DeviceStatusProposed string = "proposed"

	// DeviceStatusUnknown captures enum value "unknown"
	DeviceStatusUnknown string = "unknown"

	// DeviceStatusUnplaced captures enum value "unplaced"
	DeviceStatusUnplaced string = "unplaced"

	// DeviceStatusCustom captures enum value "custom"
	DeviceStatusCustom string = "custom"
)

// prop value enum
func (m *Device) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Device) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
