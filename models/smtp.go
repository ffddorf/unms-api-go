// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SMTP smtp
// swagger:model smtp
type SMTP struct {

	// custom Smtp auth enabled
	CustomSMTPAuthEnabled bool `json:"customSmtpAuthEnabled,omitempty"`

	// custom Smtp hostname
	CustomSMTPHostname string `json:"customSmtpHostname,omitempty"`

	// custom Smtp password
	CustomSMTPPassword string `json:"customSmtpPassword,omitempty"`

	// custom Smtp port
	// Maximum: 65535
	// Minimum: 0
	CustomSMTPPort *int64 `json:"customSmtpPort,omitempty"`

	// custom Smtp security mode
	// Enum: [Plain text SSL TLS]
	CustomSMTPSecurityMode string `json:"customSmtpSecurityMode,omitempty"`

	// custom Smtp sender
	CustomSMTPSender string `json:"customSmtpSender,omitempty"`

	// custom Smtp username
	CustomSMTPUsername string `json:"customSmtpUsername,omitempty"`

	// gmail password
	GmailPassword string `json:"gmailPassword,omitempty"`

	// gmail username
	GmailUsername string `json:"gmailUsername,omitempty"`

	// tls allow unauthorized
	TLSAllowUnauthorized bool `json:"tlsAllowUnauthorized,omitempty"`

	// type
	// Enum: [smtp gmail nosmtp cloud]
	Type string `json:"type,omitempty"`
}

// Validate validates this smtp
func (m *SMTP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomSMTPPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomSMTPSecurityMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SMTP) validateCustomSMTPPort(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomSMTPPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("customSmtpPort", "body", int64(*m.CustomSMTPPort), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("customSmtpPort", "body", int64(*m.CustomSMTPPort), 65535, false); err != nil {
		return err
	}

	return nil
}

var smtpTypeCustomSMTPSecurityModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Plain text","SSL","TLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smtpTypeCustomSMTPSecurityModePropEnum = append(smtpTypeCustomSMTPSecurityModePropEnum, v)
	}
}

const (

	// SMTPCustomSMTPSecurityModePlainText captures enum value "Plain text"
	SMTPCustomSMTPSecurityModePlainText string = "Plain text"

	// SMTPCustomSMTPSecurityModeSSL captures enum value "SSL"
	SMTPCustomSMTPSecurityModeSSL string = "SSL"

	// SMTPCustomSMTPSecurityModeTLS captures enum value "TLS"
	SMTPCustomSMTPSecurityModeTLS string = "TLS"
)

// prop value enum
func (m *SMTP) validateCustomSMTPSecurityModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smtpTypeCustomSMTPSecurityModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SMTP) validateCustomSMTPSecurityMode(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomSMTPSecurityMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateCustomSMTPSecurityModeEnum("customSmtpSecurityMode", "body", m.CustomSMTPSecurityMode); err != nil {
		return err
	}

	return nil
}

var smtpTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["smtp","gmail","nosmtp","cloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smtpTypeTypePropEnum = append(smtpTypeTypePropEnum, v)
	}
}

const (

	// SMTPTypeSMTP captures enum value "smtp"
	SMTPTypeSMTP string = "smtp"

	// SMTPTypeGmail captures enum value "gmail"
	SMTPTypeGmail string = "gmail"

	// SMTPTypeNosmtp captures enum value "nosmtp"
	SMTPTypeNosmtp string = "nosmtp"

	// SMTPTypeCloud captures enum value "cloud"
	SMTPTypeCloud string = "cloud"
)

// prop value enum
func (m *SMTP) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smtpTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SMTP) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SMTP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SMTP) UnmarshalBinary(b []byte) error {
	var res SMTP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
