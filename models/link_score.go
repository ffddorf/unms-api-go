// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LinkScore link score
// swagger:model linkScore
type LinkScore struct {

	// Hint for better score.
	Hint string `json:"hint,omitempty"`

	// Result score 0 - 1, for example 0.33 is 33%.
	// Maximum: 1
	// Minimum: 0
	ResultScore *float64 `json:"resultScore,omitempty"`

	// Score 0 - 1, for example 0.33 is 33%.
	// Maximum: 1
	// Minimum: 0
	Score *float64 `json:"score,omitempty"`

	// Score airTime 0 - 1, for example 0.33 is 33%.
	// Maximum: 1
	// Minimum: 0
	ScoreAirTime *float64 `json:"scoreAirTime,omitempty"`

	// Score max 0 - 1, for example 0.33 is 33%.
	// Maximum: 1
	// Minimum: 0
	ScoreMax *float64 `json:"scoreMax,omitempty"`
}

// Validate validates this link score
func (m *LinkScore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResultScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreAirTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreMax(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkScore) validateResultScore(formats strfmt.Registry) error {

	if swag.IsZero(m.ResultScore) { // not required
		return nil
	}

	if err := validate.Minimum("resultScore", "body", float64(*m.ResultScore), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("resultScore", "body", float64(*m.ResultScore), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LinkScore) validateScore(formats strfmt.Registry) error {

	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if err := validate.Minimum("score", "body", float64(*m.Score), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("score", "body", float64(*m.Score), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LinkScore) validateScoreAirTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ScoreAirTime) { // not required
		return nil
	}

	if err := validate.Minimum("scoreAirTime", "body", float64(*m.ScoreAirTime), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("scoreAirTime", "body", float64(*m.ScoreAirTime), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LinkScore) validateScoreMax(formats strfmt.Registry) error {

	if swag.IsZero(m.ScoreMax) { // not required
		return nil
	}

	if err := validate.Minimum("scoreMax", "body", float64(*m.ScoreMax), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("scoreMax", "body", float64(*m.ScoreMax), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LinkScore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinkScore) UnmarshalBinary(b []byte) error {
	var res LinkScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
