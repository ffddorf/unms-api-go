// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnableTotpAuth enable totp auth
// swagger:model EnableTotpAuth
type EnableTotpAuth struct {

	// password
	// Max Length: 64
	// Min Length: 4
	Password string `json:"password,omitempty"`

	// totp auth enabled
	// Required: true
	TotpAuthEnabled *bool `json:"totpAuthEnabled"`

	// totp auth secret
	TotpAuthSecret string `json:"totpAuthSecret,omitempty"`

	// verification code
	VerificationCode string `json:"verificationCode,omitempty"`
}

// Validate validates this enable totp auth
func (m *EnableTotpAuth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotpAuthEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnableTotpAuth) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", string(m.Password), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(m.Password), 64); err != nil {
		return err
	}

	return nil
}

func (m *EnableTotpAuth) validateTotpAuthEnabled(formats strfmt.Registry) error {

	if err := validate.Required("totpAuthEnabled", "body", m.TotpAuthEnabled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnableTotpAuth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnableTotpAuth) UnmarshalBinary(b []byte) error {
	var res EnableTotpAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
