// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceBlackBoxConfig device black box config
// swagger:model DeviceBlackBoxConfig
type DeviceBlackBoxConfig struct {

	// device Id
	// Required: true
	DeviceID *string `json:"deviceId"`

	// device role
	// Enum: [router switch gpon ap station other ups server wireless convertor gateway]
	DeviceRole *string `json:"deviceRole,omitempty"`

	// hostname
	// Required: true
	// Min Length: 1
	Hostname *string `json:"hostname"`

	// interfaces
	// Required: true
	Interfaces ListOfInterfaces `json:"interfaces"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// mac address
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	MacAddress string `json:"macAddress,omitempty"`

	// model name
	// Max Length: 50
	ModelName string `json:"modelName,omitempty"`

	// note
	Note string `json:"note,omitempty"`

	// ping enabled
	// Required: true
	PingEnabled bool `json:"pingEnabled"`

	// site Id
	// Required: true
	SiteID *string `json:"siteId"`

	// snmp community
	SnmpCommunity string `json:"snmpCommunity,omitempty"`

	// ubnt data
	UbntData *UbntData `json:"ubntData,omitempty"`

	// ubnt device
	UbntDevice *bool `json:"ubntDevice,omitempty"`
}

// Validate validates this device black box config
func (m *DeviceBlackBoxConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUbntData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceBlackBoxConfig) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

var deviceBlackBoxConfigTypeDeviceRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceBlackBoxConfigTypeDeviceRolePropEnum = append(deviceBlackBoxConfigTypeDeviceRolePropEnum, v)
	}
}

const (

	// DeviceBlackBoxConfigDeviceRoleRouter captures enum value "router"
	DeviceBlackBoxConfigDeviceRoleRouter string = "router"

	// DeviceBlackBoxConfigDeviceRoleSwitch captures enum value "switch"
	DeviceBlackBoxConfigDeviceRoleSwitch string = "switch"

	// DeviceBlackBoxConfigDeviceRoleGpon captures enum value "gpon"
	DeviceBlackBoxConfigDeviceRoleGpon string = "gpon"

	// DeviceBlackBoxConfigDeviceRoleAp captures enum value "ap"
	DeviceBlackBoxConfigDeviceRoleAp string = "ap"

	// DeviceBlackBoxConfigDeviceRoleStation captures enum value "station"
	DeviceBlackBoxConfigDeviceRoleStation string = "station"

	// DeviceBlackBoxConfigDeviceRoleOther captures enum value "other"
	DeviceBlackBoxConfigDeviceRoleOther string = "other"

	// DeviceBlackBoxConfigDeviceRoleUps captures enum value "ups"
	DeviceBlackBoxConfigDeviceRoleUps string = "ups"

	// DeviceBlackBoxConfigDeviceRoleServer captures enum value "server"
	DeviceBlackBoxConfigDeviceRoleServer string = "server"

	// DeviceBlackBoxConfigDeviceRoleWireless captures enum value "wireless"
	DeviceBlackBoxConfigDeviceRoleWireless string = "wireless"

	// DeviceBlackBoxConfigDeviceRoleConvertor captures enum value "convertor"
	DeviceBlackBoxConfigDeviceRoleConvertor string = "convertor"

	// DeviceBlackBoxConfigDeviceRoleGateway captures enum value "gateway"
	DeviceBlackBoxConfigDeviceRoleGateway string = "gateway"
)

// prop value enum
func (m *DeviceBlackBoxConfig) validateDeviceRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceBlackBoxConfigTypeDeviceRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceBlackBoxConfig) validateDeviceRole(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceRole) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceRoleEnum("deviceRole", "body", *m.DeviceRole); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBlackBoxConfig) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	if err := validate.MinLength("hostname", "body", string(*m.Hostname), 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBlackBoxConfig) validateInterfaces(formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	if err := m.Interfaces.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interfaces")
		}
		return err
	}

	return nil
}

func (m *DeviceBlackBoxConfig) validateMacAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.MacAddress) { // not required
		return nil
	}

	if err := validate.Pattern("macAddress", "body", string(m.MacAddress), `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBlackBoxConfig) validateModelName(formats strfmt.Registry) error {

	if swag.IsZero(m.ModelName) { // not required
		return nil
	}

	if err := validate.MaxLength("modelName", "body", string(m.ModelName), 50); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBlackBoxConfig) validatePingEnabled(formats strfmt.Registry) error {

	if err := validate.Required("pingEnabled", "body", bool(m.PingEnabled)); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBlackBoxConfig) validateSiteID(formats strfmt.Registry) error {

	if err := validate.Required("siteId", "body", m.SiteID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBlackBoxConfig) validateUbntData(formats strfmt.Registry) error {

	if swag.IsZero(m.UbntData) { // not required
		return nil
	}

	if m.UbntData != nil {
		if err := m.UbntData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ubntData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceBlackBoxConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceBlackBoxConfig) UnmarshalBinary(b []byte) error {
	var res DeviceBlackBoxConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
