// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Airfiber airfiber
// swagger:model airfiber
type Airfiber struct {

	// antenna
	Antenna string `json:"antenna,omitempty"`

	// ap device
	ApDevice *ApDevice1 `json:"apDevice,omitempty"`

	// ap mac
	ApMac string `json:"apMac,omitempty"`

	// authentication
	// Enum: [psk psk2 ent none]
	Authentication string `json:"authentication,omitempty"`

	// bridge mode
	// Enum: [hw sw]
	BridgeMode string `json:"bridgeMode,omitempty"`

	// channel width
	// Minimum: 0
	ChannelWidth *int64 `json:"channelWidth,omitempty"`

	// country code
	// Minimum: 0
	CountryCode *int64 `json:"countryCode,omitempty"`

	// frame length
	FrameLength float64 `json:"frameLength,omitempty"`

	// frequency
	// Minimum: 0
	Frequency *float64 `json:"frequency,omitempty"`

	// frequency bands
	FrequencyBands FrequencyBands `json:"frequencyBands,omitempty"`

	// noise floor
	NoiseFloor string `json:"noiseFloor,omitempty"`

	// receive chains
	ReceiveChains float64 `json:"receiveChains,omitempty"`

	// remote signal
	RemoteSignal string `json:"remoteSignal,omitempty"`

	// security
	// Enum: [wep wpa wpa2 none]
	Security string `json:"security,omitempty"`

	// series
	// Enum: [LTU classic G60]
	Series string `json:"series,omitempty"`

	// signal chain
	SignalChain SignalChain `json:"signalChain,omitempty"`

	// signal remote chain
	SignalRemoteChain SignalRemoteChain `json:"signalRemoteChain,omitempty"`

	// ssid
	Ssid string `json:"ssid,omitempty"`

	// station name
	StationName string `json:"stationName,omitempty"`

	// stations count
	StationsCount float64 `json:"stationsCount,omitempty"`

	// transmit chains
	TransmitChains float64 `json:"transmitChains,omitempty"`

	// transmit duty cycle
	TransmitDutyCycle float64 `json:"transmitDutyCycle,omitempty"`

	// transmit eirp
	TransmitEirp float64 `json:"transmitEirp,omitempty"`

	// transmit power
	TransmitPower float64 `json:"transmitPower,omitempty"`

	// wireless mode
	// Enum: [ap ap-ptp ap-ptmp ap-ptmp-airmax ap-ptmp-airmax-mixed ap-ptmp-airmax-ac sta sta-ptp sta-ptmp aprepeater repeater mesh]
	WirelessMode string `json:"wirelessMode,omitempty"`
}

// Validate validates this airfiber
func (m *Airfiber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBridgeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequencyBands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalRemoteChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWirelessMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Airfiber) validateApDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.ApDevice) { // not required
		return nil
	}

	if m.ApDevice != nil {
		if err := m.ApDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apDevice")
			}
			return err
		}
	}

	return nil
}

var airfiberTypeAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiberTypeAuthenticationPropEnum = append(airfiberTypeAuthenticationPropEnum, v)
	}
}

const (

	// AirfiberAuthenticationPsk captures enum value "psk"
	AirfiberAuthenticationPsk string = "psk"

	// AirfiberAuthenticationPsk2 captures enum value "psk2"
	AirfiberAuthenticationPsk2 string = "psk2"

	// AirfiberAuthenticationEnt captures enum value "ent"
	AirfiberAuthenticationEnt string = "ent"

	// AirfiberAuthenticationNone captures enum value "none"
	AirfiberAuthenticationNone string = "none"
)

// prop value enum
func (m *Airfiber) validateAuthenticationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiberTypeAuthenticationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber) validateAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationEnum("authentication", "body", m.Authentication); err != nil {
		return err
	}

	return nil
}

var airfiberTypeBridgeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hw","sw"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiberTypeBridgeModePropEnum = append(airfiberTypeBridgeModePropEnum, v)
	}
}

const (

	// AirfiberBridgeModeHw captures enum value "hw"
	AirfiberBridgeModeHw string = "hw"

	// AirfiberBridgeModeSw captures enum value "sw"
	AirfiberBridgeModeSw string = "sw"
)

// prop value enum
func (m *Airfiber) validateBridgeModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiberTypeBridgeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber) validateBridgeMode(formats strfmt.Registry) error {

	if swag.IsZero(m.BridgeMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBridgeModeEnum("bridgeMode", "body", m.BridgeMode); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber) validateChannelWidth(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelWidth) { // not required
		return nil
	}

	if err := validate.MinimumInt("channelWidth", "body", int64(*m.ChannelWidth), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.MinimumInt("countryCode", "body", int64(*m.CountryCode), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber) validateFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	if err := validate.Minimum("frequency", "body", float64(*m.Frequency), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber) validateFrequencyBands(formats strfmt.Registry) error {

	if swag.IsZero(m.FrequencyBands) { // not required
		return nil
	}

	if err := m.FrequencyBands.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("frequencyBands")
		}
		return err
	}

	return nil
}

var airfiberTypeSecurityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa","wpa2","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiberTypeSecurityPropEnum = append(airfiberTypeSecurityPropEnum, v)
	}
}

const (

	// AirfiberSecurityWep captures enum value "wep"
	AirfiberSecurityWep string = "wep"

	// AirfiberSecurityWpa captures enum value "wpa"
	AirfiberSecurityWpa string = "wpa"

	// AirfiberSecurityWpa2 captures enum value "wpa2"
	AirfiberSecurityWpa2 string = "wpa2"

	// AirfiberSecurityNone captures enum value "none"
	AirfiberSecurityNone string = "none"
)

// prop value enum
func (m *Airfiber) validateSecurityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiberTypeSecurityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber) validateSecurity(formats strfmt.Registry) error {

	if swag.IsZero(m.Security) { // not required
		return nil
	}

	// value enum
	if err := m.validateSecurityEnum("security", "body", m.Security); err != nil {
		return err
	}

	return nil
}

var airfiberTypeSeriesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LTU","classic","G60"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiberTypeSeriesPropEnum = append(airfiberTypeSeriesPropEnum, v)
	}
}

const (

	// AirfiberSeriesLTU captures enum value "LTU"
	AirfiberSeriesLTU string = "LTU"

	// AirfiberSeriesClassic captures enum value "classic"
	AirfiberSeriesClassic string = "classic"

	// AirfiberSeriesG60 captures enum value "G60"
	AirfiberSeriesG60 string = "G60"
)

// prop value enum
func (m *Airfiber) validateSeriesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiberTypeSeriesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber) validateSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.Series) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeriesEnum("series", "body", m.Series); err != nil {
		return err
	}

	return nil
}

func (m *Airfiber) validateSignalChain(formats strfmt.Registry) error {

	if swag.IsZero(m.SignalChain) { // not required
		return nil
	}

	if err := m.SignalChain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalChain")
		}
		return err
	}

	return nil
}

func (m *Airfiber) validateSignalRemoteChain(formats strfmt.Registry) error {

	if swag.IsZero(m.SignalRemoteChain) { // not required
		return nil
	}

	if err := m.SignalRemoteChain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalRemoteChain")
		}
		return err
	}

	return nil
}

var airfiberTypeWirelessModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airfiberTypeWirelessModePropEnum = append(airfiberTypeWirelessModePropEnum, v)
	}
}

const (

	// AirfiberWirelessModeAp captures enum value "ap"
	AirfiberWirelessModeAp string = "ap"

	// AirfiberWirelessModeApPtp captures enum value "ap-ptp"
	AirfiberWirelessModeApPtp string = "ap-ptp"

	// AirfiberWirelessModeApPtmp captures enum value "ap-ptmp"
	AirfiberWirelessModeApPtmp string = "ap-ptmp"

	// AirfiberWirelessModeApPtmpAirmax captures enum value "ap-ptmp-airmax"
	AirfiberWirelessModeApPtmpAirmax string = "ap-ptmp-airmax"

	// AirfiberWirelessModeApPtmpAirmaxMixed captures enum value "ap-ptmp-airmax-mixed"
	AirfiberWirelessModeApPtmpAirmaxMixed string = "ap-ptmp-airmax-mixed"

	// AirfiberWirelessModeApPtmpAirmaxAc captures enum value "ap-ptmp-airmax-ac"
	AirfiberWirelessModeApPtmpAirmaxAc string = "ap-ptmp-airmax-ac"

	// AirfiberWirelessModeSta captures enum value "sta"
	AirfiberWirelessModeSta string = "sta"

	// AirfiberWirelessModeStaPtp captures enum value "sta-ptp"
	AirfiberWirelessModeStaPtp string = "sta-ptp"

	// AirfiberWirelessModeStaPtmp captures enum value "sta-ptmp"
	AirfiberWirelessModeStaPtmp string = "sta-ptmp"

	// AirfiberWirelessModeAprepeater captures enum value "aprepeater"
	AirfiberWirelessModeAprepeater string = "aprepeater"

	// AirfiberWirelessModeRepeater captures enum value "repeater"
	AirfiberWirelessModeRepeater string = "repeater"

	// AirfiberWirelessModeMesh captures enum value "mesh"
	AirfiberWirelessModeMesh string = "mesh"
)

// prop value enum
func (m *Airfiber) validateWirelessModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, airfiberTypeWirelessModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Airfiber) validateWirelessMode(formats strfmt.Registry) error {

	if swag.IsZero(m.WirelessMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateWirelessModeEnum("wirelessMode", "body", m.WirelessMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Airfiber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Airfiber) UnmarshalBinary(b []byte) error {
	var res Airfiber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
