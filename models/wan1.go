// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Wan1 wan 1
// swagger:model wan 1
type Wan1 struct {

	// dns resolvers
	// Required: true
	DNSResolvers DNSResolvers `json:"dnsResolvers"`

	// IPv4 address of gateway
	// Required: true
	Gateway *string `json:"gateway"`

	// PPPoE mode, required if WAN mode set to PPPoE
	// Required: true
	// Enum: [auto pap chap]
	PppoeMode *string `json:"pppoeMode"`

	// PPPoE password
	// Required: true
	PppoePassword *string `json:"pppoePassword"`

	// PPPoE username
	// Required: true
	PppoeUser *string `json:"pppoeUser"`

	// WAN address of ONU in CIDR format - required if wanMode is set to "static"
	// Required: true
	WanAddress *string `json:"wanAddress"`

	// WAN mode
	// Required: true
	// Enum: [static dhcp pppoe]
	WanMode *string `json:"wanMode"`
}

// Validate validates this wan 1
func (m *Wan1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSResolvers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePppoeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePppoePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePppoeUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWanAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWanMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wan1) validateDNSResolvers(formats strfmt.Registry) error {

	if err := validate.Required("dnsResolvers", "body", m.DNSResolvers); err != nil {
		return err
	}

	if err := m.DNSResolvers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dnsResolvers")
		}
		return err
	}

	return nil
}

func (m *Wan1) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

var wan1TypePppoeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","pap","chap"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wan1TypePppoeModePropEnum = append(wan1TypePppoeModePropEnum, v)
	}
}

const (

	// Wan1PppoeModeAuto captures enum value "auto"
	Wan1PppoeModeAuto string = "auto"

	// Wan1PppoeModePap captures enum value "pap"
	Wan1PppoeModePap string = "pap"

	// Wan1PppoeModeChap captures enum value "chap"
	Wan1PppoeModeChap string = "chap"
)

// prop value enum
func (m *Wan1) validatePppoeModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, wan1TypePppoeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Wan1) validatePppoeMode(formats strfmt.Registry) error {

	if err := validate.Required("pppoeMode", "body", m.PppoeMode); err != nil {
		return err
	}

	// value enum
	if err := m.validatePppoeModeEnum("pppoeMode", "body", *m.PppoeMode); err != nil {
		return err
	}

	return nil
}

func (m *Wan1) validatePppoePassword(formats strfmt.Registry) error {

	if err := validate.Required("pppoePassword", "body", m.PppoePassword); err != nil {
		return err
	}

	return nil
}

func (m *Wan1) validatePppoeUser(formats strfmt.Registry) error {

	if err := validate.Required("pppoeUser", "body", m.PppoeUser); err != nil {
		return err
	}

	return nil
}

func (m *Wan1) validateWanAddress(formats strfmt.Registry) error {

	if err := validate.Required("wanAddress", "body", m.WanAddress); err != nil {
		return err
	}

	return nil
}

var wan1TypeWanModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","dhcp","pppoe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wan1TypeWanModePropEnum = append(wan1TypeWanModePropEnum, v)
	}
}

const (

	// Wan1WanModeStatic captures enum value "static"
	Wan1WanModeStatic string = "static"

	// Wan1WanModeDhcp captures enum value "dhcp"
	Wan1WanModeDhcp string = "dhcp"

	// Wan1WanModePppoe captures enum value "pppoe"
	Wan1WanModePppoe string = "pppoe"
)

// prop value enum
func (m *Wan1) validateWanModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, wan1TypeWanModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Wan1) validateWanMode(formats strfmt.Registry) error {

	if err := validate.Required("wanMode", "body", m.WanMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateWanModeEnum("wanMode", "body", *m.WanMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Wan1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wan1) UnmarshalBinary(b []byte) error {
	var res Wan1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
