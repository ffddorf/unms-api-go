// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnuProfile onu profile
// swagger:model OnuProfile
type OnuProfile struct {

	// admin password
	// Max Length: 12
	// Min Length: 1
	AdminPassword string `json:"adminPassword,omitempty"`

	// bandwidth limit down
	// Maximum: 1000
	// Minimum: 1
	BandwidthLimitDown int64 `json:"bandwidthLimitDown,omitempty"`

	// bandwidth limit enabled
	BandwidthLimitEnabled bool `json:"bandwidthLimitEnabled,omitempty"`

	// bandwidth limit up
	// Maximum: 1000
	// Minimum: 1
	BandwidthLimitUp int64 `json:"bandwidthLimitUp,omitempty"`

	// bridge
	Bridge *Bridge `json:"bridge,omitempty"`

	// http port
	// Maximum: 65535
	// Minimum: 1
	HTTPPort int64 `json:"httpPort,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// lan address
	LanAddress string `json:"lanAddress,omitempty"`

	// lan provisioned
	LanProvisioned bool `json:"lanProvisioned,omitempty"`

	// link speed
	LinkSpeed LinkSpeed `json:"linkSpeed,omitempty"`

	// mode
	// Enum: [bridge router]
	Mode string `json:"mode,omitempty"`

	// name
	// Max Length: 80
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// onu count
	OnuCount float64 `json:"onuCount,omitempty"`

	// router
	Router *Router `json:"router,omitempty"`

	// ssh enabled
	SSHEnabled bool `json:"sshEnabled,omitempty"`

	// ssh port
	// Maximum: 65535
	// Minimum: 1
	SSHPort int64 `json:"sshPort,omitempty"`

	// telnet enabled
	TelnetEnabled bool `json:"telnetEnabled,omitempty"`

	// telnet port
	// Maximum: 65535
	// Minimum: 1
	TelnetPort int64 `json:"telnetPort,omitempty"`

	// ubnt discovery enabled
	UbntDiscoveryEnabled bool `json:"ubntDiscoveryEnabled,omitempty"`
}

// Validate validates this onu profile
func (m *OnuProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBandwidthLimitDown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBandwidthLimitUp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBridge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelnetPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnuProfile) validateAdminPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminPassword) { // not required
		return nil
	}

	if err := validate.MinLength("adminPassword", "body", string(m.AdminPassword), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("adminPassword", "body", string(m.AdminPassword), 12); err != nil {
		return err
	}

	return nil
}

func (m *OnuProfile) validateBandwidthLimitDown(formats strfmt.Registry) error {

	if swag.IsZero(m.BandwidthLimitDown) { // not required
		return nil
	}

	if err := validate.MinimumInt("bandwidthLimitDown", "body", int64(m.BandwidthLimitDown), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("bandwidthLimitDown", "body", int64(m.BandwidthLimitDown), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *OnuProfile) validateBandwidthLimitUp(formats strfmt.Registry) error {

	if swag.IsZero(m.BandwidthLimitUp) { // not required
		return nil
	}

	if err := validate.MinimumInt("bandwidthLimitUp", "body", int64(m.BandwidthLimitUp), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("bandwidthLimitUp", "body", int64(m.BandwidthLimitUp), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *OnuProfile) validateBridge(formats strfmt.Registry) error {

	if swag.IsZero(m.Bridge) { // not required
		return nil
	}

	if m.Bridge != nil {
		if err := m.Bridge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bridge")
			}
			return err
		}
	}

	return nil
}

func (m *OnuProfile) validateHTTPPort(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("httpPort", "body", int64(m.HTTPPort), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("httpPort", "body", int64(m.HTTPPort), 65535, false); err != nil {
		return err
	}

	return nil
}

var onuProfileTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bridge","router"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onuProfileTypeModePropEnum = append(onuProfileTypeModePropEnum, v)
	}
}

const (

	// OnuProfileModeBridge captures enum value "bridge"
	OnuProfileModeBridge string = "bridge"

	// OnuProfileModeRouter captures enum value "router"
	OnuProfileModeRouter string = "router"
)

// prop value enum
func (m *OnuProfile) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, onuProfileTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OnuProfile) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *OnuProfile) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 80); err != nil {
		return err
	}

	return nil
}

func (m *OnuProfile) validateRouter(formats strfmt.Registry) error {

	if swag.IsZero(m.Router) { // not required
		return nil
	}

	if m.Router != nil {
		if err := m.Router.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router")
			}
			return err
		}
	}

	return nil
}

func (m *OnuProfile) validateSSHPort(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("sshPort", "body", int64(m.SSHPort), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sshPort", "body", int64(m.SSHPort), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *OnuProfile) validateTelnetPort(formats strfmt.Registry) error {

	if swag.IsZero(m.TelnetPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("telnetPort", "body", int64(m.TelnetPort), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("telnetPort", "body", int64(m.TelnetPort), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnuProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnuProfile) UnmarshalBinary(b []byte) error {
	var res OnuProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
