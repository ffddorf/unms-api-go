// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupWPA backup w p a
// swagger:model backupWPA
type BackupWPA struct {

	// MAC address
	// Required: true
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	ApMac *string `json:"apMac"`

	// eap anonymous identity
	// Required: true
	EapAnonymousIdentity *string `json:"eapAnonymousIdentity"`

	// eap password
	// Required: true
	EapPassword *string `json:"eapPassword"`

	// eap type
	// Required: true
	// Enum: [PEAP TTLS]
	EapType *string `json:"eapType"`

	// eap type ext
	// Required: true
	// Enum: [auth=MSCHAPV2]
	EapTypeExt *string `json:"eapTypeExt"`

	// eap username
	// Required: true
	EapUsername *string `json:"eapUsername"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// preshared key
	// Required: true
	PresharedKey *string `json:"presharedKey"`

	// security
	// Required: true
	// Enum: [wep wpa wpa2 wpaTKIP wpa2TKIP wpaAES wpa2AES aes256 none]
	Security *string `json:"security"`

	// ssid
	// Required: true
	Ssid *string `json:"ssid"`

	// wpa authentication
	// Required: true
	// Enum: [psk psk2 ent none]
	WpaAuthentication *string `json:"wpaAuthentication"`
}

// Validate validates this backup w p a
func (m *BackupWPA) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapAnonymousIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapTypeExt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresharedKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWpaAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupWPA) validateApMac(formats strfmt.Registry) error {

	if err := validate.Required("apMac", "body", m.ApMac); err != nil {
		return err
	}

	if err := validate.Pattern("apMac", "body", string(*m.ApMac), `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

func (m *BackupWPA) validateEapAnonymousIdentity(formats strfmt.Registry) error {

	if err := validate.Required("eapAnonymousIdentity", "body", m.EapAnonymousIdentity); err != nil {
		return err
	}

	return nil
}

func (m *BackupWPA) validateEapPassword(formats strfmt.Registry) error {

	if err := validate.Required("eapPassword", "body", m.EapPassword); err != nil {
		return err
	}

	return nil
}

var backupWPATypeEapTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PEAP","TTLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupWPATypeEapTypePropEnum = append(backupWPATypeEapTypePropEnum, v)
	}
}

const (

	// BackupWPAEapTypePEAP captures enum value "PEAP"
	BackupWPAEapTypePEAP string = "PEAP"

	// BackupWPAEapTypeTTLS captures enum value "TTLS"
	BackupWPAEapTypeTTLS string = "TTLS"
)

// prop value enum
func (m *BackupWPA) validateEapTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backupWPATypeEapTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackupWPA) validateEapType(formats strfmt.Registry) error {

	if err := validate.Required("eapType", "body", m.EapType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEapTypeEnum("eapType", "body", *m.EapType); err != nil {
		return err
	}

	return nil
}

var backupWPATypeEapTypeExtPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auth=MSCHAPV2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupWPATypeEapTypeExtPropEnum = append(backupWPATypeEapTypeExtPropEnum, v)
	}
}

const (

	// BackupWPAEapTypeExtAuthMSCHAPV2 captures enum value "auth=MSCHAPV2"
	BackupWPAEapTypeExtAuthMSCHAPV2 string = "auth=MSCHAPV2"
)

// prop value enum
func (m *BackupWPA) validateEapTypeExtEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backupWPATypeEapTypeExtPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackupWPA) validateEapTypeExt(formats strfmt.Registry) error {

	if err := validate.Required("eapTypeExt", "body", m.EapTypeExt); err != nil {
		return err
	}

	// value enum
	if err := m.validateEapTypeExtEnum("eapTypeExt", "body", *m.EapTypeExt); err != nil {
		return err
	}

	return nil
}

func (m *BackupWPA) validateEapUsername(formats strfmt.Registry) error {

	if err := validate.Required("eapUsername", "body", m.EapUsername); err != nil {
		return err
	}

	return nil
}

func (m *BackupWPA) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *BackupWPA) validatePresharedKey(formats strfmt.Registry) error {

	if err := validate.Required("presharedKey", "body", m.PresharedKey); err != nil {
		return err
	}

	return nil
}

var backupWPATypeSecurityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa","wpa2","wpaTKIP","wpa2TKIP","wpaAES","wpa2AES","aes256","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupWPATypeSecurityPropEnum = append(backupWPATypeSecurityPropEnum, v)
	}
}

const (

	// BackupWPASecurityWep captures enum value "wep"
	BackupWPASecurityWep string = "wep"

	// BackupWPASecurityWpa captures enum value "wpa"
	BackupWPASecurityWpa string = "wpa"

	// BackupWPASecurityWpa2 captures enum value "wpa2"
	BackupWPASecurityWpa2 string = "wpa2"

	// BackupWPASecurityWpaTKIP captures enum value "wpaTKIP"
	BackupWPASecurityWpaTKIP string = "wpaTKIP"

	// BackupWPASecurityWpa2TKIP captures enum value "wpa2TKIP"
	BackupWPASecurityWpa2TKIP string = "wpa2TKIP"

	// BackupWPASecurityWpaAES captures enum value "wpaAES"
	BackupWPASecurityWpaAES string = "wpaAES"

	// BackupWPASecurityWpa2AES captures enum value "wpa2AES"
	BackupWPASecurityWpa2AES string = "wpa2AES"

	// BackupWPASecurityAes256 captures enum value "aes256"
	BackupWPASecurityAes256 string = "aes256"

	// BackupWPASecurityNone captures enum value "none"
	BackupWPASecurityNone string = "none"
)

// prop value enum
func (m *BackupWPA) validateSecurityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backupWPATypeSecurityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackupWPA) validateSecurity(formats strfmt.Registry) error {

	if err := validate.Required("security", "body", m.Security); err != nil {
		return err
	}

	// value enum
	if err := m.validateSecurityEnum("security", "body", *m.Security); err != nil {
		return err
	}

	return nil
}

func (m *BackupWPA) validateSsid(formats strfmt.Registry) error {

	if err := validate.Required("ssid", "body", m.Ssid); err != nil {
		return err
	}

	return nil
}

var backupWPATypeWpaAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupWPATypeWpaAuthenticationPropEnum = append(backupWPATypeWpaAuthenticationPropEnum, v)
	}
}

const (

	// BackupWPAWpaAuthenticationPsk captures enum value "psk"
	BackupWPAWpaAuthenticationPsk string = "psk"

	// BackupWPAWpaAuthenticationPsk2 captures enum value "psk2"
	BackupWPAWpaAuthenticationPsk2 string = "psk2"

	// BackupWPAWpaAuthenticationEnt captures enum value "ent"
	BackupWPAWpaAuthenticationEnt string = "ent"

	// BackupWPAWpaAuthenticationNone captures enum value "none"
	BackupWPAWpaAuthenticationNone string = "none"
)

// prop value enum
func (m *BackupWPA) validateWpaAuthenticationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backupWPATypeWpaAuthenticationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackupWPA) validateWpaAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("wpaAuthentication", "body", m.WpaAuthentication); err != nil {
		return err
	}

	// value enum
	if err := m.validateWpaAuthenticationEnum("wpaAuthentication", "body", *m.WpaAuthentication); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupWPA) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupWPA) UnmarshalBinary(b []byte) error {
	var res BackupWPA
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
