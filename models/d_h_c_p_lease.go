// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DHCPLease d h c p lease
// swagger:model DHCPLease
type DHCPLease struct {

	// address
	Address string `json:"address,omitempty"`

	// expiration date in ISO format (UNMS-420); Nullable string.
	Expiration string `json:"expiration,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// Unique per dhcp server.
	// Min Length: 1
	LeaseID string `json:"leaseId,omitempty"`

	// mac
	Mac string `json:"mac,omitempty"`

	// server name
	// Min Length: 1
	ServerName string `json:"serverName,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this d h c p lease
func (m *DHCPLease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLeaseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DHCPLease) validateLeaseID(formats strfmt.Registry) error {

	if swag.IsZero(m.LeaseID) { // not required
		return nil
	}

	if err := validate.MinLength("leaseId", "body", string(m.LeaseID), 1); err != nil {
		return err
	}

	return nil
}

func (m *DHCPLease) validateServerName(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerName) { // not required
		return nil
	}

	if err := validate.MinLength("serverName", "body", string(m.ServerName), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DHCPLease) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DHCPLease) UnmarshalBinary(b []byte) error {
	var res DHCPLease
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
