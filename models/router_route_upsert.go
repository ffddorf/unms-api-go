// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouterRouteUpsert router route upsert
// swagger:model RouterRouteUpsert
type RouterRouteUpsert struct {

	// description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// destination
	// Required: true
	Destination *string `json:"destination"`

	// distance
	// Required: true
	// Maximum: 255
	// Minimum: 1
	Distance *float64 `json:"distance"`

	// static type
	// Required: true
	// Enum: [interface blackhole gateway]
	StaticType *string `json:"staticType"`
}

// Validate validates this router route upsert
func (m *RouterRouteUpsert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouterRouteUpsert) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 200); err != nil {
		return err
	}

	return nil
}

func (m *RouterRouteUpsert) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *RouterRouteUpsert) validateDistance(formats strfmt.Registry) error {

	if err := validate.Required("distance", "body", m.Distance); err != nil {
		return err
	}

	if err := validate.Minimum("distance", "body", float64(*m.Distance), 1, false); err != nil {
		return err
	}

	if err := validate.Maximum("distance", "body", float64(*m.Distance), 255, false); err != nil {
		return err
	}

	return nil
}

var routerRouteUpsertTypeStaticTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["interface","blackhole","gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routerRouteUpsertTypeStaticTypePropEnum = append(routerRouteUpsertTypeStaticTypePropEnum, v)
	}
}

const (

	// RouterRouteUpsertStaticTypeInterface captures enum value "interface"
	RouterRouteUpsertStaticTypeInterface string = "interface"

	// RouterRouteUpsertStaticTypeBlackhole captures enum value "blackhole"
	RouterRouteUpsertStaticTypeBlackhole string = "blackhole"

	// RouterRouteUpsertStaticTypeGateway captures enum value "gateway"
	RouterRouteUpsertStaticTypeGateway string = "gateway"
)

// prop value enum
func (m *RouterRouteUpsert) validateStaticTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routerRouteUpsertTypeStaticTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RouterRouteUpsert) validateStaticType(formats strfmt.Registry) error {

	if err := validate.Required("staticType", "body", m.StaticType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStaticTypeEnum("staticType", "body", *m.StaticType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouterRouteUpsert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouterRouteUpsert) UnmarshalBinary(b []byte) error {
	var res RouterRouteUpsert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
