// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimulationLinkPayload simulation link payload
// swagger:model SimulationLinkPayload
type SimulationLinkPayload struct {

	// quality
	// Required: true
	// Max Length: 200
	Quality *string `json:"quality"`

	// terrain
	Terrain *Terrain `json:"terrain,omitempty"`
}

// Validate validates this simulation link payload
func (m *SimulationLinkPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerrain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulationLinkPayload) validateQuality(formats strfmt.Registry) error {

	if err := validate.Required("quality", "body", m.Quality); err != nil {
		return err
	}

	if err := validate.MaxLength("quality", "body", string(*m.Quality), 200); err != nil {
		return err
	}

	return nil
}

func (m *SimulationLinkPayload) validateTerrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Terrain) { // not required
		return nil
	}

	if m.Terrain != nil {
		if err := m.Terrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terrain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimulationLinkPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimulationLinkPayload) UnmarshalBinary(b []byte) error {
	var res SimulationLinkPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
