// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewsSchema news schema
// swagger:model NewsSchema
type NewsSchema struct {

	// Timestamp in milliseconds when the news was published.
	// Required: true
	Date *float64 `json:"date"`

	// ID of the news.
	// Required: true
	ID *string `json:"id"`

	// URL with with more details.
	// Required: true
	Link *string `json:"link"`

	// News description.
	// Required: true
	Text *string `json:"text"`

	// News severity.
	// Required: true
	Type *string `json:"type"`

	// Who issued the news.
	// Required: true
	Who *string `json:"who"`
}

// Validate validates this news schema
func (m *NewsSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWho(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewsSchema) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *NewsSchema) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NewsSchema) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *NewsSchema) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

func (m *NewsSchema) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *NewsSchema) validateWho(formats strfmt.Registry) error {

	if err := validate.Required("who", "body", m.Who); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewsSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewsSchema) UnmarshalBinary(b []byte) error {
	var res NewsSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
