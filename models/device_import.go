// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceImport device import
// swagger:model DeviceImport
type DeviceImport struct {

	// device role
	// Required: true
	// Enum: [router switch gpon ap station other ups server wireless convertor gateway]
	DeviceRole *string `json:"deviceRole"`

	// hostname
	// Required: true
	Hostname *string `json:"hostname"`

	// https port
	// Maximum: 65535
	// Minimum: 1
	HTTPSPort int64 `json:"httpsPort,omitempty"`

	// interfaces
	// Required: true
	Interfaces DeviceImportInterfaces `json:"interfaces"`

	// ip
	IP string `json:"ip,omitempty"`

	// mac
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac string `json:"mac,omitempty"`

	// model
	Model string `json:"model,omitempty"`

	// note
	Note string `json:"note,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// snmp community
	SnmpCommunity *string `json:"snmpCommunity,omitempty"`

	// ssh port
	// Maximum: 65535
	// Minimum: 1
	SSHPort int64 `json:"sshPort,omitempty"`

	// ubnt device
	// Required: true
	UbntDevice *bool `json:"ubntDevice"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this device import
func (m *DeviceImport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPSPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUbntDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceImportTypeDeviceRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceImportTypeDeviceRolePropEnum = append(deviceImportTypeDeviceRolePropEnum, v)
	}
}

const (

	// DeviceImportDeviceRoleRouter captures enum value "router"
	DeviceImportDeviceRoleRouter string = "router"

	// DeviceImportDeviceRoleSwitch captures enum value "switch"
	DeviceImportDeviceRoleSwitch string = "switch"

	// DeviceImportDeviceRoleGpon captures enum value "gpon"
	DeviceImportDeviceRoleGpon string = "gpon"

	// DeviceImportDeviceRoleAp captures enum value "ap"
	DeviceImportDeviceRoleAp string = "ap"

	// DeviceImportDeviceRoleStation captures enum value "station"
	DeviceImportDeviceRoleStation string = "station"

	// DeviceImportDeviceRoleOther captures enum value "other"
	DeviceImportDeviceRoleOther string = "other"

	// DeviceImportDeviceRoleUps captures enum value "ups"
	DeviceImportDeviceRoleUps string = "ups"

	// DeviceImportDeviceRoleServer captures enum value "server"
	DeviceImportDeviceRoleServer string = "server"

	// DeviceImportDeviceRoleWireless captures enum value "wireless"
	DeviceImportDeviceRoleWireless string = "wireless"

	// DeviceImportDeviceRoleConvertor captures enum value "convertor"
	DeviceImportDeviceRoleConvertor string = "convertor"

	// DeviceImportDeviceRoleGateway captures enum value "gateway"
	DeviceImportDeviceRoleGateway string = "gateway"
)

// prop value enum
func (m *DeviceImport) validateDeviceRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceImportTypeDeviceRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceImport) validateDeviceRole(formats strfmt.Registry) error {

	if err := validate.Required("deviceRole", "body", m.DeviceRole); err != nil {
		return err
	}

	// value enum
	if err := m.validateDeviceRoleEnum("deviceRole", "body", *m.DeviceRole); err != nil {
		return err
	}

	return nil
}

func (m *DeviceImport) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *DeviceImport) validateHTTPSPort(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPSPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("httpsPort", "body", int64(m.HTTPSPort), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("httpsPort", "body", int64(m.HTTPSPort), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceImport) validateInterfaces(formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	if err := m.Interfaces.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interfaces")
		}
		return err
	}

	return nil
}

func (m *DeviceImport) validateMac(formats strfmt.Registry) error {

	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", string(m.Mac), `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

func (m *DeviceImport) validateSSHPort(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("sshPort", "body", int64(m.SSHPort), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sshPort", "body", int64(m.SSHPort), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceImport) validateUbntDevice(formats strfmt.Registry) error {

	if err := validate.Required("ubntDevice", "body", m.UbntDevice); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceImport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceImport) UnmarshalBinary(b []byte) error {
	var res DeviceImport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
