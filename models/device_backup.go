// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceBackup device backup
// swagger:model DeviceBackup
type DeviceBackup struct {

	// extension
	// Required: true
	Extension *string `json:"extension"`

	// filename
	Filename string `json:"filename,omitempty"`

	// firmware version
	FirmwareVersion Interface `json:"firmwareVersion,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// note
	Note string `json:"note,omitempty"`

	// pinned
	Pinned bool `json:"pinned,omitempty"`

	// timestamp
	// Required: true
	// Format: date
	Timestamp *strfmt.Date `json:"timestamp"`

	// type
	// Required: true
	// Enum: [cfg tar]
	Type *string `json:"type"`
}

// Validate validates this device backup
func (m *DeviceBackup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceBackup) validateExtension(formats strfmt.Registry) error {

	if err := validate.Required("extension", "body", m.Extension); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBackup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBackup) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var deviceBackupTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cfg","tar"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceBackupTypeTypePropEnum = append(deviceBackupTypeTypePropEnum, v)
	}
}

const (

	// DeviceBackupTypeCfg captures enum value "cfg"
	DeviceBackupTypeCfg string = "cfg"

	// DeviceBackupTypeTar captures enum value "tar"
	DeviceBackupTypeTar string = "tar"
)

// prop value enum
func (m *DeviceBackup) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceBackupTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceBackup) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceBackup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceBackup) UnmarshalBinary(b []byte) error {
	var res DeviceBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
