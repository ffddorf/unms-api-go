// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model3 model 3
// swagger:model Model 3
type Model3 struct {

	// connectivity Ip queue
	ConnectivityIPQueue *ConnectivityIPQueue `json:"connectivityIpQueue,omitempty"`

	// default Ip queue
	DefaultIPQueue *DefaultIPQueue `json:"defaultIpQueue,omitempty"`

	// device
	// Required: true
	Device *Device `json:"device"`

	// Set to true to force write new NetFlow settings to device over current device's settings.
	ForceOverwrite bool `json:"forceOverwrite,omitempty"`

	// Gateway id
	// Required: true
	ID *string `json:"id"`

	// Date and time of last traffic in ISO format
	// Required: true
	LastTrafficSeen *string `json:"lastTrafficSeen"`

	// Set to true to enable alerts.
	// Required: true
	NetflowAlerts *bool `json:"netflowAlerts"`

	// Set to true to enable NetFlow.
	// Required: true
	NetflowEnabled *bool `json:"netflowEnabled"`

	// Netflow status
	// Enum: [active connecting discovered inactive disabled disconnected unauthorized proposed unknown unplaced custom]
	NetflowStatus string `json:"netflowStatus,omitempty"`

	// Set to true to enable traffic shaping.
	// Required: true
	QosEnabled *bool `json:"qosEnabled"`

	// Set to true to enable suspend.
	// Required: true
	Suspend *bool `json:"suspend"`

	// suspend allowed ips
	SuspendAllowedIps SuspendAllowedIps `json:"suspendAllowedIps,omitempty"`
}

// Validate validates this model 3
func (m *Model3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectivityIPQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultIPQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastTrafficSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetflowAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetflowEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetflowStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuspend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuspendAllowedIps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model3) validateConnectivityIPQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectivityIPQueue) { // not required
		return nil
	}

	if m.ConnectivityIPQueue != nil {
		if err := m.ConnectivityIPQueue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectivityIpQueue")
			}
			return err
		}
	}

	return nil
}

func (m *Model3) validateDefaultIPQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultIPQueue) { // not required
		return nil
	}

	if m.DefaultIPQueue != nil {
		if err := m.DefaultIPQueue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultIpQueue")
			}
			return err
		}
	}

	return nil
}

func (m *Model3) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *Model3) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Model3) validateLastTrafficSeen(formats strfmt.Registry) error {

	if err := validate.Required("lastTrafficSeen", "body", m.LastTrafficSeen); err != nil {
		return err
	}

	return nil
}

func (m *Model3) validateNetflowAlerts(formats strfmt.Registry) error {

	if err := validate.Required("netflowAlerts", "body", m.NetflowAlerts); err != nil {
		return err
	}

	return nil
}

func (m *Model3) validateNetflowEnabled(formats strfmt.Registry) error {

	if err := validate.Required("netflowEnabled", "body", m.NetflowEnabled); err != nil {
		return err
	}

	return nil
}

var model3TypeNetflowStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","connecting","discovered","inactive","disabled","disconnected","unauthorized","proposed","unknown","unplaced","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model3TypeNetflowStatusPropEnum = append(model3TypeNetflowStatusPropEnum, v)
	}
}

const (

	// Model3NetflowStatusActive captures enum value "active"
	Model3NetflowStatusActive string = "active"

	// Model3NetflowStatusConnecting captures enum value "connecting"
	Model3NetflowStatusConnecting string = "connecting"

	// Model3NetflowStatusDiscovered captures enum value "discovered"
	Model3NetflowStatusDiscovered string = "discovered"

	// Model3NetflowStatusInactive captures enum value "inactive"
	Model3NetflowStatusInactive string = "inactive"

	// Model3NetflowStatusDisabled captures enum value "disabled"
	Model3NetflowStatusDisabled string = "disabled"

	// Model3NetflowStatusDisconnected captures enum value "disconnected"
	Model3NetflowStatusDisconnected string = "disconnected"

	// Model3NetflowStatusUnauthorized captures enum value "unauthorized"
	Model3NetflowStatusUnauthorized string = "unauthorized"

	// Model3NetflowStatusProposed captures enum value "proposed"
	Model3NetflowStatusProposed string = "proposed"

	// Model3NetflowStatusUnknown captures enum value "unknown"
	Model3NetflowStatusUnknown string = "unknown"

	// Model3NetflowStatusUnplaced captures enum value "unplaced"
	Model3NetflowStatusUnplaced string = "unplaced"

	// Model3NetflowStatusCustom captures enum value "custom"
	Model3NetflowStatusCustom string = "custom"
)

// prop value enum
func (m *Model3) validateNetflowStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, model3TypeNetflowStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Model3) validateNetflowStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.NetflowStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateNetflowStatusEnum("netflowStatus", "body", m.NetflowStatus); err != nil {
		return err
	}

	return nil
}

func (m *Model3) validateQosEnabled(formats strfmt.Registry) error {

	if err := validate.Required("qosEnabled", "body", m.QosEnabled); err != nil {
		return err
	}

	return nil
}

func (m *Model3) validateSuspend(formats strfmt.Registry) error {

	if err := validate.Required("suspend", "body", m.Suspend); err != nil {
		return err
	}

	return nil
}

func (m *Model3) validateSuspendAllowedIps(formats strfmt.Registry) error {

	if swag.IsZero(m.SuspendAllowedIps) { // not required
		return nil
	}

	if err := m.SuspendAllowedIps.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("suspendAllowedIps")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model3) UnmarshalBinary(b []byte) error {
	var res Model3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
