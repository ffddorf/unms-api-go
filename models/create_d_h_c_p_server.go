// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDHCPServer create d h c p server
// swagger:model CreateDHCPServer
type CreateDHCPServer struct {

	// Primary DNS server address.
	Dns1 string `json:"dns1,omitempty"`

	// Secondary DNS server address.
	Dns2 string `json:"dns2,omitempty"`

	// Domain name.
	// Min Length: 1
	Domain string `json:"domain,omitempty"`

	// Interface IP v4 address in CIDR format.
	// Required: true
	Interface *string `json:"interface"`

	// DHCP lease time in seconds.
	// Required: true
	LeaseTime *float64 `json:"leaseTime"`

	// DHCP server custom name.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// DHCP addresses pool end in CIDR format.
	// Required: true
	RangeEnd *string `json:"rangeEnd"`

	// DHCP addresses pool start in CIDR format.
	// Required: true
	RangeStart *string `json:"rangeStart"`

	// Router IP v4 address.
	Router string `json:"router,omitempty"`

	// Unifi controller IP v4 address.
	UnifiController string `json:"unifiController,omitempty"`
}

// Validate validates this create d h c p server
func (m *CreateDHCPServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeaseTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangeEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangeStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDHCPServer) validateDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if err := validate.MinLength("domain", "body", string(m.Domain), 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateDHCPServer) validateInterface(formats strfmt.Registry) error {

	if err := validate.Required("interface", "body", m.Interface); err != nil {
		return err
	}

	return nil
}

func (m *CreateDHCPServer) validateLeaseTime(formats strfmt.Registry) error {

	if err := validate.Required("leaseTime", "body", m.LeaseTime); err != nil {
		return err
	}

	return nil
}

func (m *CreateDHCPServer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateDHCPServer) validateRangeEnd(formats strfmt.Registry) error {

	if err := validate.Required("rangeEnd", "body", m.RangeEnd); err != nil {
		return err
	}

	return nil
}

func (m *CreateDHCPServer) validateRangeStart(formats strfmt.Registry) error {

	if err := validate.Required("rangeStart", "body", m.RangeStart); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDHCPServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDHCPServer) UnmarshalBinary(b []byte) error {
	var res CreateDHCPServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
