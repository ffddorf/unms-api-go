// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportUserSchema import user schema
// swagger:model ImportUserSchema
type ImportUserSchema struct {

	// User's email.
	// Required: true
	Email *string `json:"email"`

	// User's first name.
	FirstName string `json:"firstName,omitempty"`

	// Whether user is active or not. Inactive users cannot log in.
	IsActive *bool `json:"isActive,omitempty"`

	// Whether user is UCRM super admin or not.
	IsSuperAdmin *bool `json:"isSuperAdmin,omitempty"`

	// User's last name.
	LastName string `json:"lastName,omitempty"`

	// Bcrypt hashed password.
	// Required: true
	PasswordHash *string `json:"passwordHash"`

	// User's 2FA token if 2FA is enabled.
	TotpAuthSecret string `json:"totpAuthSecret,omitempty"`

	// User's ID in CRM.
	// Required: true
	UcrmID *string `json:"ucrmId"`

	// Users's role ID in CRM.
	// Required: true
	UcrmRole *string `json:"ucrmRole"`

	// Optional user's ID in UNMS.
	UnmsID string `json:"unmsId,omitempty"`

	// Username used for login.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this import user schema
func (m *ImportUserSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUcrmID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUcrmRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportUserSchema) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *ImportUserSchema) validatePasswordHash(formats strfmt.Registry) error {

	if err := validate.Required("passwordHash", "body", m.PasswordHash); err != nil {
		return err
	}

	return nil
}

func (m *ImportUserSchema) validateUcrmID(formats strfmt.Registry) error {

	if err := validate.Required("ucrmId", "body", m.UcrmID); err != nil {
		return err
	}

	return nil
}

func (m *ImportUserSchema) validateUcrmRole(formats strfmt.Registry) error {

	if err := validate.Required("ucrmRole", "body", m.UcrmRole); err != nil {
		return err
	}

	return nil
}

func (m *ImportUserSchema) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportUserSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportUserSchema) UnmarshalBinary(b []byte) error {
	var res ImportUserSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
