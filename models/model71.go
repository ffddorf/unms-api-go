// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model71 model 71
// swagger:model Model 71
type Model71 struct {

	// comment
	// Required: true
	Comment *string `json:"comment"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// lan address
	// Required: true
	LanAddress *string `json:"lanAddress"`

	// lan port
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	LanPort *float64 `json:"lanPort"`

	// protocol
	// Required: true
	// Enum: [udp tcp tcp_udp]
	Protocol *string `json:"protocol"`

	// wan port
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	WanPort *float64 `json:"wanPort"`
}

// Validate validates this model 71
func (m *Model71) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWanPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model71) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *Model71) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *Model71) validateLanAddress(formats strfmt.Registry) error {

	if err := validate.Required("lanAddress", "body", m.LanAddress); err != nil {
		return err
	}

	return nil
}

func (m *Model71) validateLanPort(formats strfmt.Registry) error {

	if err := validate.Required("lanPort", "body", m.LanPort); err != nil {
		return err
	}

	if err := validate.Minimum("lanPort", "body", float64(*m.LanPort), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("lanPort", "body", float64(*m.LanPort), 65535, false); err != nil {
		return err
	}

	return nil
}

var model71TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["udp","tcp","tcp_udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model71TypeProtocolPropEnum = append(model71TypeProtocolPropEnum, v)
	}
}

const (

	// Model71ProtocolUDP captures enum value "udp"
	Model71ProtocolUDP string = "udp"

	// Model71ProtocolTCP captures enum value "tcp"
	Model71ProtocolTCP string = "tcp"

	// Model71ProtocolTCPUDP captures enum value "tcp_udp"
	Model71ProtocolTCPUDP string = "tcp_udp"
)

// prop value enum
func (m *Model71) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, model71TypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Model71) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *Model71) validateWanPort(formats strfmt.Registry) error {

	if err := validate.Required("wanPort", "body", m.WanPort); err != nil {
		return err
	}

	if err := validate.Minimum("wanPort", "body", float64(*m.WanPort), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("wanPort", "body", float64(*m.WanPort), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model71) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model71) UnmarshalBinary(b []byte) error {
	var res Model71
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
