// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model14 model 14
// swagger:model Model 14
type Model14 struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Enum: [running complete error none]
	Status string `json:"status,omitempty"`
}

// Validate validates this model 14
func (m *Model14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model14) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

var model14TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","complete","error","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model14TypeStatusPropEnum = append(model14TypeStatusPropEnum, v)
	}
}

const (

	// Model14StatusRunning captures enum value "running"
	Model14StatusRunning string = "running"

	// Model14StatusComplete captures enum value "complete"
	Model14StatusComplete string = "complete"

	// Model14StatusError captures enum value "error"
	Model14StatusError string = "error"

	// Model14StatusNone captures enum value "none"
	Model14StatusNone string = "none"
)

// prop value enum
func (m *Model14) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, model14TypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Model14) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model14) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model14) UnmarshalBinary(b []byte) error {
	var res Model14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
