// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Antenna1 antenna 1
// swagger:model antenna 1
type Antenna1 struct {

	// angle
	// Required: true
	Angle *float64 `json:"angle"`

	// custom
	// Required: true
	Custom *bool `json:"custom"`

	// gain
	// Required: true
	Gain *int64 `json:"gain"`

	// name
	// Required: true
	// Max Length: 200
	Name *string `json:"name"`
}

// Validate validates this antenna 1
func (m *Antenna1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAngle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Antenna1) validateAngle(formats strfmt.Registry) error {

	if err := validate.Required("angle", "body", m.Angle); err != nil {
		return err
	}

	return nil
}

func (m *Antenna1) validateCustom(formats strfmt.Registry) error {

	if err := validate.Required("custom", "body", m.Custom); err != nil {
		return err
	}

	return nil
}

func (m *Antenna1) validateGain(formats strfmt.Registry) error {

	if err := validate.Required("gain", "body", m.Gain); err != nil {
		return err
	}

	return nil
}

func (m *Antenna1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 200); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Antenna1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Antenna1) UnmarshalBinary(b []byte) error {
	var res Antenna1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
