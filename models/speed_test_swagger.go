// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SpeedTest speed test
// swagger:model SpeedTest
type SpeedTest struct {

	// data
	Data Data `json:"data,omitempty"`

	// master Id
	// Required: true
	MasterID *string `json:"masterId"`

	// slave Id
	// Required: true
	SlaveID *string `json:"slaveId"`

	// speed test Id
	// Required: true
	SpeedTestID *string `json:"speedTestId"`

	// time limit
	TimeLimit float64 `json:"timeLimit,omitempty"`

	// timestamp
	// Required: true
	Timestamp *float64 `json:"timestamp"`
}

// Validate validates this speed test
func (m *SpeedTest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlaveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedTestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpeedTest) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if err := m.Data.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data")
		}
		return err
	}

	return nil
}

func (m *SpeedTest) validateMasterID(formats strfmt.Registry) error {

	if err := validate.Required("masterId", "body", m.MasterID); err != nil {
		return err
	}

	return nil
}

func (m *SpeedTest) validateSlaveID(formats strfmt.Registry) error {

	if err := validate.Required("slaveId", "body", m.SlaveID); err != nil {
		return err
	}

	return nil
}

func (m *SpeedTest) validateSpeedTestID(formats strfmt.Registry) error {

	if err := validate.Required("speedTestId", "body", m.SpeedTestID); err != nil {
		return err
	}

	return nil
}

func (m *SpeedTest) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SpeedTest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpeedTest) UnmarshalBinary(b []byte) error {
	var res SpeedTest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
