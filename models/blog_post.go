// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlogPost blog post
// swagger:model BlogPost
type BlogPost struct {

	// categories
	Categories Categories `json:"categories,omitempty"`

	// perex of blog post
	Description string `json:"description,omitempty"`

	// blog post id in NMS
	ID string `json:"id,omitempty"`

	// image path
	ImagePath string `json:"imagePath,omitempty"`

	// post link
	Link string `json:"link,omitempty"`

	// permanent link
	PermanentLink string `json:"permanentLink,omitempty"`

	// blog post id in Ubiquiti blog
	PostID float64 `json:"postId,omitempty"`

	// publication date on Ubiquiti blog
	// Format: date
	PublicationDate strfmt.Date `json:"publicationDate,omitempty"`

	// user read blog post
	Read bool `json:"read,omitempty"`

	// post title
	Title string `json:"title,omitempty"`
}

// Validate validates this blog post
func (m *BlogPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlogPost) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	if err := m.Categories.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("categories")
		}
		return err
	}

	return nil
}

func (m *BlogPost) validatePublicationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("publicationDate", "body", "date", m.PublicationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlogPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlogPost) UnmarshalBinary(b []byte) error {
	var res BlogPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
