// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceIdentification Read-only identification attributes.
// swagger:model DeviceIdentification
type DeviceIdentification struct {

	// Device is added to UNMS.
	Authorized bool `json:"authorized,omitempty"`

	// category
	// Enum: [optical wired wireless accessories]
	Category string `json:"category,omitempty"`

	// UNMS device alias or real name.
	DisplayName string `json:"displayName,omitempty"`

	// In SemVer format.
	FirmwareVersion string `json:"firmwareVersion,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// Device ID.
	// Required: true
	ID *string `json:"id"`

	// Custom IP address in IPv4 or IPv6 format.
	IP string `json:"ip,omitempty"`

	// mac
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac string `json:"mac,omitempty"`

	// Short names, for example UF-OLT.
	Model string `json:"model,omitempty"`

	// Full names, for example UFiber OLT.
	ModelName string `json:"modelName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Short name, for example e600.
	PlatformID string `json:"platformId,omitempty"`

	// platform name
	// Enum: [UFiber NanoG UFiber Loco UFiber Wifi UFiber Instant e50 e100 e200 e300 e600 e1000 u50 u100 u200 u300 u1000 ESWH ESGH ES ESX EP EPX SW ACB WA 2WA XC 2XC XW XM TI GBE AirGW AirGWP AF AF02 AF06 AF07 AF08 AF09 af5xhd afltu lturocket GP SunMax UNKNOWN]
	PlatformName string `json:"platformName,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// site
	Site *Site `json:"site,omitempty"`

	// started
	// Format: date
	Started strfmt.Date `json:"started,omitempty"`

	// Status of the station.
	// Enum: [active disconnected inactive]
	Status string `json:"status,omitempty"`

	// type
	// Enum: [onu olt erouter eswitch epower airCube airMax airFiber toughSwitch solarBeam blackBox]
	Type string `json:"type,omitempty"`

	// updated
	// Format: date
	Updated strfmt.Date `json:"updated,omitempty"`

	// wan interface Id
	WanInterfaceID string `json:"wanInterfaceId,omitempty"`
}

// Validate validates this device identification
func (m *DeviceIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceIdentificationTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["optical","wired","wireless","accessories"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeCategoryPropEnum = append(deviceIdentificationTypeCategoryPropEnum, v)
	}
}

const (

	// DeviceIdentificationCategoryOptical captures enum value "optical"
	DeviceIdentificationCategoryOptical string = "optical"

	// DeviceIdentificationCategoryWired captures enum value "wired"
	DeviceIdentificationCategoryWired string = "wired"

	// DeviceIdentificationCategoryWireless captures enum value "wireless"
	DeviceIdentificationCategoryWireless string = "wireless"

	// DeviceIdentificationCategoryAccessories captures enum value "accessories"
	DeviceIdentificationCategoryAccessories string = "accessories"
)

// prop value enum
func (m *DeviceIdentification) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceIdentificationTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateMac(formats strfmt.Registry) error {

	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", string(m.Mac), `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypePlatformNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UFiber NanoG","UFiber Loco","UFiber Wifi","UFiber Instant","e50","e100","e200","e300","e600","e1000","u50","u100","u200","u300","u1000","ESWH","ESGH","ES","ESX","EP","EPX","SW","ACB","WA","2WA","XC","2XC","XW","XM","TI","GBE","AirGW","AirGWP","AF","AF02","AF06","AF07","AF08","AF09","af5xhd","afltu","lturocket","GP","SunMax","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypePlatformNamePropEnum = append(deviceIdentificationTypePlatformNamePropEnum, v)
	}
}

const (

	// DeviceIdentificationPlatformNameUFiberNanoG captures enum value "UFiber NanoG"
	DeviceIdentificationPlatformNameUFiberNanoG string = "UFiber NanoG"

	// DeviceIdentificationPlatformNameUFiberLoco captures enum value "UFiber Loco"
	DeviceIdentificationPlatformNameUFiberLoco string = "UFiber Loco"

	// DeviceIdentificationPlatformNameUFiberWifi captures enum value "UFiber Wifi"
	DeviceIdentificationPlatformNameUFiberWifi string = "UFiber Wifi"

	// DeviceIdentificationPlatformNameUFiberInstant captures enum value "UFiber Instant"
	DeviceIdentificationPlatformNameUFiberInstant string = "UFiber Instant"

	// DeviceIdentificationPlatformNameE50 captures enum value "e50"
	DeviceIdentificationPlatformNameE50 string = "e50"

	// DeviceIdentificationPlatformNameE100 captures enum value "e100"
	DeviceIdentificationPlatformNameE100 string = "e100"

	// DeviceIdentificationPlatformNameE200 captures enum value "e200"
	DeviceIdentificationPlatformNameE200 string = "e200"

	// DeviceIdentificationPlatformNameE300 captures enum value "e300"
	DeviceIdentificationPlatformNameE300 string = "e300"

	// DeviceIdentificationPlatformNameE600 captures enum value "e600"
	DeviceIdentificationPlatformNameE600 string = "e600"

	// DeviceIdentificationPlatformNameE1000 captures enum value "e1000"
	DeviceIdentificationPlatformNameE1000 string = "e1000"

	// DeviceIdentificationPlatformNameU50 captures enum value "u50"
	DeviceIdentificationPlatformNameU50 string = "u50"

	// DeviceIdentificationPlatformNameU100 captures enum value "u100"
	DeviceIdentificationPlatformNameU100 string = "u100"

	// DeviceIdentificationPlatformNameU200 captures enum value "u200"
	DeviceIdentificationPlatformNameU200 string = "u200"

	// DeviceIdentificationPlatformNameU300 captures enum value "u300"
	DeviceIdentificationPlatformNameU300 string = "u300"

	// DeviceIdentificationPlatformNameU1000 captures enum value "u1000"
	DeviceIdentificationPlatformNameU1000 string = "u1000"

	// DeviceIdentificationPlatformNameESWH captures enum value "ESWH"
	DeviceIdentificationPlatformNameESWH string = "ESWH"

	// DeviceIdentificationPlatformNameESGH captures enum value "ESGH"
	DeviceIdentificationPlatformNameESGH string = "ESGH"

	// DeviceIdentificationPlatformNameES captures enum value "ES"
	DeviceIdentificationPlatformNameES string = "ES"

	// DeviceIdentificationPlatformNameESX captures enum value "ESX"
	DeviceIdentificationPlatformNameESX string = "ESX"

	// DeviceIdentificationPlatformNameEP captures enum value "EP"
	DeviceIdentificationPlatformNameEP string = "EP"

	// DeviceIdentificationPlatformNameEPX captures enum value "EPX"
	DeviceIdentificationPlatformNameEPX string = "EPX"

	// DeviceIdentificationPlatformNameSW captures enum value "SW"
	DeviceIdentificationPlatformNameSW string = "SW"

	// DeviceIdentificationPlatformNameACB captures enum value "ACB"
	DeviceIdentificationPlatformNameACB string = "ACB"

	// DeviceIdentificationPlatformNameWA captures enum value "WA"
	DeviceIdentificationPlatformNameWA string = "WA"

	// DeviceIdentificationPlatformNameNr2WA captures enum value "2WA"
	DeviceIdentificationPlatformNameNr2WA string = "2WA"

	// DeviceIdentificationPlatformNameXC captures enum value "XC"
	DeviceIdentificationPlatformNameXC string = "XC"

	// DeviceIdentificationPlatformNameNr2XC captures enum value "2XC"
	DeviceIdentificationPlatformNameNr2XC string = "2XC"

	// DeviceIdentificationPlatformNameXW captures enum value "XW"
	DeviceIdentificationPlatformNameXW string = "XW"

	// DeviceIdentificationPlatformNameXM captures enum value "XM"
	DeviceIdentificationPlatformNameXM string = "XM"

	// DeviceIdentificationPlatformNameTI captures enum value "TI"
	DeviceIdentificationPlatformNameTI string = "TI"

	// DeviceIdentificationPlatformNameGBE captures enum value "GBE"
	DeviceIdentificationPlatformNameGBE string = "GBE"

	// DeviceIdentificationPlatformNameAirGW captures enum value "AirGW"
	DeviceIdentificationPlatformNameAirGW string = "AirGW"

	// DeviceIdentificationPlatformNameAirGWP captures enum value "AirGWP"
	DeviceIdentificationPlatformNameAirGWP string = "AirGWP"

	// DeviceIdentificationPlatformNameAF captures enum value "AF"
	DeviceIdentificationPlatformNameAF string = "AF"

	// DeviceIdentificationPlatformNameAF02 captures enum value "AF02"
	DeviceIdentificationPlatformNameAF02 string = "AF02"

	// DeviceIdentificationPlatformNameAF06 captures enum value "AF06"
	DeviceIdentificationPlatformNameAF06 string = "AF06"

	// DeviceIdentificationPlatformNameAF07 captures enum value "AF07"
	DeviceIdentificationPlatformNameAF07 string = "AF07"

	// DeviceIdentificationPlatformNameAF08 captures enum value "AF08"
	DeviceIdentificationPlatformNameAF08 string = "AF08"

	// DeviceIdentificationPlatformNameAF09 captures enum value "AF09"
	DeviceIdentificationPlatformNameAF09 string = "AF09"

	// DeviceIdentificationPlatformNameAf5xhd captures enum value "af5xhd"
	DeviceIdentificationPlatformNameAf5xhd string = "af5xhd"

	// DeviceIdentificationPlatformNameAfltu captures enum value "afltu"
	DeviceIdentificationPlatformNameAfltu string = "afltu"

	// DeviceIdentificationPlatformNameLturocket captures enum value "lturocket"
	DeviceIdentificationPlatformNameLturocket string = "lturocket"

	// DeviceIdentificationPlatformNameGP captures enum value "GP"
	DeviceIdentificationPlatformNameGP string = "GP"

	// DeviceIdentificationPlatformNameSunMax captures enum value "SunMax"
	DeviceIdentificationPlatformNameSunMax string = "SunMax"

	// DeviceIdentificationPlatformNameUNKNOWN captures enum value "UNKNOWN"
	DeviceIdentificationPlatformNameUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *DeviceIdentification) validatePlatformNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceIdentificationTypePlatformNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validatePlatformName(formats strfmt.Registry) error {

	if swag.IsZero(m.PlatformName) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformNameEnum("platformName", "body", m.PlatformName); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceIdentification) validateStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("started", "body", "date", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","disconnected","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeStatusPropEnum = append(deviceIdentificationTypeStatusPropEnum, v)
	}
}

const (

	// DeviceIdentificationStatusActive captures enum value "active"
	DeviceIdentificationStatusActive string = "active"

	// DeviceIdentificationStatusDisconnected captures enum value "disconnected"
	DeviceIdentificationStatusDisconnected string = "disconnected"

	// DeviceIdentificationStatusInactive captures enum value "inactive"
	DeviceIdentificationStatusInactive string = "inactive"
)

// prop value enum
func (m *DeviceIdentification) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceIdentificationTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["onu","olt","erouter","eswitch","epower","airCube","airMax","airFiber","toughSwitch","solarBeam","blackBox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeTypePropEnum = append(deviceIdentificationTypeTypePropEnum, v)
	}
}

const (

	// DeviceIdentificationTypeOnu captures enum value "onu"
	DeviceIdentificationTypeOnu string = "onu"

	// DeviceIdentificationTypeOlt captures enum value "olt"
	DeviceIdentificationTypeOlt string = "olt"

	// DeviceIdentificationTypeErouter captures enum value "erouter"
	DeviceIdentificationTypeErouter string = "erouter"

	// DeviceIdentificationTypeEswitch captures enum value "eswitch"
	DeviceIdentificationTypeEswitch string = "eswitch"

	// DeviceIdentificationTypeEpower captures enum value "epower"
	DeviceIdentificationTypeEpower string = "epower"

	// DeviceIdentificationTypeAirCube captures enum value "airCube"
	DeviceIdentificationTypeAirCube string = "airCube"

	// DeviceIdentificationTypeAirMax captures enum value "airMax"
	DeviceIdentificationTypeAirMax string = "airMax"

	// DeviceIdentificationTypeAirFiber captures enum value "airFiber"
	DeviceIdentificationTypeAirFiber string = "airFiber"

	// DeviceIdentificationTypeToughSwitch captures enum value "toughSwitch"
	DeviceIdentificationTypeToughSwitch string = "toughSwitch"

	// DeviceIdentificationTypeSolarBeam captures enum value "solarBeam"
	DeviceIdentificationTypeSolarBeam string = "solarBeam"

	// DeviceIdentificationTypeBlackBox captures enum value "blackBox"
	DeviceIdentificationTypeBlackBox string = "blackBox"
)

// prop value enum
func (m *DeviceIdentification) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceIdentificationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceIdentification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceIdentification) UnmarshalBinary(b []byte) error {
	var res DeviceIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
