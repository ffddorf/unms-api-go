// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UnknownDevice unknown device
// swagger:model UnknownDevice
type UnknownDevice struct {

	// IP address of the unknown device.
	// Required: true
	Address *string `json:"address"`

	// Total number of bytes downloaded by this IP address.
	// Required: true
	Download *float64 `json:"download"`

	// First time this IP address was seen as a ISO 8601.
	// Required: true
	// Format: date
	FirstSeen *strfmt.Date `json:"firstSeen"`

	// Last time this IP address was seen as a ISO 8601.
	// Required: true
	// Format: date
	LastSeen *strfmt.Date `json:"lastSeen"`

	// Total number of bytes uploaded by this IP address.
	// Required: true
	Upload *float64 `json:"upload"`
}

// Validate validates this unknown device
func (m *UnknownDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnknownDevice) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *UnknownDevice) validateDownload(formats strfmt.Registry) error {

	if err := validate.Required("download", "body", m.Download); err != nil {
		return err
	}

	return nil
}

func (m *UnknownDevice) validateFirstSeen(formats strfmt.Registry) error {

	if err := validate.Required("firstSeen", "body", m.FirstSeen); err != nil {
		return err
	}

	if err := validate.FormatOf("firstSeen", "body", "date", m.FirstSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UnknownDevice) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("lastSeen", "body", m.LastSeen); err != nil {
		return err
	}

	if err := validate.FormatOf("lastSeen", "body", "date", m.LastSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UnknownDevice) validateUpload(formats strfmt.Registry) error {

	if err := validate.Required("upload", "body", m.Upload); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnknownDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnknownDevice) UnmarshalBinary(b []byte) error {
	var res UnknownDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
