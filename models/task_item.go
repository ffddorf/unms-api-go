// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskItem task item
// swagger:model TaskItem
type TaskItem struct {

	// end timestamp
	// Minimum: 0
	EndTimestamp *int64 `json:"endTimestamp,omitempty"`

	// identification
	Identification *Identification2 `json:"identification,omitempty"`

	// progress
	// Minimum: 0
	Progress *float64 `json:"progress,omitempty"`

	// start timestamp
	// Minimum: 0
	StartTimestamp *int64 `json:"startTimestamp,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tasks
	Tasks *Tasks `json:"tasks,omitempty"`
}

// Validate validates this task item
func (m *TaskItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskItem) validateEndTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := validate.MinimumInt("endTimestamp", "body", int64(*m.EndTimestamp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *TaskItem) validateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if m.Identification != nil {
		if err := m.Identification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identification")
			}
			return err
		}
	}

	return nil
}

func (m *TaskItem) validateProgress(formats strfmt.Registry) error {

	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if err := validate.Minimum("progress", "body", float64(*m.Progress), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *TaskItem) validateStartTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := validate.MinimumInt("startTimestamp", "body", int64(*m.StartTimestamp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *TaskItem) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	if m.Tasks != nil {
		if err := m.Tasks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tasks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskItem) UnmarshalBinary(b []byte) error {
	var res TaskItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
