// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebServer web server
// swagger:model webServer
type WebServer struct {

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// Web UI HTTP port
	// Maximum: 65535
	// Minimum: 0
	HTTPPort *int64 `json:"httpPort,omitempty"`

	// Web UI HTTPS port
	// Maximum: 65535
	// Minimum: 0
	HTTPSPort *int64 `json:"httpsPort,omitempty"`
}

// Validate validates this web server
func (m *WebServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPSPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebServer) validateHTTPPort(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("httpPort", "body", int64(*m.HTTPPort), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("httpPort", "body", int64(*m.HTTPPort), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *WebServer) validateHTTPSPort(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPSPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("httpsPort", "body", int64(*m.HTTPSPort), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("httpsPort", "body", int64(*m.HTTPSPort), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebServer) UnmarshalBinary(b []byte) error {
	var res WebServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
