// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Site site
// swagger:model site
type Site struct {

	// Site ID.
	// Required: true
	ID *string `json:"id"`

	// Site name.
	Name string `json:"name,omitempty"`

	// parent
	Parent Parent1 `json:"parent,omitempty"`

	// Status of the site.
	// Required: true
	// Enum: [active disconnected inactive]
	Status *string `json:"status"`

	// Type of the site.
	// Required: true
	// Enum: [site endpoint]
	Type *string `json:"type"`
}

// Validate validates this site
func (m *Site) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Site) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var siteTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","disconnected","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteTypeStatusPropEnum = append(siteTypeStatusPropEnum, v)
	}
}

const (

	// SiteStatusActive captures enum value "active"
	SiteStatusActive string = "active"

	// SiteStatusDisconnected captures enum value "disconnected"
	SiteStatusDisconnected string = "disconnected"

	// SiteStatusInactive captures enum value "inactive"
	SiteStatusInactive string = "inactive"
)

// prop value enum
func (m *Site) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Site) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var siteTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["site","endpoint"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteTypeTypePropEnum = append(siteTypeTypePropEnum, v)
	}
}

const (

	// SiteTypeSite captures enum value "site"
	SiteTypeSite string = "site"

	// SiteTypeEndpoint captures enum value "endpoint"
	SiteTypeEndpoint string = "endpoint"
)

// prop value enum
func (m *Site) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Site) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Site) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Site) UnmarshalBinary(b []byte) error {
	var res Site
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
