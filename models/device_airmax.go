// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceAirmax device airmax
// swagger:model DeviceAirmax
type DeviceAirmax struct {

	// antenna
	Antenna string `json:"antenna,omitempty"`

	// ap device
	ApDevice *ApDevice2 `json:"apDevice,omitempty"`

	// ap mac
	ApMac string `json:"apMac,omitempty"`

	// authentication
	// Required: true
	// Enum: [psk psk2 ent none]
	Authentication *string `json:"authentication"`

	// Cable Length from eth0 interface in meters. When below values is null cable is long less then 20m.
	CableLength float64 `json:"cableLength,omitempty"`

	// Average signal-to-noise ratio on eth0 interface in dB
	CableSnr float64 `json:"cableSnr,omitempty"`

	// ccq
	Ccq float64 `json:"ccq,omitempty"`

	// channel width
	// Required: true
	// Minimum: 0
	ChannelWidth *int64 `json:"channelWidth"`

	// country code
	// Required: true
	// Minimum: 0
	CountryCode *int64 `json:"countryCode"`

	// frequency
	// Minimum: 0
	Frequency *float64 `json:"frequency,omitempty"`

	// frequency bands
	FrequencyBands string `json:"frequencyBands,omitempty"`

	// frequency center
	FrequencyCenter string `json:"frequencyCenter,omitempty"`

	// gps signal
	// Maximum: 1
	// Minimum: 0
	GpsSignal *float64 `json:"gpsSignal,omitempty"`

	// location
	Location *Location1 `json:"location,omitempty"`

	// noise floor
	NoiseFloor string `json:"noiseFloor,omitempty"`

	// polling
	Polling *Polling `json:"polling,omitempty"`

	// receive chains
	ReceiveChains float64 `json:"receiveChains,omitempty"`

	// remote signal
	RemoteSignal float64 `json:"remoteSignal,omitempty"`

	// Carrier to Interference-plus-Noise Ratio in dB on wireless
	RxCinr float64 `json:"rxCinr,omitempty"`

	// security
	// Required: true
	// Enum: [wep wpa wpa2 none]
	Security *string `json:"security"`

	// series
	// Required: true
	// Enum: [AC M G60]
	Series *string `json:"series"`

	// signal chain
	SignalChain SignalChain `json:"signalChain,omitempty"`

	// signal remote chain
	SignalRemoteChain SignalRemoteChain `json:"signalRemoteChain,omitempty"`

	// SSID
	Ssid string `json:"ssid,omitempty"`

	// station name
	StationName string `json:"stationName,omitempty"`

	// stations count
	StationsCount float64 `json:"stationsCount,omitempty"`

	// tdd framing
	TddFraming string `json:"tddFraming,omitempty"`

	// transmit chains
	TransmitChains float64 `json:"transmitChains,omitempty"`

	// transmit power
	TransmitPower float64 `json:"transmitPower,omitempty"`

	// wds
	Wds bool `json:"wds,omitempty"`

	// wireless mode
	// Enum: [ap ap-ptp ap-ptmp ap-ptmp-airmax ap-ptmp-airmax-mixed ap-ptmp-airmax-ac sta sta-ptp sta-ptmp aprepeater repeater mesh]
	WirelessMode string `json:"wirelessMode,omitempty"`

	// wlan mac
	WlanMac WlanMac `json:"wlanMac,omitempty"`

	// wlan rx bytes
	WlanRxBytes float64 `json:"wlanRxBytes,omitempty"`

	// wlan tx bytes
	WlanTxBytes float64 `json:"wlanTxBytes,omitempty"`
}

// Validate validates this device airmax
func (m *DeviceAirmax) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpsSignal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalRemoteChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWirelessMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWlanMac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceAirmax) validateApDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.ApDevice) { // not required
		return nil
	}

	if m.ApDevice != nil {
		if err := m.ApDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apDevice")
			}
			return err
		}
	}

	return nil
}

var deviceAirmaxTypeAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAirmaxTypeAuthenticationPropEnum = append(deviceAirmaxTypeAuthenticationPropEnum, v)
	}
}

const (

	// DeviceAirmaxAuthenticationPsk captures enum value "psk"
	DeviceAirmaxAuthenticationPsk string = "psk"

	// DeviceAirmaxAuthenticationPsk2 captures enum value "psk2"
	DeviceAirmaxAuthenticationPsk2 string = "psk2"

	// DeviceAirmaxAuthenticationEnt captures enum value "ent"
	DeviceAirmaxAuthenticationEnt string = "ent"

	// DeviceAirmaxAuthenticationNone captures enum value "none"
	DeviceAirmaxAuthenticationNone string = "none"
)

// prop value enum
func (m *DeviceAirmax) validateAuthenticationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceAirmaxTypeAuthenticationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceAirmax) validateAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("authentication", "body", m.Authentication); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthenticationEnum("authentication", "body", *m.Authentication); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAirmax) validateChannelWidth(formats strfmt.Registry) error {

	if err := validate.Required("channelWidth", "body", m.ChannelWidth); err != nil {
		return err
	}

	if err := validate.MinimumInt("channelWidth", "body", int64(*m.ChannelWidth), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAirmax) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	if err := validate.MinimumInt("countryCode", "body", int64(*m.CountryCode), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAirmax) validateFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	if err := validate.Minimum("frequency", "body", float64(*m.Frequency), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAirmax) validateGpsSignal(formats strfmt.Registry) error {

	if swag.IsZero(m.GpsSignal) { // not required
		return nil
	}

	if err := validate.Minimum("gpsSignal", "body", float64(*m.GpsSignal), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("gpsSignal", "body", float64(*m.GpsSignal), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAirmax) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceAirmax) validatePolling(formats strfmt.Registry) error {

	if swag.IsZero(m.Polling) { // not required
		return nil
	}

	if m.Polling != nil {
		if err := m.Polling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polling")
			}
			return err
		}
	}

	return nil
}

var deviceAirmaxTypeSecurityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa","wpa2","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAirmaxTypeSecurityPropEnum = append(deviceAirmaxTypeSecurityPropEnum, v)
	}
}

const (

	// DeviceAirmaxSecurityWep captures enum value "wep"
	DeviceAirmaxSecurityWep string = "wep"

	// DeviceAirmaxSecurityWpa captures enum value "wpa"
	DeviceAirmaxSecurityWpa string = "wpa"

	// DeviceAirmaxSecurityWpa2 captures enum value "wpa2"
	DeviceAirmaxSecurityWpa2 string = "wpa2"

	// DeviceAirmaxSecurityNone captures enum value "none"
	DeviceAirmaxSecurityNone string = "none"
)

// prop value enum
func (m *DeviceAirmax) validateSecurityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceAirmaxTypeSecurityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceAirmax) validateSecurity(formats strfmt.Registry) error {

	if err := validate.Required("security", "body", m.Security); err != nil {
		return err
	}

	// value enum
	if err := m.validateSecurityEnum("security", "body", *m.Security); err != nil {
		return err
	}

	return nil
}

var deviceAirmaxTypeSeriesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AC","M","G60"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAirmaxTypeSeriesPropEnum = append(deviceAirmaxTypeSeriesPropEnum, v)
	}
}

const (

	// DeviceAirmaxSeriesAC captures enum value "AC"
	DeviceAirmaxSeriesAC string = "AC"

	// DeviceAirmaxSeriesM captures enum value "M"
	DeviceAirmaxSeriesM string = "M"

	// DeviceAirmaxSeriesG60 captures enum value "G60"
	DeviceAirmaxSeriesG60 string = "G60"
)

// prop value enum
func (m *DeviceAirmax) validateSeriesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceAirmaxTypeSeriesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceAirmax) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("series", "body", m.Series); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeriesEnum("series", "body", *m.Series); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAirmax) validateSignalChain(formats strfmt.Registry) error {

	if swag.IsZero(m.SignalChain) { // not required
		return nil
	}

	if err := m.SignalChain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalChain")
		}
		return err
	}

	return nil
}

func (m *DeviceAirmax) validateSignalRemoteChain(formats strfmt.Registry) error {

	if swag.IsZero(m.SignalRemoteChain) { // not required
		return nil
	}

	if err := m.SignalRemoteChain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalRemoteChain")
		}
		return err
	}

	return nil
}

var deviceAirmaxTypeWirelessModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAirmaxTypeWirelessModePropEnum = append(deviceAirmaxTypeWirelessModePropEnum, v)
	}
}

const (

	// DeviceAirmaxWirelessModeAp captures enum value "ap"
	DeviceAirmaxWirelessModeAp string = "ap"

	// DeviceAirmaxWirelessModeApPtp captures enum value "ap-ptp"
	DeviceAirmaxWirelessModeApPtp string = "ap-ptp"

	// DeviceAirmaxWirelessModeApPtmp captures enum value "ap-ptmp"
	DeviceAirmaxWirelessModeApPtmp string = "ap-ptmp"

	// DeviceAirmaxWirelessModeApPtmpAirmax captures enum value "ap-ptmp-airmax"
	DeviceAirmaxWirelessModeApPtmpAirmax string = "ap-ptmp-airmax"

	// DeviceAirmaxWirelessModeApPtmpAirmaxMixed captures enum value "ap-ptmp-airmax-mixed"
	DeviceAirmaxWirelessModeApPtmpAirmaxMixed string = "ap-ptmp-airmax-mixed"

	// DeviceAirmaxWirelessModeApPtmpAirmaxAc captures enum value "ap-ptmp-airmax-ac"
	DeviceAirmaxWirelessModeApPtmpAirmaxAc string = "ap-ptmp-airmax-ac"

	// DeviceAirmaxWirelessModeSta captures enum value "sta"
	DeviceAirmaxWirelessModeSta string = "sta"

	// DeviceAirmaxWirelessModeStaPtp captures enum value "sta-ptp"
	DeviceAirmaxWirelessModeStaPtp string = "sta-ptp"

	// DeviceAirmaxWirelessModeStaPtmp captures enum value "sta-ptmp"
	DeviceAirmaxWirelessModeStaPtmp string = "sta-ptmp"

	// DeviceAirmaxWirelessModeAprepeater captures enum value "aprepeater"
	DeviceAirmaxWirelessModeAprepeater string = "aprepeater"

	// DeviceAirmaxWirelessModeRepeater captures enum value "repeater"
	DeviceAirmaxWirelessModeRepeater string = "repeater"

	// DeviceAirmaxWirelessModeMesh captures enum value "mesh"
	DeviceAirmaxWirelessModeMesh string = "mesh"
)

// prop value enum
func (m *DeviceAirmax) validateWirelessModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceAirmaxTypeWirelessModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceAirmax) validateWirelessMode(formats strfmt.Registry) error {

	if swag.IsZero(m.WirelessMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateWirelessModeEnum("wirelessMode", "body", m.WirelessMode); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAirmax) validateWlanMac(formats strfmt.Registry) error {

	if swag.IsZero(m.WlanMac) { // not required
		return nil
	}

	if err := m.WlanMac.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanMac")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceAirmax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceAirmax) UnmarshalBinary(b []byte) error {
	var res DeviceAirmax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
