// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceIdentification1 Read-only identification attributes.
// swagger:model DeviceIdentification 1
type DeviceIdentification1 struct {

	// Device is added to UNMS.
	Authorized bool `json:"authorized,omitempty"`

	// category
	// Enum: [optical wired wireless accessories]
	Category string `json:"category,omitempty"`

	// UNMS device alias or real name.
	DisplayName string `json:"displayName,omitempty"`

	// In SemVer format.
	FirmwareVersion string `json:"firmwareVersion,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// Device ID.
	// Required: true
	ID *string `json:"id"`

	// Custom IP address in IPv4 or IPv6 format.
	IP string `json:"ip,omitempty"`

	// mac
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac string `json:"mac,omitempty"`

	// Short names, for example UF-OLT.
	Model string `json:"model,omitempty"`

	// Full names, for example UFiber OLT.
	ModelName string `json:"modelName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Short name, for example e600.
	PlatformID string `json:"platformId,omitempty"`

	// platform name
	// Enum: [UFiber NanoG UFiber Loco UFiber Wifi UFiber Instant e50 e100 e200 e300 e600 e1000 u50 u100 u200 u300 u1000 ESWH ESGH ES ESX EP EPX SW ACB WA 2WA XC 2XC XW XM TI GBE AirGW AirGWP AF AF02 AF06 AF07 AF08 AF09 af5xhd afltu lturocket GP SunMax UNKNOWN]
	PlatformName string `json:"platformName,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// site
	Site *Site `json:"site,omitempty"`

	// started
	// Format: date
	Started strfmt.Date `json:"started,omitempty"`

	// Status of the station.
	// Enum: [active disconnected inactive]
	Status string `json:"status,omitempty"`

	// type
	// Enum: [onu olt erouter eswitch epower airCube airMax airFiber toughSwitch solarBeam blackBox]
	Type string `json:"type,omitempty"`

	// updated
	// Format: date
	Updated strfmt.Date `json:"updated,omitempty"`

	// wan interface Id
	WanInterfaceID string `json:"wanInterfaceId,omitempty"`
}

// Validate validates this device identification 1
func (m *DeviceIdentification1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceIdentification1TypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["optical","wired","wireless","accessories"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentification1TypeCategoryPropEnum = append(deviceIdentification1TypeCategoryPropEnum, v)
	}
}

const (

	// DeviceIdentification1CategoryOptical captures enum value "optical"
	DeviceIdentification1CategoryOptical string = "optical"

	// DeviceIdentification1CategoryWired captures enum value "wired"
	DeviceIdentification1CategoryWired string = "wired"

	// DeviceIdentification1CategoryWireless captures enum value "wireless"
	DeviceIdentification1CategoryWireless string = "wireless"

	// DeviceIdentification1CategoryAccessories captures enum value "accessories"
	DeviceIdentification1CategoryAccessories string = "accessories"
)

// prop value enum
func (m *DeviceIdentification1) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceIdentification1TypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification1) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification1) validateMac(formats strfmt.Registry) error {

	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", string(m.Mac), `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

var deviceIdentification1TypePlatformNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UFiber NanoG","UFiber Loco","UFiber Wifi","UFiber Instant","e50","e100","e200","e300","e600","e1000","u50","u100","u200","u300","u1000","ESWH","ESGH","ES","ESX","EP","EPX","SW","ACB","WA","2WA","XC","2XC","XW","XM","TI","GBE","AirGW","AirGWP","AF","AF02","AF06","AF07","AF08","AF09","af5xhd","afltu","lturocket","GP","SunMax","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentification1TypePlatformNamePropEnum = append(deviceIdentification1TypePlatformNamePropEnum, v)
	}
}

const (

	// DeviceIdentification1PlatformNameUFiberNanoG captures enum value "UFiber NanoG"
	DeviceIdentification1PlatformNameUFiberNanoG string = "UFiber NanoG"

	// DeviceIdentification1PlatformNameUFiberLoco captures enum value "UFiber Loco"
	DeviceIdentification1PlatformNameUFiberLoco string = "UFiber Loco"

	// DeviceIdentification1PlatformNameUFiberWifi captures enum value "UFiber Wifi"
	DeviceIdentification1PlatformNameUFiberWifi string = "UFiber Wifi"

	// DeviceIdentification1PlatformNameUFiberInstant captures enum value "UFiber Instant"
	DeviceIdentification1PlatformNameUFiberInstant string = "UFiber Instant"

	// DeviceIdentification1PlatformNameE50 captures enum value "e50"
	DeviceIdentification1PlatformNameE50 string = "e50"

	// DeviceIdentification1PlatformNameE100 captures enum value "e100"
	DeviceIdentification1PlatformNameE100 string = "e100"

	// DeviceIdentification1PlatformNameE200 captures enum value "e200"
	DeviceIdentification1PlatformNameE200 string = "e200"

	// DeviceIdentification1PlatformNameE300 captures enum value "e300"
	DeviceIdentification1PlatformNameE300 string = "e300"

	// DeviceIdentification1PlatformNameE600 captures enum value "e600"
	DeviceIdentification1PlatformNameE600 string = "e600"

	// DeviceIdentification1PlatformNameE1000 captures enum value "e1000"
	DeviceIdentification1PlatformNameE1000 string = "e1000"

	// DeviceIdentification1PlatformNameU50 captures enum value "u50"
	DeviceIdentification1PlatformNameU50 string = "u50"

	// DeviceIdentification1PlatformNameU100 captures enum value "u100"
	DeviceIdentification1PlatformNameU100 string = "u100"

	// DeviceIdentification1PlatformNameU200 captures enum value "u200"
	DeviceIdentification1PlatformNameU200 string = "u200"

	// DeviceIdentification1PlatformNameU300 captures enum value "u300"
	DeviceIdentification1PlatformNameU300 string = "u300"

	// DeviceIdentification1PlatformNameU1000 captures enum value "u1000"
	DeviceIdentification1PlatformNameU1000 string = "u1000"

	// DeviceIdentification1PlatformNameESWH captures enum value "ESWH"
	DeviceIdentification1PlatformNameESWH string = "ESWH"

	// DeviceIdentification1PlatformNameESGH captures enum value "ESGH"
	DeviceIdentification1PlatformNameESGH string = "ESGH"

	// DeviceIdentification1PlatformNameES captures enum value "ES"
	DeviceIdentification1PlatformNameES string = "ES"

	// DeviceIdentification1PlatformNameESX captures enum value "ESX"
	DeviceIdentification1PlatformNameESX string = "ESX"

	// DeviceIdentification1PlatformNameEP captures enum value "EP"
	DeviceIdentification1PlatformNameEP string = "EP"

	// DeviceIdentification1PlatformNameEPX captures enum value "EPX"
	DeviceIdentification1PlatformNameEPX string = "EPX"

	// DeviceIdentification1PlatformNameSW captures enum value "SW"
	DeviceIdentification1PlatformNameSW string = "SW"

	// DeviceIdentification1PlatformNameACB captures enum value "ACB"
	DeviceIdentification1PlatformNameACB string = "ACB"

	// DeviceIdentification1PlatformNameWA captures enum value "WA"
	DeviceIdentification1PlatformNameWA string = "WA"

	// DeviceIdentification1PlatformNameNr2WA captures enum value "2WA"
	DeviceIdentification1PlatformNameNr2WA string = "2WA"

	// DeviceIdentification1PlatformNameXC captures enum value "XC"
	DeviceIdentification1PlatformNameXC string = "XC"

	// DeviceIdentification1PlatformNameNr2XC captures enum value "2XC"
	DeviceIdentification1PlatformNameNr2XC string = "2XC"

	// DeviceIdentification1PlatformNameXW captures enum value "XW"
	DeviceIdentification1PlatformNameXW string = "XW"

	// DeviceIdentification1PlatformNameXM captures enum value "XM"
	DeviceIdentification1PlatformNameXM string = "XM"

	// DeviceIdentification1PlatformNameTI captures enum value "TI"
	DeviceIdentification1PlatformNameTI string = "TI"

	// DeviceIdentification1PlatformNameGBE captures enum value "GBE"
	DeviceIdentification1PlatformNameGBE string = "GBE"

	// DeviceIdentification1PlatformNameAirGW captures enum value "AirGW"
	DeviceIdentification1PlatformNameAirGW string = "AirGW"

	// DeviceIdentification1PlatformNameAirGWP captures enum value "AirGWP"
	DeviceIdentification1PlatformNameAirGWP string = "AirGWP"

	// DeviceIdentification1PlatformNameAF captures enum value "AF"
	DeviceIdentification1PlatformNameAF string = "AF"

	// DeviceIdentification1PlatformNameAF02 captures enum value "AF02"
	DeviceIdentification1PlatformNameAF02 string = "AF02"

	// DeviceIdentification1PlatformNameAF06 captures enum value "AF06"
	DeviceIdentification1PlatformNameAF06 string = "AF06"

	// DeviceIdentification1PlatformNameAF07 captures enum value "AF07"
	DeviceIdentification1PlatformNameAF07 string = "AF07"

	// DeviceIdentification1PlatformNameAF08 captures enum value "AF08"
	DeviceIdentification1PlatformNameAF08 string = "AF08"

	// DeviceIdentification1PlatformNameAF09 captures enum value "AF09"
	DeviceIdentification1PlatformNameAF09 string = "AF09"

	// DeviceIdentification1PlatformNameAf5xhd captures enum value "af5xhd"
	DeviceIdentification1PlatformNameAf5xhd string = "af5xhd"

	// DeviceIdentification1PlatformNameAfltu captures enum value "afltu"
	DeviceIdentification1PlatformNameAfltu string = "afltu"

	// DeviceIdentification1PlatformNameLturocket captures enum value "lturocket"
	DeviceIdentification1PlatformNameLturocket string = "lturocket"

	// DeviceIdentification1PlatformNameGP captures enum value "GP"
	DeviceIdentification1PlatformNameGP string = "GP"

	// DeviceIdentification1PlatformNameSunMax captures enum value "SunMax"
	DeviceIdentification1PlatformNameSunMax string = "SunMax"

	// DeviceIdentification1PlatformNameUNKNOWN captures enum value "UNKNOWN"
	DeviceIdentification1PlatformNameUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *DeviceIdentification1) validatePlatformNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceIdentification1TypePlatformNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification1) validatePlatformName(formats strfmt.Registry) error {

	if swag.IsZero(m.PlatformName) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformNameEnum("platformName", "body", m.PlatformName); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification1) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceIdentification1) validateStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("started", "body", "date", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

var deviceIdentification1TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","disconnected","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentification1TypeStatusPropEnum = append(deviceIdentification1TypeStatusPropEnum, v)
	}
}

const (

	// DeviceIdentification1StatusActive captures enum value "active"
	DeviceIdentification1StatusActive string = "active"

	// DeviceIdentification1StatusDisconnected captures enum value "disconnected"
	DeviceIdentification1StatusDisconnected string = "disconnected"

	// DeviceIdentification1StatusInactive captures enum value "inactive"
	DeviceIdentification1StatusInactive string = "inactive"
)

// prop value enum
func (m *DeviceIdentification1) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceIdentification1TypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification1) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var deviceIdentification1TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["onu","olt","erouter","eswitch","epower","airCube","airMax","airFiber","toughSwitch","solarBeam","blackBox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentification1TypeTypePropEnum = append(deviceIdentification1TypeTypePropEnum, v)
	}
}

const (

	// DeviceIdentification1TypeOnu captures enum value "onu"
	DeviceIdentification1TypeOnu string = "onu"

	// DeviceIdentification1TypeOlt captures enum value "olt"
	DeviceIdentification1TypeOlt string = "olt"

	// DeviceIdentification1TypeErouter captures enum value "erouter"
	DeviceIdentification1TypeErouter string = "erouter"

	// DeviceIdentification1TypeEswitch captures enum value "eswitch"
	DeviceIdentification1TypeEswitch string = "eswitch"

	// DeviceIdentification1TypeEpower captures enum value "epower"
	DeviceIdentification1TypeEpower string = "epower"

	// DeviceIdentification1TypeAirCube captures enum value "airCube"
	DeviceIdentification1TypeAirCube string = "airCube"

	// DeviceIdentification1TypeAirMax captures enum value "airMax"
	DeviceIdentification1TypeAirMax string = "airMax"

	// DeviceIdentification1TypeAirFiber captures enum value "airFiber"
	DeviceIdentification1TypeAirFiber string = "airFiber"

	// DeviceIdentification1TypeToughSwitch captures enum value "toughSwitch"
	DeviceIdentification1TypeToughSwitch string = "toughSwitch"

	// DeviceIdentification1TypeSolarBeam captures enum value "solarBeam"
	DeviceIdentification1TypeSolarBeam string = "solarBeam"

	// DeviceIdentification1TypeBlackBox captures enum value "blackBox"
	DeviceIdentification1TypeBlackBox string = "blackBox"
)

// prop value enum
func (m *DeviceIdentification1) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceIdentification1TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification1) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification1) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceIdentification1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceIdentification1) UnmarshalBinary(b []byte) error {
	var res DeviceIdentification1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
