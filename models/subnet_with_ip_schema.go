// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubnetWithIPSchema subnet with Ip schema
// swagger:model SubnetWithIpSchema
type SubnetWithIPSchema struct {

	// ips
	// Required: true
	Ips Ips `json:"ips"`

	// IP subnet in cidr notation
	Subnet string `json:"subnet,omitempty"`
}

// Validate validates this subnet with Ip schema
func (m *SubnetWithIPSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubnetWithIPSchema) validateIps(formats strfmt.Registry) error {

	if err := validate.Required("ips", "body", m.Ips); err != nil {
		return err
	}

	if err := m.Ips.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ips")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubnetWithIPSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubnetWithIPSchema) UnmarshalBinary(b []byte) error {
	var res SubnetWithIPSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
