// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Elevations1 elevations 1
// swagger:model elevations 1
type Elevations1 struct {

	// elevations
	// Required: true
	Elevations Elevations `json:"elevations"`

	// end outer elevations
	// Required: true
	EndOuterElevations EndOuterElevations `json:"endOuterElevations"`

	// start outer elevations
	// Required: true
	StartOuterElevations StartOuterElevations `json:"startOuterElevations"`
}

// Validate validates this elevations 1
func (m *Elevations1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateElevations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndOuterElevations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartOuterElevations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Elevations1) validateElevations(formats strfmt.Registry) error {

	if err := validate.Required("elevations", "body", m.Elevations); err != nil {
		return err
	}

	if err := m.Elevations.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("elevations")
		}
		return err
	}

	return nil
}

func (m *Elevations1) validateEndOuterElevations(formats strfmt.Registry) error {

	if err := validate.Required("endOuterElevations", "body", m.EndOuterElevations); err != nil {
		return err
	}

	if err := m.EndOuterElevations.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endOuterElevations")
		}
		return err
	}

	return nil
}

func (m *Elevations1) validateStartOuterElevations(formats strfmt.Registry) error {

	if err := validate.Required("startOuterElevations", "body", m.StartOuterElevations); err != nil {
		return err
	}

	if err := m.StartOuterElevations.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startOuterElevations")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Elevations1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Elevations1) UnmarshalBinary(b []byte) error {
	var res Elevations1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
