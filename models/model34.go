// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model34 model 34
// swagger:model Model 34
type Model34 struct {

	// band
	// Required: true
	// Enum: [A G]
	Band *string `json:"band"`

	// center frequency
	// Required: true
	CenterFrequency *float64 `json:"centerFrequency"`

	// channel
	// Required: true
	Channel *float64 `json:"channel"`

	// channel end freq
	// Required: true
	ChannelEndFreq *float64 `json:"channelEndFreq"`

	// channel start freq
	// Required: true
	ChannelStartFreq *float64 `json:"channelStartFreq"`

	// channel width
	// Required: true
	ChannelWidth *float64 `json:"channelWidth"`

	// control frequency
	// Required: true
	ControlFrequency *float64 `json:"controlFrequency"`

	// extension channels
	// Required: true
	ExtensionChannels ExtensionChannels `json:"extensionChannels"`

	// is air max
	// Required: true
	IsAirMax *bool `json:"isAirMax"`

	// is d f s
	// Required: true
	IsDFS *bool `json:"isDFS"`

	// is e i r p limited
	// Required: true
	IsEIRPLimited *bool `json:"isEIRPLimited"`

	// is indoor
	// Required: true
	IsIndoor *bool `json:"isIndoor"`

	// max antenna gain
	// Required: true
	MaxAntennaGain *float64 `json:"maxAntennaGain"`

	// max t x power
	// Required: true
	MaxTXPower *float64 `json:"maxTXPower"`

	// obey regulations
	// Required: true
	ObeyRegulations *bool `json:"obeyRegulations"`
}

// Validate validates this model 34
func (m *Model34) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCenterFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelEndFreq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelStartFreq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAirMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDFS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEIRPLimited(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsIndoor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxAntennaGain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTXPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObeyRegulations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var model34TypeBandPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A","G"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model34TypeBandPropEnum = append(model34TypeBandPropEnum, v)
	}
}

const (

	// Model34BandA captures enum value "A"
	Model34BandA string = "A"

	// Model34BandG captures enum value "G"
	Model34BandG string = "G"
)

// prop value enum
func (m *Model34) validateBandEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, model34TypeBandPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Model34) validateBand(formats strfmt.Registry) error {

	if err := validate.Required("band", "body", m.Band); err != nil {
		return err
	}

	// value enum
	if err := m.validateBandEnum("band", "body", *m.Band); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateCenterFrequency(formats strfmt.Registry) error {

	if err := validate.Required("centerFrequency", "body", m.CenterFrequency); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("channel", "body", m.Channel); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateChannelEndFreq(formats strfmt.Registry) error {

	if err := validate.Required("channelEndFreq", "body", m.ChannelEndFreq); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateChannelStartFreq(formats strfmt.Registry) error {

	if err := validate.Required("channelStartFreq", "body", m.ChannelStartFreq); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateChannelWidth(formats strfmt.Registry) error {

	if err := validate.Required("channelWidth", "body", m.ChannelWidth); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateControlFrequency(formats strfmt.Registry) error {

	if err := validate.Required("controlFrequency", "body", m.ControlFrequency); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateExtensionChannels(formats strfmt.Registry) error {

	if err := validate.Required("extensionChannels", "body", m.ExtensionChannels); err != nil {
		return err
	}

	if err := m.ExtensionChannels.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extensionChannels")
		}
		return err
	}

	return nil
}

func (m *Model34) validateIsAirMax(formats strfmt.Registry) error {

	if err := validate.Required("isAirMax", "body", m.IsAirMax); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateIsDFS(formats strfmt.Registry) error {

	if err := validate.Required("isDFS", "body", m.IsDFS); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateIsEIRPLimited(formats strfmt.Registry) error {

	if err := validate.Required("isEIRPLimited", "body", m.IsEIRPLimited); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateIsIndoor(formats strfmt.Registry) error {

	if err := validate.Required("isIndoor", "body", m.IsIndoor); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateMaxAntennaGain(formats strfmt.Registry) error {

	if err := validate.Required("maxAntennaGain", "body", m.MaxAntennaGain); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateMaxTXPower(formats strfmt.Registry) error {

	if err := validate.Required("maxTXPower", "body", m.MaxTXPower); err != nil {
		return err
	}

	return nil
}

func (m *Model34) validateObeyRegulations(formats strfmt.Registry) error {

	if err := validate.Required("obeyRegulations", "body", m.ObeyRegulations); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model34) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model34) UnmarshalBinary(b []byte) error {
	var res Model34
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
