// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TwoFactorLogin two factor login
// swagger:model Two Factor Login
type TwoFactorLogin struct {

	// Ignored, kept for backward compatibility.
	Password string `json:"password,omitempty"`

	// Ignored, kept for backward compatibility.
	SessionTimeout float64 `json:"sessionTimeout,omitempty"`

	// Token from successfull login.
	// Required: true
	Token *string `json:"token"`

	// 6 digit code from Authenticator.
	// Required: true
	VerificationCode *string `json:"verificationCode"`
}

// Validate validates this two factor login
func (m *TwoFactorLogin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TwoFactorLogin) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *TwoFactorLogin) validateVerificationCode(formats strfmt.Registry) error {

	if err := validate.Required("verificationCode", "body", m.VerificationCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TwoFactorLogin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TwoFactorLogin) UnmarshalBinary(b []byte) error {
	var res TwoFactorLogin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
