// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewClientLocation new client location
// swagger:model NewClientLocation
type NewClientLocation struct {

	// Client site longitude.
	// Required: true
	// Maximum: 90
	// Minimum: -90
	Latitude *float64 `json:"latitude"`

	// Client site latitude.
	// Required: true
	// Maximum: 180
	// Minimum: -180
	Longitude *float64 `json:"longitude"`
}

// Validate validates this new client location
func (m *NewClientLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewClientLocation) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("latitude", "body", m.Latitude); err != nil {
		return err
	}

	if err := validate.Minimum("latitude", "body", float64(*m.Latitude), -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("latitude", "body", float64(*m.Latitude), 90, false); err != nil {
		return err
	}

	return nil
}

func (m *NewClientLocation) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("longitude", "body", m.Longitude); err != nil {
		return err
	}

	if err := validate.Minimum("longitude", "body", float64(*m.Longitude), -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("longitude", "body", float64(*m.Longitude), 180, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewClientLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewClientLocation) UnmarshalBinary(b []byte) error {
	var res NewClientLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
