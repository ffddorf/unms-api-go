// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteIdentificationDetail1 site identification detail 1
// swagger:model SiteIdentificationDetail 1
type SiteIdentificationDetail1 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// Name of the site.
	// Required: true
	Name *string `json:"name"`

	// parent
	Parent Parent4 `json:"parent,omitempty"`

	// Status of the site.
	// Required: true
	// Enum: [active disconnected inactive]
	Status *string `json:"status"`

	// Whether access to internet is disabled for this site or not.
	Suspended bool `json:"suspended,omitempty"`

	// Type of the site.
	// Required: true
	// Enum: [site endpoint]
	Type *string `json:"type"`

	// Time when the site was last updated.
	// Format: date
	Updated strfmt.Date `json:"updated,omitempty"`
}

// Validate validates this site identification detail 1
func (m *SiteIdentificationDetail1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteIdentificationDetail1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SiteIdentificationDetail1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var siteIdentificationDetail1TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","disconnected","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteIdentificationDetail1TypeStatusPropEnum = append(siteIdentificationDetail1TypeStatusPropEnum, v)
	}
}

const (

	// SiteIdentificationDetail1StatusActive captures enum value "active"
	SiteIdentificationDetail1StatusActive string = "active"

	// SiteIdentificationDetail1StatusDisconnected captures enum value "disconnected"
	SiteIdentificationDetail1StatusDisconnected string = "disconnected"

	// SiteIdentificationDetail1StatusInactive captures enum value "inactive"
	SiteIdentificationDetail1StatusInactive string = "inactive"
)

// prop value enum
func (m *SiteIdentificationDetail1) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteIdentificationDetail1TypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteIdentificationDetail1) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var siteIdentificationDetail1TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["site","endpoint"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteIdentificationDetail1TypeTypePropEnum = append(siteIdentificationDetail1TypeTypePropEnum, v)
	}
}

const (

	// SiteIdentificationDetail1TypeSite captures enum value "site"
	SiteIdentificationDetail1TypeSite string = "site"

	// SiteIdentificationDetail1TypeEndpoint captures enum value "endpoint"
	SiteIdentificationDetail1TypeEndpoint string = "endpoint"
)

// prop value enum
func (m *SiteIdentificationDetail1) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteIdentificationDetail1TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteIdentificationDetail1) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *SiteIdentificationDetail1) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteIdentificationDetail1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteIdentificationDetail1) UnmarshalBinary(b []byte) error {
	var res SiteIdentificationDetail1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
