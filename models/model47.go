// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model47 model 47
// swagger:model Model 47
type Model47 struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// connection Id
	// Required: true
	ConnectionID *string `json:"connectionId"`

	// entity
	// Required: true
	Entity *string `json:"entity"`

	// payload
	Payload string `json:"payload,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this model 47
func (m *Model47) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model47) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *Model47) validateConnectionID(formats strfmt.Registry) error {

	if err := validate.Required("connectionId", "body", m.ConnectionID); err != nil {
		return err
	}

	return nil
}

func (m *Model47) validateEntity(formats strfmt.Registry) error {

	if err := validate.Required("entity", "body", m.Entity); err != nil {
		return err
	}

	return nil
}

func (m *Model47) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model47) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model47) UnmarshalBinary(b []byte) error {
	var res Model47
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
